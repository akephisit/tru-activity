// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/kruakemaths/tru-activity/backend/graph/model"
	"github.com/kruakemaths/tru-activity/backend/internal/models"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Activity() ActivityResolver
	ActivityAssignment() ActivityAssignmentResolver
	ActivityTemplate() ActivityTemplateResolver
	Department() DepartmentResolver
	Faculty() FacultyResolver
	FacultyMetrics() FacultyMetricsResolver
	Mutation() MutationResolver
	NotificationLog() NotificationLogResolver
	Participation() ParticipationResolver
	QRScanLog() QRScanLogResolver
	Query() QueryResolver
	Subscription() SubscriptionResolver
	SystemAlert() SystemAlertResolver
	SystemMetrics() SystemMetricsResolver
	User() UserResolver
}

type DirectiveRoot struct {
	Auth          func(ctx context.Context, obj any, next graphql.Resolver) (res any, err error)
	HasPermission func(ctx context.Context, obj any, next graphql.Resolver, permission string) (res any, err error)
	HasRole       func(ctx context.Context, obj any, next graphql.Resolver, roles []models.UserRole) (res any, err error)
}

type ComplexityRoot struct {
	Activity struct {
		Assignments     func(childComplexity int) int
		AutoApprove     func(childComplexity int) int
		ChildActivities func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		CreatedBy       func(childComplexity int) int
		Department      func(childComplexity int) int
		Description     func(childComplexity int) int
		EndDate         func(childComplexity int) int
		Faculty         func(childComplexity int) int
		ID              func(childComplexity int) int
		IsRecurring     func(childComplexity int) int
		Location        func(childComplexity int) int
		MaxParticipants func(childComplexity int) int
		ParentActivity  func(childComplexity int) int
		Participations  func(childComplexity int) int
		Points          func(childComplexity int) int
		QRCodeRequired  func(childComplexity int) int
		RecurrenceRule  func(childComplexity int) int
		RequireApproval func(childComplexity int) int
		StartDate       func(childComplexity int) int
		Status          func(childComplexity int) int
		Template        func(childComplexity int) int
		Title           func(childComplexity int) int
		Type            func(childComplexity int) int
		UpdatedAt       func(childComplexity int) int
	}

	ActivityAssignment struct {
		Activity   func(childComplexity int) int
		Admin      func(childComplexity int) int
		AssignedBy func(childComplexity int) int
		CanApprove func(childComplexity int) int
		CanScanQR  func(childComplexity int) int
		CreatedAt  func(childComplexity int) int
		ID         func(childComplexity int) int
		Notes      func(childComplexity int) int
		UpdatedAt  func(childComplexity int) int
	}

	ActivityTemplate struct {
		Activities      func(childComplexity int) int
		AutoApprove     func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		CreatedBy       func(childComplexity int) int
		DefaultDuration func(childComplexity int) int
		Description     func(childComplexity int) int
		Faculty         func(childComplexity int) int
		ID              func(childComplexity int) int
		IsActive        func(childComplexity int) int
		Location        func(childComplexity int) int
		MaxParticipants func(childComplexity int) int
		Name            func(childComplexity int) int
		Points          func(childComplexity int) int
		QRCodeRequired  func(childComplexity int) int
		RequireApproval func(childComplexity int) int
		Type            func(childComplexity int) int
		UpdatedAt       func(childComplexity int) int
	}

	AuthPayload struct {
		Token func(childComplexity int) int
		User  func(childComplexity int) int
	}

	Department struct {
		Activities func(childComplexity int) int
		Code       func(childComplexity int) int
		CreatedAt  func(childComplexity int) int
		Faculty    func(childComplexity int) int
		ID         func(childComplexity int) int
		IsActive   func(childComplexity int) int
		Name       func(childComplexity int) int
		UpdatedAt  func(childComplexity int) int
		Users      func(childComplexity int) int
	}

	Faculty struct {
		Activities  func(childComplexity int) int
		Code        func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		Departments func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		IsActive    func(childComplexity int) int
		Name        func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		Users       func(childComplexity int) int
	}

	FacultyMetrics struct {
		ActiveStudents      func(childComplexity int) int
		AverageAttendance   func(childComplexity int) int
		CompletedActivities func(childComplexity int) int
		CreatedAt           func(childComplexity int) int
		Date                func(childComplexity int) int
		Faculty             func(childComplexity int) int
		ID                  func(childComplexity int) int
		TotalActivities     func(childComplexity int) int
		TotalParticipants   func(childComplexity int) int
		TotalStudents       func(childComplexity int) int
		UpdatedAt           func(childComplexity int) int
	}

	FacultySubscription struct {
		CreatedAt         func(childComplexity int) int
		DaysUntilExpiry   func(childComplexity int) int
		EndDate           func(childComplexity int) int
		Faculty           func(childComplexity int) int
		ID                func(childComplexity int) int
		NeedsNotification func(childComplexity int) int
		StartDate         func(childComplexity int) int
		Status            func(childComplexity int) int
		Type              func(childComplexity int) int
		UpdatedAt         func(childComplexity int) int
	}

	Mutation struct {
		ApproveParticipation     func(childComplexity int, participationID string) int
		AssignActivity           func(childComplexity int, input model.CreateActivityAssignmentInput) int
		AssignFacultyAdmin       func(childComplexity int, userID string, facultyID string) int
		AssignRegularAdmin       func(childComplexity int, userID string, facultyID string, departmentID *string) int
		CreateActivity           func(childComplexity int, input model.CreateActivityInput) int
		CreateActivityTemplate   func(childComplexity int, input model.CreateActivityTemplateInput) int
		CreateDepartment         func(childComplexity int, input model.CreateDepartmentInput) int
		CreateFaculty            func(childComplexity int, input model.CreateFacultyInput) int
		CreateSubscription       func(childComplexity int, input model.CreateSubscriptionInput) int
		DeleteActivity           func(childComplexity int, id string) int
		DeleteActivityTemplate   func(childComplexity int, id string) int
		DeleteDepartment         func(childComplexity int, id string) int
		DeleteFaculty            func(childComplexity int, id string) int
		DeleteSubscription       func(childComplexity int, id string) int
		JoinActivity             func(childComplexity int, activityID string) int
		LeaveActivity            func(childComplexity int, activityID string) int
		Login                    func(childComplexity int, input model.LoginInput) int
		MarkAttendance           func(childComplexity int, participationID string, attended bool) int
		RefreshMyQRSecret        func(childComplexity int) int
		RefreshToken             func(childComplexity int) int
		RefreshUserQRSecret      func(childComplexity int, userID string) int
		Register                 func(childComplexity int, input model.RegisterInput) int
		RejectParticipation      func(childComplexity int, participationID string) int
		RemoveActivityAssignment func(childComplexity int, id string) int
		RemoveAdminRole          func(childComplexity int, userID string) int
		ScanQRCode               func(childComplexity int, input model.QRScanInput) int
		UpdateActivity           func(childComplexity int, id string, input model.UpdateActivityInput) int
		UpdateActivityAssignment func(childComplexity int, id string, input model.UpdateActivityAssignmentInput) int
		UpdateActivityTemplate   func(childComplexity int, id string, input model.UpdateActivityTemplateInput) int
		UpdateDepartment         func(childComplexity int, id string, input model.UpdateDepartmentInput) int
		UpdateFaculty            func(childComplexity int, id string, input model.CreateFacultyInput) int
		UpdateSubscription       func(childComplexity int, id string, input model.UpdateSubscriptionInput) int
	}

	NotificationLog struct {
		CreatedAt    func(childComplexity int) int
		Email        func(childComplexity int) int
		ErrorMessage func(childComplexity int) int
		ID           func(childComplexity int) int
		Message      func(childComplexity int) int
		SentAt       func(childComplexity int) int
		Status       func(childComplexity int) int
		Subject      func(childComplexity int) int
		Subscription func(childComplexity int) int
		Type         func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
	}

	Participation struct {
		Activity     func(childComplexity int) int
		ApprovedAt   func(childComplexity int) int
		AttendedAt   func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		ID           func(childComplexity int) int
		Notes        func(childComplexity int) int
		QRScannedAt  func(childComplexity int) int
		RegisteredAt func(childComplexity int) int
		ScanLocation func(childComplexity int) int
		ScannedBy    func(childComplexity int) int
		Status       func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
		User         func(childComplexity int) int
	}

	QRData struct {
		QRString  func(childComplexity int) int
		Signature func(childComplexity int) int
		StudentID func(childComplexity int) int
		Timestamp func(childComplexity int) int
		Version   func(childComplexity int) int
	}

	QRScanLog struct {
		Activity      func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		ErrorMessage  func(childComplexity int) int
		ID            func(childComplexity int) int
		IPAddress     func(childComplexity int) int
		QRTimestamp   func(childComplexity int) int
		ScanLocation  func(childComplexity int) int
		ScanTimestamp func(childComplexity int) int
		ScannedBy     func(childComplexity int) int
		StudentID     func(childComplexity int) int
		User          func(childComplexity int) int
		Valid         func(childComplexity int) int
	}

	QRScanResult struct {
		Message       func(childComplexity int) int
		Participation func(childComplexity int) int
		ScanLog       func(childComplexity int) int
		Success       func(childComplexity int) int
		User          func(childComplexity int) int
	}

	Query struct {
		Activities            func(childComplexity int, limit *int, offset *int, facultyID *string, status *models.ActivityStatus) int
		Activity              func(childComplexity int, id string) int
		ActivityAssignments   func(childComplexity int, activityID *string, adminID *string) int
		ActivityTemplate      func(childComplexity int, id string) int
		ActivityTemplates     func(childComplexity int, facultyID *string) int
		Department            func(childComplexity int, id string) int
		Departments           func(childComplexity int, facultyID *string) int
		Faculties             func(childComplexity int) int
		Faculty               func(childComplexity int, id string) int
		FacultyMetrics        func(childComplexity int, facultyID *string, fromDate *time.Time, toDate *time.Time) int
		FacultySubscription   func(childComplexity int, facultyID string) int
		Me                    func(childComplexity int) int
		MyActivities          func(childComplexity int) int
		MyActivityAssignments func(childComplexity int) int
		MyParticipations      func(childComplexity int) int
		MyQRData              func(childComplexity int) int
		NotificationLogs      func(childComplexity int, subscriptionID *string, limit *int, offset *int) int
		Participations        func(childComplexity int, activityID *string, userID *string) int
		QRScanLogs            func(childComplexity int, activityID *string, userID *string, limit *int) int
		Subscription          func(childComplexity int, id string) int
		Subscriptions         func(childComplexity int) int
		SystemMetrics         func(childComplexity int, fromDate *time.Time, toDate *time.Time) int
		User                  func(childComplexity int, id string) int
		Users                 func(childComplexity int, limit *int, offset *int) int
	}

	Subscription struct {
		ActivityAssignments   func(childComplexity int) int
		ActivityUpdates       func(childComplexity int, activityID string) int
		FacultyUpdates        func(childComplexity int, facultyID string) int
		Heartbeat             func(childComplexity int) int
		NewActivities         func(childComplexity int, facultyID *string) int
		ParticipationEvents   func(childComplexity int, activityID *string, userID *string) int
		PersonalNotifications func(childComplexity int, filter *model.SubscriptionFilter) int
		QRScanEvents          func(childComplexity int, activityID *string) int
		SubscriptionWarnings  func(childComplexity int, facultyID *string) int
		SystemAlerts          func(childComplexity int, filter *model.SubscriptionFilter) int
	}

	SubscriptionMetadata struct {
		ActivityID   func(childComplexity int) int
		ConnectionID func(childComplexity int) int
		FacultyID    func(childComplexity int) int
		Source       func(childComplexity int) int
		UserID       func(childComplexity int) int
	}

	SubscriptionPayload struct {
		Data      func(childComplexity int) int
		Metadata  func(childComplexity int) int
		Timestamp func(childComplexity int) int
		Type      func(childComplexity int) int
	}

	SystemAlert struct {
		Data      func(childComplexity int) int
		FacultyID func(childComplexity int) int
		ID        func(childComplexity int) int
		Level     func(childComplexity int) int
		Message   func(childComplexity int) int
		Timestamp func(childComplexity int) int
		Title     func(childComplexity int) int
		Type      func(childComplexity int) int
		UserID    func(childComplexity int) int
	}

	SystemMetrics struct {
		ActiveSubscriptions  func(childComplexity int) int
		CreatedAt            func(childComplexity int) int
		Date                 func(childComplexity int) int
		ExpiredSubscriptions func(childComplexity int) int
		ID                   func(childComplexity int) int
		TotalActivities      func(childComplexity int) int
		TotalDepartments     func(childComplexity int) int
		TotalFaculties       func(childComplexity int) int
		TotalParticipations  func(childComplexity int) int
		TotalStudents        func(childComplexity int) int
		UpdatedAt            func(childComplexity int) int
	}

	User struct {
		CreatedAt      func(childComplexity int) int
		Department     func(childComplexity int) int
		Email          func(childComplexity int) int
		Faculty        func(childComplexity int) int
		FirstName      func(childComplexity int) int
		ID             func(childComplexity int) int
		IsActive       func(childComplexity int) int
		LastLoginAt    func(childComplexity int) int
		LastName       func(childComplexity int) int
		Participations func(childComplexity int) int
		QRSecret       func(childComplexity int) int
		Role           func(childComplexity int) int
		StudentID      func(childComplexity int) int
		Subscriptions  func(childComplexity int) int
		UpdatedAt      func(childComplexity int) int
	}
}

type ActivityResolver interface {
	ID(ctx context.Context, obj *models.Activity) (string, error)
}
type ActivityAssignmentResolver interface {
	ID(ctx context.Context, obj *models.ActivityAssignment) (string, error)
}
type ActivityTemplateResolver interface {
	ID(ctx context.Context, obj *models.ActivityTemplate) (string, error)
}
type DepartmentResolver interface {
	ID(ctx context.Context, obj *models.Department) (string, error)
}
type FacultyResolver interface {
	ID(ctx context.Context, obj *models.Faculty) (string, error)
}
type FacultyMetricsResolver interface {
	ID(ctx context.Context, obj *models.FacultyMetrics) (string, error)
}
type MutationResolver interface {
	Login(ctx context.Context, input model.LoginInput) (*model.AuthPayload, error)
	Register(ctx context.Context, input model.RegisterInput) (*model.AuthPayload, error)
	RefreshToken(ctx context.Context) (*model.AuthPayload, error)
	CreateActivity(ctx context.Context, input model.CreateActivityInput) (*models.Activity, error)
	UpdateActivity(ctx context.Context, id string, input model.UpdateActivityInput) (*models.Activity, error)
	DeleteActivity(ctx context.Context, id string) (bool, error)
	JoinActivity(ctx context.Context, activityID string) (*models.Participation, error)
	LeaveActivity(ctx context.Context, activityID string) (bool, error)
	ApproveParticipation(ctx context.Context, participationID string) (*models.Participation, error)
	RejectParticipation(ctx context.Context, participationID string) (*models.Participation, error)
	MarkAttendance(ctx context.Context, participationID string, attended bool) (*models.Participation, error)
	CreateFaculty(ctx context.Context, input model.CreateFacultyInput) (*models.Faculty, error)
	UpdateFaculty(ctx context.Context, id string, input model.CreateFacultyInput) (*models.Faculty, error)
	DeleteFaculty(ctx context.Context, id string) (bool, error)
	CreateDepartment(ctx context.Context, input model.CreateDepartmentInput) (*models.Department, error)
	UpdateDepartment(ctx context.Context, id string, input model.UpdateDepartmentInput) (*models.Department, error)
	DeleteDepartment(ctx context.Context, id string) (bool, error)
	CreateSubscription(ctx context.Context, input model.CreateSubscriptionInput) (*model.FacultySubscription, error)
	UpdateSubscription(ctx context.Context, id string, input model.UpdateSubscriptionInput) (*model.FacultySubscription, error)
	DeleteSubscription(ctx context.Context, id string) (bool, error)
	AssignFacultyAdmin(ctx context.Context, userID string, facultyID string) (*models.User, error)
	AssignRegularAdmin(ctx context.Context, userID string, facultyID string, departmentID *string) (*models.User, error)
	RemoveAdminRole(ctx context.Context, userID string) (*models.User, error)
	CreateActivityTemplate(ctx context.Context, input model.CreateActivityTemplateInput) (*models.ActivityTemplate, error)
	UpdateActivityTemplate(ctx context.Context, id string, input model.UpdateActivityTemplateInput) (*models.ActivityTemplate, error)
	DeleteActivityTemplate(ctx context.Context, id string) (bool, error)
	AssignActivity(ctx context.Context, input model.CreateActivityAssignmentInput) (*models.ActivityAssignment, error)
	UpdateActivityAssignment(ctx context.Context, id string, input model.UpdateActivityAssignmentInput) (*models.ActivityAssignment, error)
	RemoveActivityAssignment(ctx context.Context, id string) (bool, error)
	ScanQRCode(ctx context.Context, input model.QRScanInput) (*model.QRScanResult, error)
	RefreshMyQRSecret(ctx context.Context) (*model.QRData, error)
	RefreshUserQRSecret(ctx context.Context, userID string) (*model.QRData, error)
}
type NotificationLogResolver interface {
	ID(ctx context.Context, obj *models.NotificationLog) (string, error)
	Subscription(ctx context.Context, obj *models.NotificationLog) (*model.FacultySubscription, error)
	Type(ctx context.Context, obj *models.NotificationLog) (string, error)
	Status(ctx context.Context, obj *models.NotificationLog) (string, error)
}
type ParticipationResolver interface {
	ID(ctx context.Context, obj *models.Participation) (string, error)
}
type QRScanLogResolver interface {
	ID(ctx context.Context, obj *models.QRScanLog) (string, error)
}
type QueryResolver interface {
	Me(ctx context.Context) (*models.User, error)
	Users(ctx context.Context, limit *int, offset *int) ([]*models.User, error)
	User(ctx context.Context, id string) (*models.User, error)
	Faculties(ctx context.Context) ([]*models.Faculty, error)
	Faculty(ctx context.Context, id string) (*models.Faculty, error)
	Departments(ctx context.Context, facultyID *string) ([]*models.Department, error)
	Department(ctx context.Context, id string) (*models.Department, error)
	Activities(ctx context.Context, limit *int, offset *int, facultyID *string, status *models.ActivityStatus) ([]*models.Activity, error)
	Activity(ctx context.Context, id string) (*models.Activity, error)
	MyActivities(ctx context.Context) ([]*models.Activity, error)
	Participations(ctx context.Context, activityID *string, userID *string) ([]*models.Participation, error)
	MyParticipations(ctx context.Context) ([]*models.Participation, error)
	Subscriptions(ctx context.Context) ([]*model.FacultySubscription, error)
	Subscription(ctx context.Context, id string) (*model.FacultySubscription, error)
	FacultySubscription(ctx context.Context, facultyID string) (*model.FacultySubscription, error)
	SystemMetrics(ctx context.Context, fromDate *time.Time, toDate *time.Time) ([]*models.SystemMetrics, error)
	FacultyMetrics(ctx context.Context, facultyID *string, fromDate *time.Time, toDate *time.Time) ([]*models.FacultyMetrics, error)
	NotificationLogs(ctx context.Context, subscriptionID *string, limit *int, offset *int) ([]*models.NotificationLog, error)
	ActivityTemplates(ctx context.Context, facultyID *string) ([]*models.ActivityTemplate, error)
	ActivityTemplate(ctx context.Context, id string) (*models.ActivityTemplate, error)
	ActivityAssignments(ctx context.Context, activityID *string, adminID *string) ([]*models.ActivityAssignment, error)
	MyActivityAssignments(ctx context.Context) ([]*models.ActivityAssignment, error)
	MyQRData(ctx context.Context) (*model.QRData, error)
	QRScanLogs(ctx context.Context, activityID *string, userID *string, limit *int) ([]*models.QRScanLog, error)
}
type SubscriptionResolver interface {
	PersonalNotifications(ctx context.Context, filter *model.SubscriptionFilter) (<-chan *model.SubscriptionPayload, error)
	ActivityUpdates(ctx context.Context, activityID string) (<-chan *model.SubscriptionPayload, error)
	FacultyUpdates(ctx context.Context, facultyID string) (<-chan *model.SubscriptionPayload, error)
	SystemAlerts(ctx context.Context, filter *model.SubscriptionFilter) (<-chan *model.SubscriptionPayload, error)
	QRScanEvents(ctx context.Context, activityID *string) (<-chan *model.SubscriptionPayload, error)
	ParticipationEvents(ctx context.Context, activityID *string, userID *string) (<-chan *model.SubscriptionPayload, error)
	SubscriptionWarnings(ctx context.Context, facultyID *string) (<-chan *model.SubscriptionPayload, error)
	ActivityAssignments(ctx context.Context) (<-chan *model.SubscriptionPayload, error)
	NewActivities(ctx context.Context, facultyID *string) (<-chan *model.SubscriptionPayload, error)
	Heartbeat(ctx context.Context) (<-chan string, error)
}
type SystemAlertResolver interface {
	ID(ctx context.Context, obj *models.SystemAlert) (string, error)

	Level(ctx context.Context, obj *models.SystemAlert) (string, error)
	Title(ctx context.Context, obj *models.SystemAlert) (string, error)

	FacultyID(ctx context.Context, obj *models.SystemAlert) (*string, error)
	UserID(ctx context.Context, obj *models.SystemAlert) (*string, error)
	Data(ctx context.Context, obj *models.SystemAlert) (*string, error)
	Timestamp(ctx context.Context, obj *models.SystemAlert) (*time.Time, error)
}
type SystemMetricsResolver interface {
	ID(ctx context.Context, obj *models.SystemMetrics) (string, error)
}
type UserResolver interface {
	ID(ctx context.Context, obj *models.User) (string, error)

	Subscriptions(ctx context.Context, obj *models.User) ([]*model.FacultySubscription, error)
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(ctx context.Context, typeName, field string, childComplexity int, rawArgs map[string]any) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "Activity.assignments":
		if e.complexity.Activity.Assignments == nil {
			break
		}

		return e.complexity.Activity.Assignments(childComplexity), true

	case "Activity.autoApprove":
		if e.complexity.Activity.AutoApprove == nil {
			break
		}

		return e.complexity.Activity.AutoApprove(childComplexity), true

	case "Activity.childActivities":
		if e.complexity.Activity.ChildActivities == nil {
			break
		}

		return e.complexity.Activity.ChildActivities(childComplexity), true

	case "Activity.createdAt":
		if e.complexity.Activity.CreatedAt == nil {
			break
		}

		return e.complexity.Activity.CreatedAt(childComplexity), true

	case "Activity.createdBy":
		if e.complexity.Activity.CreatedBy == nil {
			break
		}

		return e.complexity.Activity.CreatedBy(childComplexity), true

	case "Activity.department":
		if e.complexity.Activity.Department == nil {
			break
		}

		return e.complexity.Activity.Department(childComplexity), true

	case "Activity.description":
		if e.complexity.Activity.Description == nil {
			break
		}

		return e.complexity.Activity.Description(childComplexity), true

	case "Activity.endDate":
		if e.complexity.Activity.EndDate == nil {
			break
		}

		return e.complexity.Activity.EndDate(childComplexity), true

	case "Activity.faculty":
		if e.complexity.Activity.Faculty == nil {
			break
		}

		return e.complexity.Activity.Faculty(childComplexity), true

	case "Activity.id":
		if e.complexity.Activity.ID == nil {
			break
		}

		return e.complexity.Activity.ID(childComplexity), true

	case "Activity.isRecurring":
		if e.complexity.Activity.IsRecurring == nil {
			break
		}

		return e.complexity.Activity.IsRecurring(childComplexity), true

	case "Activity.location":
		if e.complexity.Activity.Location == nil {
			break
		}

		return e.complexity.Activity.Location(childComplexity), true

	case "Activity.maxParticipants":
		if e.complexity.Activity.MaxParticipants == nil {
			break
		}

		return e.complexity.Activity.MaxParticipants(childComplexity), true

	case "Activity.parentActivity":
		if e.complexity.Activity.ParentActivity == nil {
			break
		}

		return e.complexity.Activity.ParentActivity(childComplexity), true

	case "Activity.participations":
		if e.complexity.Activity.Participations == nil {
			break
		}

		return e.complexity.Activity.Participations(childComplexity), true

	case "Activity.points":
		if e.complexity.Activity.Points == nil {
			break
		}

		return e.complexity.Activity.Points(childComplexity), true

	case "Activity.qrCodeRequired":
		if e.complexity.Activity.QRCodeRequired == nil {
			break
		}

		return e.complexity.Activity.QRCodeRequired(childComplexity), true

	case "Activity.recurrenceRule":
		if e.complexity.Activity.RecurrenceRule == nil {
			break
		}

		return e.complexity.Activity.RecurrenceRule(childComplexity), true

	case "Activity.requireApproval":
		if e.complexity.Activity.RequireApproval == nil {
			break
		}

		return e.complexity.Activity.RequireApproval(childComplexity), true

	case "Activity.startDate":
		if e.complexity.Activity.StartDate == nil {
			break
		}

		return e.complexity.Activity.StartDate(childComplexity), true

	case "Activity.status":
		if e.complexity.Activity.Status == nil {
			break
		}

		return e.complexity.Activity.Status(childComplexity), true

	case "Activity.template":
		if e.complexity.Activity.Template == nil {
			break
		}

		return e.complexity.Activity.Template(childComplexity), true

	case "Activity.title":
		if e.complexity.Activity.Title == nil {
			break
		}

		return e.complexity.Activity.Title(childComplexity), true

	case "Activity.type":
		if e.complexity.Activity.Type == nil {
			break
		}

		return e.complexity.Activity.Type(childComplexity), true

	case "Activity.updatedAt":
		if e.complexity.Activity.UpdatedAt == nil {
			break
		}

		return e.complexity.Activity.UpdatedAt(childComplexity), true

	case "ActivityAssignment.activity":
		if e.complexity.ActivityAssignment.Activity == nil {
			break
		}

		return e.complexity.ActivityAssignment.Activity(childComplexity), true

	case "ActivityAssignment.admin":
		if e.complexity.ActivityAssignment.Admin == nil {
			break
		}

		return e.complexity.ActivityAssignment.Admin(childComplexity), true

	case "ActivityAssignment.assignedBy":
		if e.complexity.ActivityAssignment.AssignedBy == nil {
			break
		}

		return e.complexity.ActivityAssignment.AssignedBy(childComplexity), true

	case "ActivityAssignment.canApprove":
		if e.complexity.ActivityAssignment.CanApprove == nil {
			break
		}

		return e.complexity.ActivityAssignment.CanApprove(childComplexity), true

	case "ActivityAssignment.canScanQR":
		if e.complexity.ActivityAssignment.CanScanQR == nil {
			break
		}

		return e.complexity.ActivityAssignment.CanScanQR(childComplexity), true

	case "ActivityAssignment.createdAt":
		if e.complexity.ActivityAssignment.CreatedAt == nil {
			break
		}

		return e.complexity.ActivityAssignment.CreatedAt(childComplexity), true

	case "ActivityAssignment.id":
		if e.complexity.ActivityAssignment.ID == nil {
			break
		}

		return e.complexity.ActivityAssignment.ID(childComplexity), true

	case "ActivityAssignment.notes":
		if e.complexity.ActivityAssignment.Notes == nil {
			break
		}

		return e.complexity.ActivityAssignment.Notes(childComplexity), true

	case "ActivityAssignment.updatedAt":
		if e.complexity.ActivityAssignment.UpdatedAt == nil {
			break
		}

		return e.complexity.ActivityAssignment.UpdatedAt(childComplexity), true

	case "ActivityTemplate.activities":
		if e.complexity.ActivityTemplate.Activities == nil {
			break
		}

		return e.complexity.ActivityTemplate.Activities(childComplexity), true

	case "ActivityTemplate.autoApprove":
		if e.complexity.ActivityTemplate.AutoApprove == nil {
			break
		}

		return e.complexity.ActivityTemplate.AutoApprove(childComplexity), true

	case "ActivityTemplate.createdAt":
		if e.complexity.ActivityTemplate.CreatedAt == nil {
			break
		}

		return e.complexity.ActivityTemplate.CreatedAt(childComplexity), true

	case "ActivityTemplate.createdBy":
		if e.complexity.ActivityTemplate.CreatedBy == nil {
			break
		}

		return e.complexity.ActivityTemplate.CreatedBy(childComplexity), true

	case "ActivityTemplate.defaultDuration":
		if e.complexity.ActivityTemplate.DefaultDuration == nil {
			break
		}

		return e.complexity.ActivityTemplate.DefaultDuration(childComplexity), true

	case "ActivityTemplate.description":
		if e.complexity.ActivityTemplate.Description == nil {
			break
		}

		return e.complexity.ActivityTemplate.Description(childComplexity), true

	case "ActivityTemplate.faculty":
		if e.complexity.ActivityTemplate.Faculty == nil {
			break
		}

		return e.complexity.ActivityTemplate.Faculty(childComplexity), true

	case "ActivityTemplate.id":
		if e.complexity.ActivityTemplate.ID == nil {
			break
		}

		return e.complexity.ActivityTemplate.ID(childComplexity), true

	case "ActivityTemplate.isActive":
		if e.complexity.ActivityTemplate.IsActive == nil {
			break
		}

		return e.complexity.ActivityTemplate.IsActive(childComplexity), true

	case "ActivityTemplate.location":
		if e.complexity.ActivityTemplate.Location == nil {
			break
		}

		return e.complexity.ActivityTemplate.Location(childComplexity), true

	case "ActivityTemplate.maxParticipants":
		if e.complexity.ActivityTemplate.MaxParticipants == nil {
			break
		}

		return e.complexity.ActivityTemplate.MaxParticipants(childComplexity), true

	case "ActivityTemplate.name":
		if e.complexity.ActivityTemplate.Name == nil {
			break
		}

		return e.complexity.ActivityTemplate.Name(childComplexity), true

	case "ActivityTemplate.points":
		if e.complexity.ActivityTemplate.Points == nil {
			break
		}

		return e.complexity.ActivityTemplate.Points(childComplexity), true

	case "ActivityTemplate.qrCodeRequired":
		if e.complexity.ActivityTemplate.QRCodeRequired == nil {
			break
		}

		return e.complexity.ActivityTemplate.QRCodeRequired(childComplexity), true

	case "ActivityTemplate.requireApproval":
		if e.complexity.ActivityTemplate.RequireApproval == nil {
			break
		}

		return e.complexity.ActivityTemplate.RequireApproval(childComplexity), true

	case "ActivityTemplate.type":
		if e.complexity.ActivityTemplate.Type == nil {
			break
		}

		return e.complexity.ActivityTemplate.Type(childComplexity), true

	case "ActivityTemplate.updatedAt":
		if e.complexity.ActivityTemplate.UpdatedAt == nil {
			break
		}

		return e.complexity.ActivityTemplate.UpdatedAt(childComplexity), true

	case "AuthPayload.token":
		if e.complexity.AuthPayload.Token == nil {
			break
		}

		return e.complexity.AuthPayload.Token(childComplexity), true

	case "AuthPayload.user":
		if e.complexity.AuthPayload.User == nil {
			break
		}

		return e.complexity.AuthPayload.User(childComplexity), true

	case "Department.activities":
		if e.complexity.Department.Activities == nil {
			break
		}

		return e.complexity.Department.Activities(childComplexity), true

	case "Department.code":
		if e.complexity.Department.Code == nil {
			break
		}

		return e.complexity.Department.Code(childComplexity), true

	case "Department.createdAt":
		if e.complexity.Department.CreatedAt == nil {
			break
		}

		return e.complexity.Department.CreatedAt(childComplexity), true

	case "Department.faculty":
		if e.complexity.Department.Faculty == nil {
			break
		}

		return e.complexity.Department.Faculty(childComplexity), true

	case "Department.id":
		if e.complexity.Department.ID == nil {
			break
		}

		return e.complexity.Department.ID(childComplexity), true

	case "Department.isActive":
		if e.complexity.Department.IsActive == nil {
			break
		}

		return e.complexity.Department.IsActive(childComplexity), true

	case "Department.name":
		if e.complexity.Department.Name == nil {
			break
		}

		return e.complexity.Department.Name(childComplexity), true

	case "Department.updatedAt":
		if e.complexity.Department.UpdatedAt == nil {
			break
		}

		return e.complexity.Department.UpdatedAt(childComplexity), true

	case "Department.users":
		if e.complexity.Department.Users == nil {
			break
		}

		return e.complexity.Department.Users(childComplexity), true

	case "Faculty.activities":
		if e.complexity.Faculty.Activities == nil {
			break
		}

		return e.complexity.Faculty.Activities(childComplexity), true

	case "Faculty.code":
		if e.complexity.Faculty.Code == nil {
			break
		}

		return e.complexity.Faculty.Code(childComplexity), true

	case "Faculty.createdAt":
		if e.complexity.Faculty.CreatedAt == nil {
			break
		}

		return e.complexity.Faculty.CreatedAt(childComplexity), true

	case "Faculty.departments":
		if e.complexity.Faculty.Departments == nil {
			break
		}

		return e.complexity.Faculty.Departments(childComplexity), true

	case "Faculty.description":
		if e.complexity.Faculty.Description == nil {
			break
		}

		return e.complexity.Faculty.Description(childComplexity), true

	case "Faculty.id":
		if e.complexity.Faculty.ID == nil {
			break
		}

		return e.complexity.Faculty.ID(childComplexity), true

	case "Faculty.isActive":
		if e.complexity.Faculty.IsActive == nil {
			break
		}

		return e.complexity.Faculty.IsActive(childComplexity), true

	case "Faculty.name":
		if e.complexity.Faculty.Name == nil {
			break
		}

		return e.complexity.Faculty.Name(childComplexity), true

	case "Faculty.updatedAt":
		if e.complexity.Faculty.UpdatedAt == nil {
			break
		}

		return e.complexity.Faculty.UpdatedAt(childComplexity), true

	case "Faculty.users":
		if e.complexity.Faculty.Users == nil {
			break
		}

		return e.complexity.Faculty.Users(childComplexity), true

	case "FacultyMetrics.activeStudents":
		if e.complexity.FacultyMetrics.ActiveStudents == nil {
			break
		}

		return e.complexity.FacultyMetrics.ActiveStudents(childComplexity), true

	case "FacultyMetrics.averageAttendance":
		if e.complexity.FacultyMetrics.AverageAttendance == nil {
			break
		}

		return e.complexity.FacultyMetrics.AverageAttendance(childComplexity), true

	case "FacultyMetrics.completedActivities":
		if e.complexity.FacultyMetrics.CompletedActivities == nil {
			break
		}

		return e.complexity.FacultyMetrics.CompletedActivities(childComplexity), true

	case "FacultyMetrics.createdAt":
		if e.complexity.FacultyMetrics.CreatedAt == nil {
			break
		}

		return e.complexity.FacultyMetrics.CreatedAt(childComplexity), true

	case "FacultyMetrics.date":
		if e.complexity.FacultyMetrics.Date == nil {
			break
		}

		return e.complexity.FacultyMetrics.Date(childComplexity), true

	case "FacultyMetrics.faculty":
		if e.complexity.FacultyMetrics.Faculty == nil {
			break
		}

		return e.complexity.FacultyMetrics.Faculty(childComplexity), true

	case "FacultyMetrics.id":
		if e.complexity.FacultyMetrics.ID == nil {
			break
		}

		return e.complexity.FacultyMetrics.ID(childComplexity), true

	case "FacultyMetrics.totalActivities":
		if e.complexity.FacultyMetrics.TotalActivities == nil {
			break
		}

		return e.complexity.FacultyMetrics.TotalActivities(childComplexity), true

	case "FacultyMetrics.totalParticipants":
		if e.complexity.FacultyMetrics.TotalParticipants == nil {
			break
		}

		return e.complexity.FacultyMetrics.TotalParticipants(childComplexity), true

	case "FacultyMetrics.totalStudents":
		if e.complexity.FacultyMetrics.TotalStudents == nil {
			break
		}

		return e.complexity.FacultyMetrics.TotalStudents(childComplexity), true

	case "FacultyMetrics.updatedAt":
		if e.complexity.FacultyMetrics.UpdatedAt == nil {
			break
		}

		return e.complexity.FacultyMetrics.UpdatedAt(childComplexity), true

	case "FacultySubscription.createdAt":
		if e.complexity.FacultySubscription.CreatedAt == nil {
			break
		}

		return e.complexity.FacultySubscription.CreatedAt(childComplexity), true

	case "FacultySubscription.daysUntilExpiry":
		if e.complexity.FacultySubscription.DaysUntilExpiry == nil {
			break
		}

		return e.complexity.FacultySubscription.DaysUntilExpiry(childComplexity), true

	case "FacultySubscription.endDate":
		if e.complexity.FacultySubscription.EndDate == nil {
			break
		}

		return e.complexity.FacultySubscription.EndDate(childComplexity), true

	case "FacultySubscription.faculty":
		if e.complexity.FacultySubscription.Faculty == nil {
			break
		}

		return e.complexity.FacultySubscription.Faculty(childComplexity), true

	case "FacultySubscription.id":
		if e.complexity.FacultySubscription.ID == nil {
			break
		}

		return e.complexity.FacultySubscription.ID(childComplexity), true

	case "FacultySubscription.needsNotification":
		if e.complexity.FacultySubscription.NeedsNotification == nil {
			break
		}

		return e.complexity.FacultySubscription.NeedsNotification(childComplexity), true

	case "FacultySubscription.startDate":
		if e.complexity.FacultySubscription.StartDate == nil {
			break
		}

		return e.complexity.FacultySubscription.StartDate(childComplexity), true

	case "FacultySubscription.status":
		if e.complexity.FacultySubscription.Status == nil {
			break
		}

		return e.complexity.FacultySubscription.Status(childComplexity), true

	case "FacultySubscription.type":
		if e.complexity.FacultySubscription.Type == nil {
			break
		}

		return e.complexity.FacultySubscription.Type(childComplexity), true

	case "FacultySubscription.updatedAt":
		if e.complexity.FacultySubscription.UpdatedAt == nil {
			break
		}

		return e.complexity.FacultySubscription.UpdatedAt(childComplexity), true

	case "Mutation.approveParticipation":
		if e.complexity.Mutation.ApproveParticipation == nil {
			break
		}

		args, err := ec.field_Mutation_approveParticipation_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ApproveParticipation(childComplexity, args["participationID"].(string)), true

	case "Mutation.assignActivity":
		if e.complexity.Mutation.AssignActivity == nil {
			break
		}

		args, err := ec.field_Mutation_assignActivity_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AssignActivity(childComplexity, args["input"].(model.CreateActivityAssignmentInput)), true

	case "Mutation.assignFacultyAdmin":
		if e.complexity.Mutation.AssignFacultyAdmin == nil {
			break
		}

		args, err := ec.field_Mutation_assignFacultyAdmin_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AssignFacultyAdmin(childComplexity, args["userID"].(string), args["facultyID"].(string)), true

	case "Mutation.assignRegularAdmin":
		if e.complexity.Mutation.AssignRegularAdmin == nil {
			break
		}

		args, err := ec.field_Mutation_assignRegularAdmin_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AssignRegularAdmin(childComplexity, args["userID"].(string), args["facultyID"].(string), args["departmentID"].(*string)), true

	case "Mutation.createActivity":
		if e.complexity.Mutation.CreateActivity == nil {
			break
		}

		args, err := ec.field_Mutation_createActivity_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateActivity(childComplexity, args["input"].(model.CreateActivityInput)), true

	case "Mutation.createActivityTemplate":
		if e.complexity.Mutation.CreateActivityTemplate == nil {
			break
		}

		args, err := ec.field_Mutation_createActivityTemplate_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateActivityTemplate(childComplexity, args["input"].(model.CreateActivityTemplateInput)), true

	case "Mutation.createDepartment":
		if e.complexity.Mutation.CreateDepartment == nil {
			break
		}

		args, err := ec.field_Mutation_createDepartment_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateDepartment(childComplexity, args["input"].(model.CreateDepartmentInput)), true

	case "Mutation.createFaculty":
		if e.complexity.Mutation.CreateFaculty == nil {
			break
		}

		args, err := ec.field_Mutation_createFaculty_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateFaculty(childComplexity, args["input"].(model.CreateFacultyInput)), true

	case "Mutation.createSubscription":
		if e.complexity.Mutation.CreateSubscription == nil {
			break
		}

		args, err := ec.field_Mutation_createSubscription_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateSubscription(childComplexity, args["input"].(model.CreateSubscriptionInput)), true

	case "Mutation.deleteActivity":
		if e.complexity.Mutation.DeleteActivity == nil {
			break
		}

		args, err := ec.field_Mutation_deleteActivity_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteActivity(childComplexity, args["id"].(string)), true

	case "Mutation.deleteActivityTemplate":
		if e.complexity.Mutation.DeleteActivityTemplate == nil {
			break
		}

		args, err := ec.field_Mutation_deleteActivityTemplate_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteActivityTemplate(childComplexity, args["id"].(string)), true

	case "Mutation.deleteDepartment":
		if e.complexity.Mutation.DeleteDepartment == nil {
			break
		}

		args, err := ec.field_Mutation_deleteDepartment_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDepartment(childComplexity, args["id"].(string)), true

	case "Mutation.deleteFaculty":
		if e.complexity.Mutation.DeleteFaculty == nil {
			break
		}

		args, err := ec.field_Mutation_deleteFaculty_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteFaculty(childComplexity, args["id"].(string)), true

	case "Mutation.deleteSubscription":
		if e.complexity.Mutation.DeleteSubscription == nil {
			break
		}

		args, err := ec.field_Mutation_deleteSubscription_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteSubscription(childComplexity, args["id"].(string)), true

	case "Mutation.joinActivity":
		if e.complexity.Mutation.JoinActivity == nil {
			break
		}

		args, err := ec.field_Mutation_joinActivity_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.JoinActivity(childComplexity, args["activityID"].(string)), true

	case "Mutation.leaveActivity":
		if e.complexity.Mutation.LeaveActivity == nil {
			break
		}

		args, err := ec.field_Mutation_leaveActivity_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.LeaveActivity(childComplexity, args["activityID"].(string)), true

	case "Mutation.login":
		if e.complexity.Mutation.Login == nil {
			break
		}

		args, err := ec.field_Mutation_login_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.Login(childComplexity, args["input"].(model.LoginInput)), true

	case "Mutation.markAttendance":
		if e.complexity.Mutation.MarkAttendance == nil {
			break
		}

		args, err := ec.field_Mutation_markAttendance_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.MarkAttendance(childComplexity, args["participationID"].(string), args["attended"].(bool)), true

	case "Mutation.refreshMyQRSecret":
		if e.complexity.Mutation.RefreshMyQRSecret == nil {
			break
		}

		return e.complexity.Mutation.RefreshMyQRSecret(childComplexity), true

	case "Mutation.refreshToken":
		if e.complexity.Mutation.RefreshToken == nil {
			break
		}

		return e.complexity.Mutation.RefreshToken(childComplexity), true

	case "Mutation.refreshUserQRSecret":
		if e.complexity.Mutation.RefreshUserQRSecret == nil {
			break
		}

		args, err := ec.field_Mutation_refreshUserQRSecret_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RefreshUserQRSecret(childComplexity, args["userID"].(string)), true

	case "Mutation.register":
		if e.complexity.Mutation.Register == nil {
			break
		}

		args, err := ec.field_Mutation_register_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.Register(childComplexity, args["input"].(model.RegisterInput)), true

	case "Mutation.rejectParticipation":
		if e.complexity.Mutation.RejectParticipation == nil {
			break
		}

		args, err := ec.field_Mutation_rejectParticipation_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RejectParticipation(childComplexity, args["participationID"].(string)), true

	case "Mutation.removeActivityAssignment":
		if e.complexity.Mutation.RemoveActivityAssignment == nil {
			break
		}

		args, err := ec.field_Mutation_removeActivityAssignment_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RemoveActivityAssignment(childComplexity, args["id"].(string)), true

	case "Mutation.removeAdminRole":
		if e.complexity.Mutation.RemoveAdminRole == nil {
			break
		}

		args, err := ec.field_Mutation_removeAdminRole_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RemoveAdminRole(childComplexity, args["userID"].(string)), true

	case "Mutation.scanQRCode":
		if e.complexity.Mutation.ScanQRCode == nil {
			break
		}

		args, err := ec.field_Mutation_scanQRCode_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ScanQRCode(childComplexity, args["input"].(model.QRScanInput)), true

	case "Mutation.updateActivity":
		if e.complexity.Mutation.UpdateActivity == nil {
			break
		}

		args, err := ec.field_Mutation_updateActivity_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateActivity(childComplexity, args["id"].(string), args["input"].(model.UpdateActivityInput)), true

	case "Mutation.updateActivityAssignment":
		if e.complexity.Mutation.UpdateActivityAssignment == nil {
			break
		}

		args, err := ec.field_Mutation_updateActivityAssignment_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateActivityAssignment(childComplexity, args["id"].(string), args["input"].(model.UpdateActivityAssignmentInput)), true

	case "Mutation.updateActivityTemplate":
		if e.complexity.Mutation.UpdateActivityTemplate == nil {
			break
		}

		args, err := ec.field_Mutation_updateActivityTemplate_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateActivityTemplate(childComplexity, args["id"].(string), args["input"].(model.UpdateActivityTemplateInput)), true

	case "Mutation.updateDepartment":
		if e.complexity.Mutation.UpdateDepartment == nil {
			break
		}

		args, err := ec.field_Mutation_updateDepartment_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDepartment(childComplexity, args["id"].(string), args["input"].(model.UpdateDepartmentInput)), true

	case "Mutation.updateFaculty":
		if e.complexity.Mutation.UpdateFaculty == nil {
			break
		}

		args, err := ec.field_Mutation_updateFaculty_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateFaculty(childComplexity, args["id"].(string), args["input"].(model.CreateFacultyInput)), true

	case "Mutation.updateSubscription":
		if e.complexity.Mutation.UpdateSubscription == nil {
			break
		}

		args, err := ec.field_Mutation_updateSubscription_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateSubscription(childComplexity, args["id"].(string), args["input"].(model.UpdateSubscriptionInput)), true

	case "NotificationLog.createdAt":
		if e.complexity.NotificationLog.CreatedAt == nil {
			break
		}

		return e.complexity.NotificationLog.CreatedAt(childComplexity), true

	case "NotificationLog.email":
		if e.complexity.NotificationLog.Email == nil {
			break
		}

		return e.complexity.NotificationLog.Email(childComplexity), true

	case "NotificationLog.errorMessage":
		if e.complexity.NotificationLog.ErrorMessage == nil {
			break
		}

		return e.complexity.NotificationLog.ErrorMessage(childComplexity), true

	case "NotificationLog.id":
		if e.complexity.NotificationLog.ID == nil {
			break
		}

		return e.complexity.NotificationLog.ID(childComplexity), true

	case "NotificationLog.message":
		if e.complexity.NotificationLog.Message == nil {
			break
		}

		return e.complexity.NotificationLog.Message(childComplexity), true

	case "NotificationLog.sentAt":
		if e.complexity.NotificationLog.SentAt == nil {
			break
		}

		return e.complexity.NotificationLog.SentAt(childComplexity), true

	case "NotificationLog.status":
		if e.complexity.NotificationLog.Status == nil {
			break
		}

		return e.complexity.NotificationLog.Status(childComplexity), true

	case "NotificationLog.subject":
		if e.complexity.NotificationLog.Subject == nil {
			break
		}

		return e.complexity.NotificationLog.Subject(childComplexity), true

	case "NotificationLog.subscription":
		if e.complexity.NotificationLog.Subscription == nil {
			break
		}

		return e.complexity.NotificationLog.Subscription(childComplexity), true

	case "NotificationLog.type":
		if e.complexity.NotificationLog.Type == nil {
			break
		}

		return e.complexity.NotificationLog.Type(childComplexity), true

	case "NotificationLog.updatedAt":
		if e.complexity.NotificationLog.UpdatedAt == nil {
			break
		}

		return e.complexity.NotificationLog.UpdatedAt(childComplexity), true

	case "Participation.activity":
		if e.complexity.Participation.Activity == nil {
			break
		}

		return e.complexity.Participation.Activity(childComplexity), true

	case "Participation.approvedAt":
		if e.complexity.Participation.ApprovedAt == nil {
			break
		}

		return e.complexity.Participation.ApprovedAt(childComplexity), true

	case "Participation.attendedAt":
		if e.complexity.Participation.AttendedAt == nil {
			break
		}

		return e.complexity.Participation.AttendedAt(childComplexity), true

	case "Participation.createdAt":
		if e.complexity.Participation.CreatedAt == nil {
			break
		}

		return e.complexity.Participation.CreatedAt(childComplexity), true

	case "Participation.id":
		if e.complexity.Participation.ID == nil {
			break
		}

		return e.complexity.Participation.ID(childComplexity), true

	case "Participation.notes":
		if e.complexity.Participation.Notes == nil {
			break
		}

		return e.complexity.Participation.Notes(childComplexity), true

	case "Participation.qrScannedAt":
		if e.complexity.Participation.QRScannedAt == nil {
			break
		}

		return e.complexity.Participation.QRScannedAt(childComplexity), true

	case "Participation.registeredAt":
		if e.complexity.Participation.RegisteredAt == nil {
			break
		}

		return e.complexity.Participation.RegisteredAt(childComplexity), true

	case "Participation.scanLocation":
		if e.complexity.Participation.ScanLocation == nil {
			break
		}

		return e.complexity.Participation.ScanLocation(childComplexity), true

	case "Participation.scannedBy":
		if e.complexity.Participation.ScannedBy == nil {
			break
		}

		return e.complexity.Participation.ScannedBy(childComplexity), true

	case "Participation.status":
		if e.complexity.Participation.Status == nil {
			break
		}

		return e.complexity.Participation.Status(childComplexity), true

	case "Participation.updatedAt":
		if e.complexity.Participation.UpdatedAt == nil {
			break
		}

		return e.complexity.Participation.UpdatedAt(childComplexity), true

	case "Participation.user":
		if e.complexity.Participation.User == nil {
			break
		}

		return e.complexity.Participation.User(childComplexity), true

	case "QRData.qrString":
		if e.complexity.QRData.QRString == nil {
			break
		}

		return e.complexity.QRData.QRString(childComplexity), true

	case "QRData.signature":
		if e.complexity.QRData.Signature == nil {
			break
		}

		return e.complexity.QRData.Signature(childComplexity), true

	case "QRData.studentID":
		if e.complexity.QRData.StudentID == nil {
			break
		}

		return e.complexity.QRData.StudentID(childComplexity), true

	case "QRData.timestamp":
		if e.complexity.QRData.Timestamp == nil {
			break
		}

		return e.complexity.QRData.Timestamp(childComplexity), true

	case "QRData.version":
		if e.complexity.QRData.Version == nil {
			break
		}

		return e.complexity.QRData.Version(childComplexity), true

	case "QRScanLog.activity":
		if e.complexity.QRScanLog.Activity == nil {
			break
		}

		return e.complexity.QRScanLog.Activity(childComplexity), true

	case "QRScanLog.createdAt":
		if e.complexity.QRScanLog.CreatedAt == nil {
			break
		}

		return e.complexity.QRScanLog.CreatedAt(childComplexity), true

	case "QRScanLog.errorMessage":
		if e.complexity.QRScanLog.ErrorMessage == nil {
			break
		}

		return e.complexity.QRScanLog.ErrorMessage(childComplexity), true

	case "QRScanLog.id":
		if e.complexity.QRScanLog.ID == nil {
			break
		}

		return e.complexity.QRScanLog.ID(childComplexity), true

	case "QRScanLog.ipAddress":
		if e.complexity.QRScanLog.IPAddress == nil {
			break
		}

		return e.complexity.QRScanLog.IPAddress(childComplexity), true

	case "QRScanLog.qrTimestamp":
		if e.complexity.QRScanLog.QRTimestamp == nil {
			break
		}

		return e.complexity.QRScanLog.QRTimestamp(childComplexity), true

	case "QRScanLog.scanLocation":
		if e.complexity.QRScanLog.ScanLocation == nil {
			break
		}

		return e.complexity.QRScanLog.ScanLocation(childComplexity), true

	case "QRScanLog.scanTimestamp":
		if e.complexity.QRScanLog.ScanTimestamp == nil {
			break
		}

		return e.complexity.QRScanLog.ScanTimestamp(childComplexity), true

	case "QRScanLog.scannedBy":
		if e.complexity.QRScanLog.ScannedBy == nil {
			break
		}

		return e.complexity.QRScanLog.ScannedBy(childComplexity), true

	case "QRScanLog.studentID":
		if e.complexity.QRScanLog.StudentID == nil {
			break
		}

		return e.complexity.QRScanLog.StudentID(childComplexity), true

	case "QRScanLog.user":
		if e.complexity.QRScanLog.User == nil {
			break
		}

		return e.complexity.QRScanLog.User(childComplexity), true

	case "QRScanLog.valid":
		if e.complexity.QRScanLog.Valid == nil {
			break
		}

		return e.complexity.QRScanLog.Valid(childComplexity), true

	case "QRScanResult.message":
		if e.complexity.QRScanResult.Message == nil {
			break
		}

		return e.complexity.QRScanResult.Message(childComplexity), true

	case "QRScanResult.participation":
		if e.complexity.QRScanResult.Participation == nil {
			break
		}

		return e.complexity.QRScanResult.Participation(childComplexity), true

	case "QRScanResult.scanLog":
		if e.complexity.QRScanResult.ScanLog == nil {
			break
		}

		return e.complexity.QRScanResult.ScanLog(childComplexity), true

	case "QRScanResult.success":
		if e.complexity.QRScanResult.Success == nil {
			break
		}

		return e.complexity.QRScanResult.Success(childComplexity), true

	case "QRScanResult.user":
		if e.complexity.QRScanResult.User == nil {
			break
		}

		return e.complexity.QRScanResult.User(childComplexity), true

	case "Query.activities":
		if e.complexity.Query.Activities == nil {
			break
		}

		args, err := ec.field_Query_activities_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Activities(childComplexity, args["limit"].(*int), args["offset"].(*int), args["facultyID"].(*string), args["status"].(*models.ActivityStatus)), true

	case "Query.activity":
		if e.complexity.Query.Activity == nil {
			break
		}

		args, err := ec.field_Query_activity_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Activity(childComplexity, args["id"].(string)), true

	case "Query.activityAssignments":
		if e.complexity.Query.ActivityAssignments == nil {
			break
		}

		args, err := ec.field_Query_activityAssignments_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ActivityAssignments(childComplexity, args["activityID"].(*string), args["adminID"].(*string)), true

	case "Query.activityTemplate":
		if e.complexity.Query.ActivityTemplate == nil {
			break
		}

		args, err := ec.field_Query_activityTemplate_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ActivityTemplate(childComplexity, args["id"].(string)), true

	case "Query.activityTemplates":
		if e.complexity.Query.ActivityTemplates == nil {
			break
		}

		args, err := ec.field_Query_activityTemplates_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ActivityTemplates(childComplexity, args["facultyID"].(*string)), true

	case "Query.department":
		if e.complexity.Query.Department == nil {
			break
		}

		args, err := ec.field_Query_department_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Department(childComplexity, args["id"].(string)), true

	case "Query.departments":
		if e.complexity.Query.Departments == nil {
			break
		}

		args, err := ec.field_Query_departments_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Departments(childComplexity, args["facultyID"].(*string)), true

	case "Query.faculties":
		if e.complexity.Query.Faculties == nil {
			break
		}

		return e.complexity.Query.Faculties(childComplexity), true

	case "Query.faculty":
		if e.complexity.Query.Faculty == nil {
			break
		}

		args, err := ec.field_Query_faculty_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Faculty(childComplexity, args["id"].(string)), true

	case "Query.facultyMetrics":
		if e.complexity.Query.FacultyMetrics == nil {
			break
		}

		args, err := ec.field_Query_facultyMetrics_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FacultyMetrics(childComplexity, args["facultyID"].(*string), args["fromDate"].(*time.Time), args["toDate"].(*time.Time)), true

	case "Query.facultySubscription":
		if e.complexity.Query.FacultySubscription == nil {
			break
		}

		args, err := ec.field_Query_facultySubscription_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FacultySubscription(childComplexity, args["facultyID"].(string)), true

	case "Query.me":
		if e.complexity.Query.Me == nil {
			break
		}

		return e.complexity.Query.Me(childComplexity), true

	case "Query.myActivities":
		if e.complexity.Query.MyActivities == nil {
			break
		}

		return e.complexity.Query.MyActivities(childComplexity), true

	case "Query.myActivityAssignments":
		if e.complexity.Query.MyActivityAssignments == nil {
			break
		}

		return e.complexity.Query.MyActivityAssignments(childComplexity), true

	case "Query.myParticipations":
		if e.complexity.Query.MyParticipations == nil {
			break
		}

		return e.complexity.Query.MyParticipations(childComplexity), true

	case "Query.myQRData":
		if e.complexity.Query.MyQRData == nil {
			break
		}

		return e.complexity.Query.MyQRData(childComplexity), true

	case "Query.notificationLogs":
		if e.complexity.Query.NotificationLogs == nil {
			break
		}

		args, err := ec.field_Query_notificationLogs_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.NotificationLogs(childComplexity, args["subscriptionID"].(*string), args["limit"].(*int), args["offset"].(*int)), true

	case "Query.participations":
		if e.complexity.Query.Participations == nil {
			break
		}

		args, err := ec.field_Query_participations_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Participations(childComplexity, args["activityID"].(*string), args["userID"].(*string)), true

	case "Query.qrScanLogs":
		if e.complexity.Query.QRScanLogs == nil {
			break
		}

		args, err := ec.field_Query_qrScanLogs_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.QRScanLogs(childComplexity, args["activityID"].(*string), args["userID"].(*string), args["limit"].(*int)), true

	case "Query.subscription":
		if e.complexity.Query.Subscription == nil {
			break
		}

		args, err := ec.field_Query_subscription_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Subscription(childComplexity, args["id"].(string)), true

	case "Query.subscriptions":
		if e.complexity.Query.Subscriptions == nil {
			break
		}

		return e.complexity.Query.Subscriptions(childComplexity), true

	case "Query.systemMetrics":
		if e.complexity.Query.SystemMetrics == nil {
			break
		}

		args, err := ec.field_Query_systemMetrics_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SystemMetrics(childComplexity, args["fromDate"].(*time.Time), args["toDate"].(*time.Time)), true

	case "Query.user":
		if e.complexity.Query.User == nil {
			break
		}

		args, err := ec.field_Query_user_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.User(childComplexity, args["id"].(string)), true

	case "Query.users":
		if e.complexity.Query.Users == nil {
			break
		}

		args, err := ec.field_Query_users_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Users(childComplexity, args["limit"].(*int), args["offset"].(*int)), true

	case "Subscription.activityAssignments":
		if e.complexity.Subscription.ActivityAssignments == nil {
			break
		}

		return e.complexity.Subscription.ActivityAssignments(childComplexity), true

	case "Subscription.activityUpdates":
		if e.complexity.Subscription.ActivityUpdates == nil {
			break
		}

		args, err := ec.field_Subscription_activityUpdates_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.ActivityUpdates(childComplexity, args["activityID"].(string)), true

	case "Subscription.facultyUpdates":
		if e.complexity.Subscription.FacultyUpdates == nil {
			break
		}

		args, err := ec.field_Subscription_facultyUpdates_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.FacultyUpdates(childComplexity, args["facultyID"].(string)), true

	case "Subscription.heartbeat":
		if e.complexity.Subscription.Heartbeat == nil {
			break
		}

		return e.complexity.Subscription.Heartbeat(childComplexity), true

	case "Subscription.newActivities":
		if e.complexity.Subscription.NewActivities == nil {
			break
		}

		args, err := ec.field_Subscription_newActivities_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.NewActivities(childComplexity, args["facultyID"].(*string)), true

	case "Subscription.participationEvents":
		if e.complexity.Subscription.ParticipationEvents == nil {
			break
		}

		args, err := ec.field_Subscription_participationEvents_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.ParticipationEvents(childComplexity, args["activityID"].(*string), args["userID"].(*string)), true

	case "Subscription.personalNotifications":
		if e.complexity.Subscription.PersonalNotifications == nil {
			break
		}

		args, err := ec.field_Subscription_personalNotifications_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.PersonalNotifications(childComplexity, args["filter"].(*model.SubscriptionFilter)), true

	case "Subscription.qrScanEvents":
		if e.complexity.Subscription.QRScanEvents == nil {
			break
		}

		args, err := ec.field_Subscription_qrScanEvents_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.QRScanEvents(childComplexity, args["activityID"].(*string)), true

	case "Subscription.subscriptionWarnings":
		if e.complexity.Subscription.SubscriptionWarnings == nil {
			break
		}

		args, err := ec.field_Subscription_subscriptionWarnings_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.SubscriptionWarnings(childComplexity, args["facultyID"].(*string)), true

	case "Subscription.systemAlerts":
		if e.complexity.Subscription.SystemAlerts == nil {
			break
		}

		args, err := ec.field_Subscription_systemAlerts_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.SystemAlerts(childComplexity, args["filter"].(*model.SubscriptionFilter)), true

	case "SubscriptionMetadata.activityID":
		if e.complexity.SubscriptionMetadata.ActivityID == nil {
			break
		}

		return e.complexity.SubscriptionMetadata.ActivityID(childComplexity), true

	case "SubscriptionMetadata.connectionID":
		if e.complexity.SubscriptionMetadata.ConnectionID == nil {
			break
		}

		return e.complexity.SubscriptionMetadata.ConnectionID(childComplexity), true

	case "SubscriptionMetadata.facultyID":
		if e.complexity.SubscriptionMetadata.FacultyID == nil {
			break
		}

		return e.complexity.SubscriptionMetadata.FacultyID(childComplexity), true

	case "SubscriptionMetadata.source":
		if e.complexity.SubscriptionMetadata.Source == nil {
			break
		}

		return e.complexity.SubscriptionMetadata.Source(childComplexity), true

	case "SubscriptionMetadata.userID":
		if e.complexity.SubscriptionMetadata.UserID == nil {
			break
		}

		return e.complexity.SubscriptionMetadata.UserID(childComplexity), true

	case "SubscriptionPayload.data":
		if e.complexity.SubscriptionPayload.Data == nil {
			break
		}

		return e.complexity.SubscriptionPayload.Data(childComplexity), true

	case "SubscriptionPayload.metadata":
		if e.complexity.SubscriptionPayload.Metadata == nil {
			break
		}

		return e.complexity.SubscriptionPayload.Metadata(childComplexity), true

	case "SubscriptionPayload.timestamp":
		if e.complexity.SubscriptionPayload.Timestamp == nil {
			break
		}

		return e.complexity.SubscriptionPayload.Timestamp(childComplexity), true

	case "SubscriptionPayload.type":
		if e.complexity.SubscriptionPayload.Type == nil {
			break
		}

		return e.complexity.SubscriptionPayload.Type(childComplexity), true

	case "SystemAlert.data":
		if e.complexity.SystemAlert.Data == nil {
			break
		}

		return e.complexity.SystemAlert.Data(childComplexity), true

	case "SystemAlert.facultyID":
		if e.complexity.SystemAlert.FacultyID == nil {
			break
		}

		return e.complexity.SystemAlert.FacultyID(childComplexity), true

	case "SystemAlert.id":
		if e.complexity.SystemAlert.ID == nil {
			break
		}

		return e.complexity.SystemAlert.ID(childComplexity), true

	case "SystemAlert.level":
		if e.complexity.SystemAlert.Level == nil {
			break
		}

		return e.complexity.SystemAlert.Level(childComplexity), true

	case "SystemAlert.message":
		if e.complexity.SystemAlert.Message == nil {
			break
		}

		return e.complexity.SystemAlert.Message(childComplexity), true

	case "SystemAlert.timestamp":
		if e.complexity.SystemAlert.Timestamp == nil {
			break
		}

		return e.complexity.SystemAlert.Timestamp(childComplexity), true

	case "SystemAlert.title":
		if e.complexity.SystemAlert.Title == nil {
			break
		}

		return e.complexity.SystemAlert.Title(childComplexity), true

	case "SystemAlert.type":
		if e.complexity.SystemAlert.Type == nil {
			break
		}

		return e.complexity.SystemAlert.Type(childComplexity), true

	case "SystemAlert.userID":
		if e.complexity.SystemAlert.UserID == nil {
			break
		}

		return e.complexity.SystemAlert.UserID(childComplexity), true

	case "SystemMetrics.activeSubscriptions":
		if e.complexity.SystemMetrics.ActiveSubscriptions == nil {
			break
		}

		return e.complexity.SystemMetrics.ActiveSubscriptions(childComplexity), true

	case "SystemMetrics.createdAt":
		if e.complexity.SystemMetrics.CreatedAt == nil {
			break
		}

		return e.complexity.SystemMetrics.CreatedAt(childComplexity), true

	case "SystemMetrics.date":
		if e.complexity.SystemMetrics.Date == nil {
			break
		}

		return e.complexity.SystemMetrics.Date(childComplexity), true

	case "SystemMetrics.expiredSubscriptions":
		if e.complexity.SystemMetrics.ExpiredSubscriptions == nil {
			break
		}

		return e.complexity.SystemMetrics.ExpiredSubscriptions(childComplexity), true

	case "SystemMetrics.id":
		if e.complexity.SystemMetrics.ID == nil {
			break
		}

		return e.complexity.SystemMetrics.ID(childComplexity), true

	case "SystemMetrics.totalActivities":
		if e.complexity.SystemMetrics.TotalActivities == nil {
			break
		}

		return e.complexity.SystemMetrics.TotalActivities(childComplexity), true

	case "SystemMetrics.totalDepartments":
		if e.complexity.SystemMetrics.TotalDepartments == nil {
			break
		}

		return e.complexity.SystemMetrics.TotalDepartments(childComplexity), true

	case "SystemMetrics.totalFaculties":
		if e.complexity.SystemMetrics.TotalFaculties == nil {
			break
		}

		return e.complexity.SystemMetrics.TotalFaculties(childComplexity), true

	case "SystemMetrics.totalParticipations":
		if e.complexity.SystemMetrics.TotalParticipations == nil {
			break
		}

		return e.complexity.SystemMetrics.TotalParticipations(childComplexity), true

	case "SystemMetrics.totalStudents":
		if e.complexity.SystemMetrics.TotalStudents == nil {
			break
		}

		return e.complexity.SystemMetrics.TotalStudents(childComplexity), true

	case "SystemMetrics.updatedAt":
		if e.complexity.SystemMetrics.UpdatedAt == nil {
			break
		}

		return e.complexity.SystemMetrics.UpdatedAt(childComplexity), true

	case "User.createdAt":
		if e.complexity.User.CreatedAt == nil {
			break
		}

		return e.complexity.User.CreatedAt(childComplexity), true

	case "User.department":
		if e.complexity.User.Department == nil {
			break
		}

		return e.complexity.User.Department(childComplexity), true

	case "User.email":
		if e.complexity.User.Email == nil {
			break
		}

		return e.complexity.User.Email(childComplexity), true

	case "User.faculty":
		if e.complexity.User.Faculty == nil {
			break
		}

		return e.complexity.User.Faculty(childComplexity), true

	case "User.firstName":
		if e.complexity.User.FirstName == nil {
			break
		}

		return e.complexity.User.FirstName(childComplexity), true

	case "User.id":
		if e.complexity.User.ID == nil {
			break
		}

		return e.complexity.User.ID(childComplexity), true

	case "User.isActive":
		if e.complexity.User.IsActive == nil {
			break
		}

		return e.complexity.User.IsActive(childComplexity), true

	case "User.lastLoginAt":
		if e.complexity.User.LastLoginAt == nil {
			break
		}

		return e.complexity.User.LastLoginAt(childComplexity), true

	case "User.lastName":
		if e.complexity.User.LastName == nil {
			break
		}

		return e.complexity.User.LastName(childComplexity), true

	case "User.participations":
		if e.complexity.User.Participations == nil {
			break
		}

		return e.complexity.User.Participations(childComplexity), true

	case "User.qrSecret":
		if e.complexity.User.QRSecret == nil {
			break
		}

		return e.complexity.User.QRSecret(childComplexity), true

	case "User.role":
		if e.complexity.User.Role == nil {
			break
		}

		return e.complexity.User.Role(childComplexity), true

	case "User.studentID":
		if e.complexity.User.StudentID == nil {
			break
		}

		return e.complexity.User.StudentID(childComplexity), true

	case "User.subscriptions":
		if e.complexity.User.Subscriptions == nil {
			break
		}

		return e.complexity.User.Subscriptions(childComplexity), true

	case "User.updatedAt":
		if e.complexity.User.UpdatedAt == nil {
			break
		}

		return e.complexity.User.UpdatedAt(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	opCtx := graphql.GetOperationContext(ctx)
	ec := executionContext{opCtx, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputCreateActivityAssignmentInput,
		ec.unmarshalInputCreateActivityInput,
		ec.unmarshalInputCreateActivityTemplateInput,
		ec.unmarshalInputCreateDepartmentInput,
		ec.unmarshalInputCreateFacultyInput,
		ec.unmarshalInputCreateSubscriptionInput,
		ec.unmarshalInputLoginInput,
		ec.unmarshalInputQRScanInput,
		ec.unmarshalInputRegisterInput,
		ec.unmarshalInputSubscriptionFilter,
		ec.unmarshalInputUpdateActivityAssignmentInput,
		ec.unmarshalInputUpdateActivityInput,
		ec.unmarshalInputUpdateActivityTemplateInput,
		ec.unmarshalInputUpdateDepartmentInput,
		ec.unmarshalInputUpdateSubscriptionInput,
	)
	first := true

	switch opCtx.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, opCtx.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, opCtx.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Subscription:
		next := ec._Subscription(ctx, opCtx.Operation.SelectionSet)

		var buf bytes.Buffer
		return func(ctx context.Context) *graphql.Response {
			buf.Reset()
			data := next(ctx)

			if data == nil {
				return nil
			}
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../schema.graphqls", Input: `# GraphQL schema definition file

directive @auth on FIELD_DEFINITION
directive @hasRole(roles: [UserRole!]!) on FIELD_DEFINITION
directive @hasPermission(permission: String!) on FIELD_DEFINITION

scalar Time

type User {
  id: ID!
  studentID: String!
  email: String!
  firstName: String!
  lastName: String!
  role: UserRole!
  qrSecret: String!
  faculty: Faculty
  department: Department
  isActive: Boolean!
  lastLoginAt: Time
  createdAt: Time!
  updatedAt: Time!
  participations: [Participation!]!
  subscriptions: [FacultySubscription!]!
}

enum UserRole {
  STUDENT
  SUPER_ADMIN
  FACULTY_ADMIN
  REGULAR_ADMIN
}

type Faculty {
  id: ID!
  name: String!
  code: String!
  description: String
  isActive: Boolean!
  createdAt: Time!
  updatedAt: Time!
  departments: [Department!]!
  users: [User!]!
  activities: [Activity!]!
}

type Department {
  id: ID!
  name: String!
  code: String!
  faculty: Faculty!
  isActive: Boolean!
  createdAt: Time!
  updatedAt: Time!
  users: [User!]!
  activities: [Activity!]!
}

type Activity {
  id: ID!
  title: String!
  description: String
  type: ActivityType!
  status: ActivityStatus!
  startDate: Time!
  endDate: Time!
  location: String
  maxParticipants: Int
  requireApproval: Boolean!
  points: Int!
  faculty: Faculty
  department: Department
  createdBy: User!
  template: ActivityTemplate
  isRecurring: Boolean!
  recurrenceRule: String
  parentActivity: Activity
  qrCodeRequired: Boolean!
  autoApprove: Boolean!
  createdAt: Time!
  updatedAt: Time!
  participations: [Participation!]!
  assignments: [ActivityAssignment!]!
  childActivities: [Activity!]!
}

enum ActivityType {
  WORKSHOP
  SEMINAR
  COMPETITION
  VOLUNTEER
  OTHER
}

enum ActivityStatus {
  DRAFT
  ACTIVE
  COMPLETED
  CANCELLED
}

type Participation {
  id: ID!
  user: User!
  activity: Activity!
  status: ParticipationStatus!
  registeredAt: Time!
  approvedAt: Time
  attendedAt: Time
  qrScannedAt: Time
  scannedBy: User
  scanLocation: String
  notes: String
  createdAt: Time!
  updatedAt: Time!
}

enum ParticipationStatus {
  PENDING
  APPROVED
  REJECTED
  ATTENDED
  ABSENT
}

type FacultySubscription {
  id: ID!
  faculty: Faculty!
  type: SubscriptionType!
  status: SubscriptionStatus!
  startDate: Time!
  endDate: Time!
  daysUntilExpiry: Int!
  needsNotification: Boolean!
  createdAt: Time!
  updatedAt: Time!
}

enum SubscriptionType {
  BASIC
  PREMIUM
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
}

type AuthPayload {
  token: String!
  user: User!
}

input LoginInput {
  email: String!
  password: String!
}

input RegisterInput {
  studentID: String!
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  facultyID: ID
  departmentID: ID
}

input CreateActivityInput {
  title: String!
  description: String
  type: ActivityType!
  startDate: Time!
  endDate: Time!
  location: String
  maxParticipants: Int
  requireApproval: Boolean!
  points: Int!
  facultyID: ID
  departmentID: ID
  templateID: ID
  isRecurring: Boolean
  recurrenceRule: String
  qrCodeRequired: Boolean
  autoApprove: Boolean
}

input UpdateActivityInput {
  title: String
  description: String
  type: ActivityType
  status: ActivityStatus
  startDate: Time
  endDate: Time
  location: String
  maxParticipants: Int
  requireApproval: Boolean
  points: Int
  facultyID: ID
  departmentID: ID
  qrCodeRequired: Boolean
  autoApprove: Boolean
}

type ActivityTemplate {
  id: ID!
  name: String!
  description: String
  type: ActivityType!
  defaultDuration: Int!
  location: String
  maxParticipants: Int
  requireApproval: Boolean!
  points: Int!
  qrCodeRequired: Boolean!
  autoApprove: Boolean!
  faculty: Faculty
  createdBy: User!
  isActive: Boolean!
  createdAt: Time!
  updatedAt: Time!
  activities: [Activity!]!
}

input CreateActivityTemplateInput {
  name: String!
  description: String
  type: ActivityType!
  defaultDuration: Int!
  location: String
  maxParticipants: Int
  requireApproval: Boolean!
  points: Int!
  qrCodeRequired: Boolean
  autoApprove: Boolean
  facultyID: ID
}

input UpdateActivityTemplateInput {
  name: String
  description: String
  type: ActivityType
  defaultDuration: Int
  location: String
  maxParticipants: Int
  requireApproval: Boolean
  points: Int
  qrCodeRequired: Boolean
  autoApprove: Boolean
  isActive: Boolean
}

type ActivityAssignment {
  id: ID!
  activity: Activity!
  admin: User!
  assignedBy: User!
  canScanQR: Boolean!
  canApprove: Boolean!
  notes: String
  createdAt: Time!
  updatedAt: Time!
}

input CreateActivityAssignmentInput {
  activityID: ID!
  adminID: ID!
  canScanQR: Boolean
  canApprove: Boolean
  notes: String
}

input UpdateActivityAssignmentInput {
  canScanQR: Boolean
  canApprove: Boolean
  notes: String
}

type QRScanLog {
  id: ID!
  studentID: String!
  user: User
  activity: Activity!
  scannedBy: User!
  scanTimestamp: Time!
  qrTimestamp: Time!
  valid: Boolean!
  errorMessage: String
  scanLocation: String
  ipAddress: String
  createdAt: Time!
}

type QRData {
  studentID: String!
  timestamp: String!
  signature: String!
  version: Int!
  qrString: String!
}

type QRScanResult {
  success: Boolean!
  message: String!
  participation: Participation
  user: User
  scanLog: QRScanLog
}

input QRScanInput {
  qrData: String!
  activityID: ID!
  scanLocation: String
}

input CreateFacultyInput {
  name: String!
  code: String!
  description: String
}

input CreateDepartmentInput {
  name: String!
  code: String!
  facultyID: ID!
}

input UpdateDepartmentInput {
  name: String
  code: String
}

input CreateSubscriptionInput {
  facultyID: ID!
  type: SubscriptionType!
  startDate: Time!
  endDate: Time!
}

input UpdateSubscriptionInput {
  type: SubscriptionType
  startDate: Time
  endDate: Time
  status: SubscriptionStatus
}

type FacultyMetrics {
  id: ID!
  faculty: Faculty!
  totalStudents: Int!
  activeStudents: Int!
  totalActivities: Int!
  completedActivities: Int!
  totalParticipants: Int!
  averageAttendance: Float!
  date: Time!
  createdAt: Time!
  updatedAt: Time!
}

type SystemMetrics {
  id: ID!
  totalFaculties: Int!
  totalDepartments: Int!
  totalStudents: Int!
  totalActivities: Int!
  totalParticipations: Int!
  activeSubscriptions: Int!
  expiredSubscriptions: Int!
  date: Time!
  createdAt: Time!
  updatedAt: Time!
}

type NotificationLog {
  id: ID!
  subscription: FacultySubscription!
  type: String!
  status: String!
  email: String!
  subject: String!
  message: String!
  sentAt: Time
  errorMessage: String
  createdAt: Time!
  updatedAt: Time!
}

type Query {
  # User queries
  me: User @auth
  users(limit: Int, offset: Int): [User!]! @hasRole(roles: [SUPER_ADMIN, FACULTY_ADMIN, REGULAR_ADMIN])
  user(id: ID!): User @auth
  
  # Faculty queries
  faculties: [Faculty!]! @auth
  faculty(id: ID!): Faculty @auth
  
  # Department queries
  departments(facultyID: ID): [Department!]! @auth
  department(id: ID!): Department @auth
  
  # Activity queries
  activities(limit: Int, offset: Int, facultyID: ID, status: ActivityStatus): [Activity!]! @auth
  activity(id: ID!): Activity @auth
  myActivities: [Activity!]! @auth
  
  # Participation queries
  participations(activityID: ID, userID: ID): [Participation!]! @hasRole(roles: [SUPER_ADMIN, FACULTY_ADMIN, REGULAR_ADMIN])
  myParticipations: [Participation!]! @auth
  
  # Subscription queries
  subscriptions: [FacultySubscription!]! @hasRole(roles: [SUPER_ADMIN])
  subscription(id: ID!): FacultySubscription @hasRole(roles: [SUPER_ADMIN, FACULTY_ADMIN])
  facultySubscription(facultyID: ID!): FacultySubscription @hasRole(roles: [SUPER_ADMIN, FACULTY_ADMIN])
  
  # Analytics queries
  systemMetrics(fromDate: Time, toDate: Time): [SystemMetrics!]! @hasRole(roles: [SUPER_ADMIN])
  facultyMetrics(facultyID: ID, fromDate: Time, toDate: Time): [FacultyMetrics!]! @hasRole(roles: [SUPER_ADMIN, FACULTY_ADMIN])
  
  # Notification queries
  notificationLogs(subscriptionID: ID, limit: Int, offset: Int): [NotificationLog!]! @hasRole(roles: [SUPER_ADMIN, FACULTY_ADMIN])
  
  # Activity Template queries
  activityTemplates(facultyID: ID): [ActivityTemplate!]! @hasRole(roles: [SUPER_ADMIN, FACULTY_ADMIN])
  activityTemplate(id: ID!): ActivityTemplate @hasRole(roles: [SUPER_ADMIN, FACULTY_ADMIN])
  
  # Activity Assignment queries
  activityAssignments(activityID: ID, adminID: ID): [ActivityAssignment!]! @hasRole(roles: [SUPER_ADMIN, FACULTY_ADMIN])
  myActivityAssignments: [ActivityAssignment!]! @hasRole(roles: [REGULAR_ADMIN])
  
  # QR Code queries
  myQRData: QRData! @auth
  qrScanLogs(activityID: ID, userID: ID, limit: Int): [QRScanLog!]! @hasRole(roles: [SUPER_ADMIN, FACULTY_ADMIN, REGULAR_ADMIN])
}

# Subscription types
type SubscriptionPayload {
  type: String!
  timestamp: Time!
  data: SubscriptionData
  metadata: SubscriptionMetadata
}

union SubscriptionData = User | Activity | Faculty | Participation | FacultySubscription | SystemAlert | ActivityAssignment

type SubscriptionMetadata {
  source: String
  userID: ID
  facultyID: ID
  activityID: ID
  connectionID: String
}

input SubscriptionFilter {
  facultyID: ID
  activityID: ID
  userID: ID
  types: [String!]
}

type SystemAlert {
  id: ID!
  type: String!
  level: String!
  title: String!
  message: String!
  facultyID: ID
  userID: ID
  data: String
  timestamp: Time!
}

type Subscription {
  # Personal notifications for authenticated users
  personalNotifications(filter: SubscriptionFilter): SubscriptionPayload! @auth
  
  # Activity-specific updates
  activityUpdates(activityID: ID!): SubscriptionPayload! @auth
  
  # Faculty-wide updates for faculty members
  facultyUpdates(facultyID: ID!): SubscriptionPayload! @hasRole(roles: [SUPER_ADMIN, FACULTY_ADMIN, REGULAR_ADMIN])
  
  # System-wide alerts for admins
  systemAlerts(filter: SubscriptionFilter): SubscriptionPayload! @hasRole(roles: [SUPER_ADMIN, FACULTY_ADMIN, REGULAR_ADMIN])
  
  # QR scan events for admins
  qrScanEvents(activityID: ID): SubscriptionPayload! @hasRole(roles: [SUPER_ADMIN, FACULTY_ADMIN, REGULAR_ADMIN])
  
  # Participation events
  participationEvents(activityID: ID, userID: ID): SubscriptionPayload! @auth
  
  # Subscription warnings for faculty admins
  subscriptionWarnings(facultyID: ID): SubscriptionPayload! @hasRole(roles: [SUPER_ADMIN, FACULTY_ADMIN])
  
  # Activity assignments for regular admins
  activityAssignments: SubscriptionPayload! @hasRole(roles: [REGULAR_ADMIN])
  
  # New activity notifications
  newActivities(facultyID: ID): SubscriptionPayload! @auth
  
  # Connection heartbeat
  heartbeat: String! @auth
}

type Mutation {
  # Authentication
  login(input: LoginInput!): AuthPayload!
  register(input: RegisterInput!): AuthPayload!
  refreshToken: AuthPayload! @auth
  
  # Activity management
  createActivity(input: CreateActivityInput!): Activity! @hasRole(roles: [SUPER_ADMIN, FACULTY_ADMIN])
  updateActivity(id: ID!, input: UpdateActivityInput!): Activity! @auth
  deleteActivity(id: ID!): Boolean! @auth
  
  # Participation management
  joinActivity(activityID: ID!): Participation! @auth
  leaveActivity(activityID: ID!): Boolean! @auth
  approveParticipation(participationID: ID!): Participation! @hasRole(roles: [SUPER_ADMIN, FACULTY_ADMIN, REGULAR_ADMIN])
  rejectParticipation(participationID: ID!): Participation! @hasRole(roles: [SUPER_ADMIN, FACULTY_ADMIN, REGULAR_ADMIN])
  markAttendance(participationID: ID!, attended: Boolean!): Participation! @hasRole(roles: [SUPER_ADMIN, FACULTY_ADMIN, REGULAR_ADMIN])
  
  # Faculty management (Super Admin only)
  createFaculty(input: CreateFacultyInput!): Faculty! @hasRole(roles: [SUPER_ADMIN])
  updateFaculty(id: ID!, input: CreateFacultyInput!): Faculty! @hasRole(roles: [SUPER_ADMIN])
  deleteFaculty(id: ID!): Boolean! @hasRole(roles: [SUPER_ADMIN])
  
  # Department management (Super Admin and Faculty Admin)
  createDepartment(input: CreateDepartmentInput!): Department! @hasRole(roles: [SUPER_ADMIN, FACULTY_ADMIN])
  updateDepartment(id: ID!, input: UpdateDepartmentInput!): Department! @hasRole(roles: [SUPER_ADMIN, FACULTY_ADMIN])
  deleteDepartment(id: ID!): Boolean! @hasRole(roles: [SUPER_ADMIN, FACULTY_ADMIN])
  
  # Subscription management (Super Admin only)
  createSubscription(input: CreateSubscriptionInput!): FacultySubscription! @hasRole(roles: [SUPER_ADMIN])
  updateSubscription(id: ID!, input: UpdateSubscriptionInput!): FacultySubscription! @hasRole(roles: [SUPER_ADMIN])
  deleteSubscription(id: ID!): Boolean! @hasRole(roles: [SUPER_ADMIN])
  
  # User role management
  assignFacultyAdmin(userID: ID!, facultyID: ID!): User! @hasRole(roles: [SUPER_ADMIN])
  assignRegularAdmin(userID: ID!, facultyID: ID!, departmentID: ID): User! @hasRole(roles: [SUPER_ADMIN, FACULTY_ADMIN])
  removeAdminRole(userID: ID!): User! @hasRole(roles: [SUPER_ADMIN, FACULTY_ADMIN])
  
  # Activity Template management
  createActivityTemplate(input: CreateActivityTemplateInput!): ActivityTemplate! @hasRole(roles: [SUPER_ADMIN, FACULTY_ADMIN])
  updateActivityTemplate(id: ID!, input: UpdateActivityTemplateInput!): ActivityTemplate! @hasRole(roles: [SUPER_ADMIN, FACULTY_ADMIN])
  deleteActivityTemplate(id: ID!): Boolean! @hasRole(roles: [SUPER_ADMIN, FACULTY_ADMIN])
  
  # Activity Assignment management
  assignActivity(input: CreateActivityAssignmentInput!): ActivityAssignment! @hasRole(roles: [SUPER_ADMIN, FACULTY_ADMIN])
  updateActivityAssignment(id: ID!, input: UpdateActivityAssignmentInput!): ActivityAssignment! @hasRole(roles: [SUPER_ADMIN, FACULTY_ADMIN])
  removeActivityAssignment(id: ID!): Boolean! @hasRole(roles: [SUPER_ADMIN, FACULTY_ADMIN])
  
  # QR Code management
  scanQRCode(input: QRScanInput!): QRScanResult! @hasRole(roles: [SUPER_ADMIN, FACULTY_ADMIN, REGULAR_ADMIN])
  refreshMyQRSecret: QRData! @auth
  refreshUserQRSecret(userID: ID!): QRData! @hasRole(roles: [SUPER_ADMIN, FACULTY_ADMIN])
}

`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) dir_hasPermission_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "permission", ec.unmarshalNString2string)
	if err != nil {
		return nil, err
	}
	args["permission"] = arg0
	return args, nil
}

func (ec *executionContext) dir_hasRole_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "roles", ec.unmarshalNUserRole2ᚕgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUserRoleᚄ)
	if err != nil {
		return nil, err
	}
	args["roles"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_approveParticipation_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "participationID", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["participationID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_assignActivity_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNCreateActivityAssignmentInput2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐCreateActivityAssignmentInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_assignFacultyAdmin_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "userID", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["userID"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "facultyID", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["facultyID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_assignRegularAdmin_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "userID", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["userID"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "facultyID", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["facultyID"] = arg1
	arg2, err := graphql.ProcessArgField(ctx, rawArgs, "departmentID", ec.unmarshalOID2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["departmentID"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_createActivityTemplate_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNCreateActivityTemplateInput2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐCreateActivityTemplateInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createActivity_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNCreateActivityInput2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐCreateActivityInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createDepartment_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNCreateDepartmentInput2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐCreateDepartmentInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createFaculty_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNCreateFacultyInput2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐCreateFacultyInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createSubscription_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNCreateSubscriptionInput2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐCreateSubscriptionInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteActivityTemplate_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteActivity_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteDepartment_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteFaculty_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteSubscription_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_joinActivity_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "activityID", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["activityID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_leaveActivity_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "activityID", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["activityID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_login_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNLoginInput2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐLoginInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_markAttendance_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "participationID", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["participationID"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "attended", ec.unmarshalNBoolean2bool)
	if err != nil {
		return nil, err
	}
	args["attended"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_refreshUserQRSecret_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "userID", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["userID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_register_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNRegisterInput2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐRegisterInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_rejectParticipation_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "participationID", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["participationID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_removeActivityAssignment_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_removeAdminRole_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "userID", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["userID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_scanQRCode_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNQRScanInput2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐQRScanInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateActivityAssignment_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNUpdateActivityAssignmentInput2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐUpdateActivityAssignmentInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateActivityTemplate_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNUpdateActivityTemplateInput2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐUpdateActivityTemplateInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateActivity_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNUpdateActivityInput2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐUpdateActivityInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateDepartment_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNUpdateDepartmentInput2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐUpdateDepartmentInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateFaculty_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNCreateFacultyInput2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐCreateFacultyInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateSubscription_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNUpdateSubscriptionInput2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐUpdateSubscriptionInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "name", ec.unmarshalNString2string)
	if err != nil {
		return nil, err
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_activities_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "limit", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["limit"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "offset", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["offset"] = arg1
	arg2, err := graphql.ProcessArgField(ctx, rawArgs, "facultyID", ec.unmarshalOID2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["facultyID"] = arg2
	arg3, err := graphql.ProcessArgField(ctx, rawArgs, "status", ec.unmarshalOActivityStatus2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐActivityStatus)
	if err != nil {
		return nil, err
	}
	args["status"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_activityAssignments_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "activityID", ec.unmarshalOID2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["activityID"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "adminID", ec.unmarshalOID2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["adminID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_activityTemplate_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_activityTemplates_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "facultyID", ec.unmarshalOID2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["facultyID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_activity_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_department_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_departments_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "facultyID", ec.unmarshalOID2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["facultyID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_facultyMetrics_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "facultyID", ec.unmarshalOID2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["facultyID"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "fromDate", ec.unmarshalOTime2ᚖtimeᚐTime)
	if err != nil {
		return nil, err
	}
	args["fromDate"] = arg1
	arg2, err := graphql.ProcessArgField(ctx, rawArgs, "toDate", ec.unmarshalOTime2ᚖtimeᚐTime)
	if err != nil {
		return nil, err
	}
	args["toDate"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_facultySubscription_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "facultyID", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["facultyID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_faculty_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_notificationLogs_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "subscriptionID", ec.unmarshalOID2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["subscriptionID"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "limit", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["limit"] = arg1
	arg2, err := graphql.ProcessArgField(ctx, rawArgs, "offset", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["offset"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_participations_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "activityID", ec.unmarshalOID2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["activityID"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "userID", ec.unmarshalOID2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["userID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_qrScanLogs_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "activityID", ec.unmarshalOID2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["activityID"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "userID", ec.unmarshalOID2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["userID"] = arg1
	arg2, err := graphql.ProcessArgField(ctx, rawArgs, "limit", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["limit"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_subscription_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_systemMetrics_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "fromDate", ec.unmarshalOTime2ᚖtimeᚐTime)
	if err != nil {
		return nil, err
	}
	args["fromDate"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "toDate", ec.unmarshalOTime2ᚖtimeᚐTime)
	if err != nil {
		return nil, err
	}
	args["toDate"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_user_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_users_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "limit", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["limit"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "offset", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["offset"] = arg1
	return args, nil
}

func (ec *executionContext) field_Subscription_activityUpdates_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "activityID", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["activityID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Subscription_facultyUpdates_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "facultyID", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["facultyID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Subscription_newActivities_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "facultyID", ec.unmarshalOID2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["facultyID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Subscription_participationEvents_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "activityID", ec.unmarshalOID2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["activityID"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "userID", ec.unmarshalOID2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["userID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Subscription_personalNotifications_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "filter", ec.unmarshalOSubscriptionFilter2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐSubscriptionFilter)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Subscription_qrScanEvents_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "activityID", ec.unmarshalOID2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["activityID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Subscription_subscriptionWarnings_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "facultyID", ec.unmarshalOID2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["facultyID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Subscription_systemAlerts_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "filter", ec.unmarshalOSubscriptionFilter2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐSubscriptionFilter)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field___Directive_args_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "includeDeprecated", ec.unmarshalOBoolean2ᚖbool)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Field_args_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "includeDeprecated", ec.unmarshalOBoolean2ᚖbool)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "includeDeprecated", ec.unmarshalOBoolean2bool)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "includeDeprecated", ec.unmarshalOBoolean2bool)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Activity_id(ctx context.Context, field graphql.CollectedField, obj *models.Activity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Activity_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Activity().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Activity_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Activity",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Activity_title(ctx context.Context, field graphql.CollectedField, obj *models.Activity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Activity_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Activity_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Activity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Activity_description(ctx context.Context, field graphql.CollectedField, obj *models.Activity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Activity_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Activity_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Activity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Activity_type(ctx context.Context, field graphql.CollectedField, obj *models.Activity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Activity_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.ActivityType)
	fc.Result = res
	return ec.marshalNActivityType2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐActivityType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Activity_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Activity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ActivityType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Activity_status(ctx context.Context, field graphql.CollectedField, obj *models.Activity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Activity_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.ActivityStatus)
	fc.Result = res
	return ec.marshalNActivityStatus2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐActivityStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Activity_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Activity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ActivityStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Activity_startDate(ctx context.Context, field graphql.CollectedField, obj *models.Activity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Activity_startDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Activity_startDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Activity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Activity_endDate(ctx context.Context, field graphql.CollectedField, obj *models.Activity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Activity_endDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Activity_endDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Activity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Activity_location(ctx context.Context, field graphql.CollectedField, obj *models.Activity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Activity_location(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Location, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Activity_location(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Activity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Activity_maxParticipants(ctx context.Context, field graphql.CollectedField, obj *models.Activity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Activity_maxParticipants(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxParticipants, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Activity_maxParticipants(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Activity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Activity_requireApproval(ctx context.Context, field graphql.CollectedField, obj *models.Activity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Activity_requireApproval(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RequireApproval, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Activity_requireApproval(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Activity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Activity_points(ctx context.Context, field graphql.CollectedField, obj *models.Activity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Activity_points(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Points, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Activity_points(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Activity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Activity_faculty(ctx context.Context, field graphql.CollectedField, obj *models.Activity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Activity_faculty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Faculty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Faculty)
	fc.Result = res
	return ec.marshalOFaculty2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐFaculty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Activity_faculty(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Activity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Faculty_id(ctx, field)
			case "name":
				return ec.fieldContext_Faculty_name(ctx, field)
			case "code":
				return ec.fieldContext_Faculty_code(ctx, field)
			case "description":
				return ec.fieldContext_Faculty_description(ctx, field)
			case "isActive":
				return ec.fieldContext_Faculty_isActive(ctx, field)
			case "createdAt":
				return ec.fieldContext_Faculty_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Faculty_updatedAt(ctx, field)
			case "departments":
				return ec.fieldContext_Faculty_departments(ctx, field)
			case "users":
				return ec.fieldContext_Faculty_users(ctx, field)
			case "activities":
				return ec.fieldContext_Faculty_activities(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Faculty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Activity_department(ctx context.Context, field graphql.CollectedField, obj *models.Activity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Activity_department(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Department, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Department)
	fc.Result = res
	return ec.marshalODepartment2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐDepartment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Activity_department(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Activity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Department_id(ctx, field)
			case "name":
				return ec.fieldContext_Department_name(ctx, field)
			case "code":
				return ec.fieldContext_Department_code(ctx, field)
			case "faculty":
				return ec.fieldContext_Department_faculty(ctx, field)
			case "isActive":
				return ec.fieldContext_Department_isActive(ctx, field)
			case "createdAt":
				return ec.fieldContext_Department_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Department_updatedAt(ctx, field)
			case "users":
				return ec.fieldContext_Department_users(ctx, field)
			case "activities":
				return ec.fieldContext_Department_activities(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Department", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Activity_createdBy(ctx context.Context, field graphql.CollectedField, obj *models.Activity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Activity_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.User)
	fc.Result = res
	return ec.marshalNUser2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Activity_createdBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Activity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "studentID":
				return ec.fieldContext_User_studentID(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "role":
				return ec.fieldContext_User_role(ctx, field)
			case "qrSecret":
				return ec.fieldContext_User_qrSecret(ctx, field)
			case "faculty":
				return ec.fieldContext_User_faculty(ctx, field)
			case "department":
				return ec.fieldContext_User_department(ctx, field)
			case "isActive":
				return ec.fieldContext_User_isActive(ctx, field)
			case "lastLoginAt":
				return ec.fieldContext_User_lastLoginAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "participations":
				return ec.fieldContext_User_participations(ctx, field)
			case "subscriptions":
				return ec.fieldContext_User_subscriptions(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Activity_template(ctx context.Context, field graphql.CollectedField, obj *models.Activity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Activity_template(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Template, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.ActivityTemplate)
	fc.Result = res
	return ec.marshalOActivityTemplate2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐActivityTemplate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Activity_template(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Activity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ActivityTemplate_id(ctx, field)
			case "name":
				return ec.fieldContext_ActivityTemplate_name(ctx, field)
			case "description":
				return ec.fieldContext_ActivityTemplate_description(ctx, field)
			case "type":
				return ec.fieldContext_ActivityTemplate_type(ctx, field)
			case "defaultDuration":
				return ec.fieldContext_ActivityTemplate_defaultDuration(ctx, field)
			case "location":
				return ec.fieldContext_ActivityTemplate_location(ctx, field)
			case "maxParticipants":
				return ec.fieldContext_ActivityTemplate_maxParticipants(ctx, field)
			case "requireApproval":
				return ec.fieldContext_ActivityTemplate_requireApproval(ctx, field)
			case "points":
				return ec.fieldContext_ActivityTemplate_points(ctx, field)
			case "qrCodeRequired":
				return ec.fieldContext_ActivityTemplate_qrCodeRequired(ctx, field)
			case "autoApprove":
				return ec.fieldContext_ActivityTemplate_autoApprove(ctx, field)
			case "faculty":
				return ec.fieldContext_ActivityTemplate_faculty(ctx, field)
			case "createdBy":
				return ec.fieldContext_ActivityTemplate_createdBy(ctx, field)
			case "isActive":
				return ec.fieldContext_ActivityTemplate_isActive(ctx, field)
			case "createdAt":
				return ec.fieldContext_ActivityTemplate_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ActivityTemplate_updatedAt(ctx, field)
			case "activities":
				return ec.fieldContext_ActivityTemplate_activities(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActivityTemplate", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Activity_isRecurring(ctx context.Context, field graphql.CollectedField, obj *models.Activity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Activity_isRecurring(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRecurring, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Activity_isRecurring(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Activity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Activity_recurrenceRule(ctx context.Context, field graphql.CollectedField, obj *models.Activity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Activity_recurrenceRule(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecurrenceRule, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Activity_recurrenceRule(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Activity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Activity_parentActivity(ctx context.Context, field graphql.CollectedField, obj *models.Activity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Activity_parentActivity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParentActivity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Activity)
	fc.Result = res
	return ec.marshalOActivity2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐActivity(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Activity_parentActivity(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Activity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Activity_id(ctx, field)
			case "title":
				return ec.fieldContext_Activity_title(ctx, field)
			case "description":
				return ec.fieldContext_Activity_description(ctx, field)
			case "type":
				return ec.fieldContext_Activity_type(ctx, field)
			case "status":
				return ec.fieldContext_Activity_status(ctx, field)
			case "startDate":
				return ec.fieldContext_Activity_startDate(ctx, field)
			case "endDate":
				return ec.fieldContext_Activity_endDate(ctx, field)
			case "location":
				return ec.fieldContext_Activity_location(ctx, field)
			case "maxParticipants":
				return ec.fieldContext_Activity_maxParticipants(ctx, field)
			case "requireApproval":
				return ec.fieldContext_Activity_requireApproval(ctx, field)
			case "points":
				return ec.fieldContext_Activity_points(ctx, field)
			case "faculty":
				return ec.fieldContext_Activity_faculty(ctx, field)
			case "department":
				return ec.fieldContext_Activity_department(ctx, field)
			case "createdBy":
				return ec.fieldContext_Activity_createdBy(ctx, field)
			case "template":
				return ec.fieldContext_Activity_template(ctx, field)
			case "isRecurring":
				return ec.fieldContext_Activity_isRecurring(ctx, field)
			case "recurrenceRule":
				return ec.fieldContext_Activity_recurrenceRule(ctx, field)
			case "parentActivity":
				return ec.fieldContext_Activity_parentActivity(ctx, field)
			case "qrCodeRequired":
				return ec.fieldContext_Activity_qrCodeRequired(ctx, field)
			case "autoApprove":
				return ec.fieldContext_Activity_autoApprove(ctx, field)
			case "createdAt":
				return ec.fieldContext_Activity_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Activity_updatedAt(ctx, field)
			case "participations":
				return ec.fieldContext_Activity_participations(ctx, field)
			case "assignments":
				return ec.fieldContext_Activity_assignments(ctx, field)
			case "childActivities":
				return ec.fieldContext_Activity_childActivities(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Activity", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Activity_qrCodeRequired(ctx context.Context, field graphql.CollectedField, obj *models.Activity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Activity_qrCodeRequired(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QRCodeRequired, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Activity_qrCodeRequired(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Activity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Activity_autoApprove(ctx context.Context, field graphql.CollectedField, obj *models.Activity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Activity_autoApprove(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AutoApprove, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Activity_autoApprove(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Activity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Activity_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.Activity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Activity_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Activity_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Activity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Activity_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models.Activity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Activity_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Activity_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Activity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Activity_participations(ctx context.Context, field graphql.CollectedField, obj *models.Activity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Activity_participations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Participations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]models.Participation)
	fc.Result = res
	return ec.marshalNParticipation2ᚕgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐParticipationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Activity_participations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Activity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Participation_id(ctx, field)
			case "user":
				return ec.fieldContext_Participation_user(ctx, field)
			case "activity":
				return ec.fieldContext_Participation_activity(ctx, field)
			case "status":
				return ec.fieldContext_Participation_status(ctx, field)
			case "registeredAt":
				return ec.fieldContext_Participation_registeredAt(ctx, field)
			case "approvedAt":
				return ec.fieldContext_Participation_approvedAt(ctx, field)
			case "attendedAt":
				return ec.fieldContext_Participation_attendedAt(ctx, field)
			case "qrScannedAt":
				return ec.fieldContext_Participation_qrScannedAt(ctx, field)
			case "scannedBy":
				return ec.fieldContext_Participation_scannedBy(ctx, field)
			case "scanLocation":
				return ec.fieldContext_Participation_scanLocation(ctx, field)
			case "notes":
				return ec.fieldContext_Participation_notes(ctx, field)
			case "createdAt":
				return ec.fieldContext_Participation_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Participation_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Participation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Activity_assignments(ctx context.Context, field graphql.CollectedField, obj *models.Activity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Activity_assignments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Assignments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]models.ActivityAssignment)
	fc.Result = res
	return ec.marshalNActivityAssignment2ᚕgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐActivityAssignmentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Activity_assignments(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Activity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ActivityAssignment_id(ctx, field)
			case "activity":
				return ec.fieldContext_ActivityAssignment_activity(ctx, field)
			case "admin":
				return ec.fieldContext_ActivityAssignment_admin(ctx, field)
			case "assignedBy":
				return ec.fieldContext_ActivityAssignment_assignedBy(ctx, field)
			case "canScanQR":
				return ec.fieldContext_ActivityAssignment_canScanQR(ctx, field)
			case "canApprove":
				return ec.fieldContext_ActivityAssignment_canApprove(ctx, field)
			case "notes":
				return ec.fieldContext_ActivityAssignment_notes(ctx, field)
			case "createdAt":
				return ec.fieldContext_ActivityAssignment_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ActivityAssignment_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActivityAssignment", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Activity_childActivities(ctx context.Context, field graphql.CollectedField, obj *models.Activity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Activity_childActivities(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChildActivities, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]models.Activity)
	fc.Result = res
	return ec.marshalNActivity2ᚕgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐActivityᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Activity_childActivities(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Activity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Activity_id(ctx, field)
			case "title":
				return ec.fieldContext_Activity_title(ctx, field)
			case "description":
				return ec.fieldContext_Activity_description(ctx, field)
			case "type":
				return ec.fieldContext_Activity_type(ctx, field)
			case "status":
				return ec.fieldContext_Activity_status(ctx, field)
			case "startDate":
				return ec.fieldContext_Activity_startDate(ctx, field)
			case "endDate":
				return ec.fieldContext_Activity_endDate(ctx, field)
			case "location":
				return ec.fieldContext_Activity_location(ctx, field)
			case "maxParticipants":
				return ec.fieldContext_Activity_maxParticipants(ctx, field)
			case "requireApproval":
				return ec.fieldContext_Activity_requireApproval(ctx, field)
			case "points":
				return ec.fieldContext_Activity_points(ctx, field)
			case "faculty":
				return ec.fieldContext_Activity_faculty(ctx, field)
			case "department":
				return ec.fieldContext_Activity_department(ctx, field)
			case "createdBy":
				return ec.fieldContext_Activity_createdBy(ctx, field)
			case "template":
				return ec.fieldContext_Activity_template(ctx, field)
			case "isRecurring":
				return ec.fieldContext_Activity_isRecurring(ctx, field)
			case "recurrenceRule":
				return ec.fieldContext_Activity_recurrenceRule(ctx, field)
			case "parentActivity":
				return ec.fieldContext_Activity_parentActivity(ctx, field)
			case "qrCodeRequired":
				return ec.fieldContext_Activity_qrCodeRequired(ctx, field)
			case "autoApprove":
				return ec.fieldContext_Activity_autoApprove(ctx, field)
			case "createdAt":
				return ec.fieldContext_Activity_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Activity_updatedAt(ctx, field)
			case "participations":
				return ec.fieldContext_Activity_participations(ctx, field)
			case "assignments":
				return ec.fieldContext_Activity_assignments(ctx, field)
			case "childActivities":
				return ec.fieldContext_Activity_childActivities(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Activity", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActivityAssignment_id(ctx context.Context, field graphql.CollectedField, obj *models.ActivityAssignment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActivityAssignment_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ActivityAssignment().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActivityAssignment_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActivityAssignment",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActivityAssignment_activity(ctx context.Context, field graphql.CollectedField, obj *models.ActivityAssignment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActivityAssignment_activity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Activity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.Activity)
	fc.Result = res
	return ec.marshalNActivity2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐActivity(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActivityAssignment_activity(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActivityAssignment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Activity_id(ctx, field)
			case "title":
				return ec.fieldContext_Activity_title(ctx, field)
			case "description":
				return ec.fieldContext_Activity_description(ctx, field)
			case "type":
				return ec.fieldContext_Activity_type(ctx, field)
			case "status":
				return ec.fieldContext_Activity_status(ctx, field)
			case "startDate":
				return ec.fieldContext_Activity_startDate(ctx, field)
			case "endDate":
				return ec.fieldContext_Activity_endDate(ctx, field)
			case "location":
				return ec.fieldContext_Activity_location(ctx, field)
			case "maxParticipants":
				return ec.fieldContext_Activity_maxParticipants(ctx, field)
			case "requireApproval":
				return ec.fieldContext_Activity_requireApproval(ctx, field)
			case "points":
				return ec.fieldContext_Activity_points(ctx, field)
			case "faculty":
				return ec.fieldContext_Activity_faculty(ctx, field)
			case "department":
				return ec.fieldContext_Activity_department(ctx, field)
			case "createdBy":
				return ec.fieldContext_Activity_createdBy(ctx, field)
			case "template":
				return ec.fieldContext_Activity_template(ctx, field)
			case "isRecurring":
				return ec.fieldContext_Activity_isRecurring(ctx, field)
			case "recurrenceRule":
				return ec.fieldContext_Activity_recurrenceRule(ctx, field)
			case "parentActivity":
				return ec.fieldContext_Activity_parentActivity(ctx, field)
			case "qrCodeRequired":
				return ec.fieldContext_Activity_qrCodeRequired(ctx, field)
			case "autoApprove":
				return ec.fieldContext_Activity_autoApprove(ctx, field)
			case "createdAt":
				return ec.fieldContext_Activity_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Activity_updatedAt(ctx, field)
			case "participations":
				return ec.fieldContext_Activity_participations(ctx, field)
			case "assignments":
				return ec.fieldContext_Activity_assignments(ctx, field)
			case "childActivities":
				return ec.fieldContext_Activity_childActivities(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Activity", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActivityAssignment_admin(ctx context.Context, field graphql.CollectedField, obj *models.ActivityAssignment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActivityAssignment_admin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Admin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.User)
	fc.Result = res
	return ec.marshalNUser2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActivityAssignment_admin(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActivityAssignment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "studentID":
				return ec.fieldContext_User_studentID(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "role":
				return ec.fieldContext_User_role(ctx, field)
			case "qrSecret":
				return ec.fieldContext_User_qrSecret(ctx, field)
			case "faculty":
				return ec.fieldContext_User_faculty(ctx, field)
			case "department":
				return ec.fieldContext_User_department(ctx, field)
			case "isActive":
				return ec.fieldContext_User_isActive(ctx, field)
			case "lastLoginAt":
				return ec.fieldContext_User_lastLoginAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "participations":
				return ec.fieldContext_User_participations(ctx, field)
			case "subscriptions":
				return ec.fieldContext_User_subscriptions(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActivityAssignment_assignedBy(ctx context.Context, field graphql.CollectedField, obj *models.ActivityAssignment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActivityAssignment_assignedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssignedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.User)
	fc.Result = res
	return ec.marshalNUser2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActivityAssignment_assignedBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActivityAssignment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "studentID":
				return ec.fieldContext_User_studentID(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "role":
				return ec.fieldContext_User_role(ctx, field)
			case "qrSecret":
				return ec.fieldContext_User_qrSecret(ctx, field)
			case "faculty":
				return ec.fieldContext_User_faculty(ctx, field)
			case "department":
				return ec.fieldContext_User_department(ctx, field)
			case "isActive":
				return ec.fieldContext_User_isActive(ctx, field)
			case "lastLoginAt":
				return ec.fieldContext_User_lastLoginAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "participations":
				return ec.fieldContext_User_participations(ctx, field)
			case "subscriptions":
				return ec.fieldContext_User_subscriptions(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActivityAssignment_canScanQR(ctx context.Context, field graphql.CollectedField, obj *models.ActivityAssignment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActivityAssignment_canScanQR(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CanScanQR, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActivityAssignment_canScanQR(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActivityAssignment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActivityAssignment_canApprove(ctx context.Context, field graphql.CollectedField, obj *models.ActivityAssignment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActivityAssignment_canApprove(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CanApprove, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActivityAssignment_canApprove(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActivityAssignment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActivityAssignment_notes(ctx context.Context, field graphql.CollectedField, obj *models.ActivityAssignment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActivityAssignment_notes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Notes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActivityAssignment_notes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActivityAssignment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActivityAssignment_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.ActivityAssignment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActivityAssignment_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActivityAssignment_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActivityAssignment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActivityAssignment_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models.ActivityAssignment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActivityAssignment_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActivityAssignment_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActivityAssignment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActivityTemplate_id(ctx context.Context, field graphql.CollectedField, obj *models.ActivityTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActivityTemplate_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ActivityTemplate().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActivityTemplate_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActivityTemplate",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActivityTemplate_name(ctx context.Context, field graphql.CollectedField, obj *models.ActivityTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActivityTemplate_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActivityTemplate_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActivityTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActivityTemplate_description(ctx context.Context, field graphql.CollectedField, obj *models.ActivityTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActivityTemplate_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActivityTemplate_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActivityTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActivityTemplate_type(ctx context.Context, field graphql.CollectedField, obj *models.ActivityTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActivityTemplate_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.ActivityType)
	fc.Result = res
	return ec.marshalNActivityType2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐActivityType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActivityTemplate_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActivityTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ActivityType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActivityTemplate_defaultDuration(ctx context.Context, field graphql.CollectedField, obj *models.ActivityTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActivityTemplate_defaultDuration(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultDuration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActivityTemplate_defaultDuration(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActivityTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActivityTemplate_location(ctx context.Context, field graphql.CollectedField, obj *models.ActivityTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActivityTemplate_location(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Location, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActivityTemplate_location(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActivityTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActivityTemplate_maxParticipants(ctx context.Context, field graphql.CollectedField, obj *models.ActivityTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActivityTemplate_maxParticipants(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxParticipants, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActivityTemplate_maxParticipants(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActivityTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActivityTemplate_requireApproval(ctx context.Context, field graphql.CollectedField, obj *models.ActivityTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActivityTemplate_requireApproval(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RequireApproval, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActivityTemplate_requireApproval(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActivityTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActivityTemplate_points(ctx context.Context, field graphql.CollectedField, obj *models.ActivityTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActivityTemplate_points(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Points, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActivityTemplate_points(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActivityTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActivityTemplate_qrCodeRequired(ctx context.Context, field graphql.CollectedField, obj *models.ActivityTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActivityTemplate_qrCodeRequired(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QRCodeRequired, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActivityTemplate_qrCodeRequired(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActivityTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActivityTemplate_autoApprove(ctx context.Context, field graphql.CollectedField, obj *models.ActivityTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActivityTemplate_autoApprove(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AutoApprove, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActivityTemplate_autoApprove(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActivityTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActivityTemplate_faculty(ctx context.Context, field graphql.CollectedField, obj *models.ActivityTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActivityTemplate_faculty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Faculty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Faculty)
	fc.Result = res
	return ec.marshalOFaculty2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐFaculty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActivityTemplate_faculty(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActivityTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Faculty_id(ctx, field)
			case "name":
				return ec.fieldContext_Faculty_name(ctx, field)
			case "code":
				return ec.fieldContext_Faculty_code(ctx, field)
			case "description":
				return ec.fieldContext_Faculty_description(ctx, field)
			case "isActive":
				return ec.fieldContext_Faculty_isActive(ctx, field)
			case "createdAt":
				return ec.fieldContext_Faculty_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Faculty_updatedAt(ctx, field)
			case "departments":
				return ec.fieldContext_Faculty_departments(ctx, field)
			case "users":
				return ec.fieldContext_Faculty_users(ctx, field)
			case "activities":
				return ec.fieldContext_Faculty_activities(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Faculty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActivityTemplate_createdBy(ctx context.Context, field graphql.CollectedField, obj *models.ActivityTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActivityTemplate_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.User)
	fc.Result = res
	return ec.marshalNUser2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActivityTemplate_createdBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActivityTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "studentID":
				return ec.fieldContext_User_studentID(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "role":
				return ec.fieldContext_User_role(ctx, field)
			case "qrSecret":
				return ec.fieldContext_User_qrSecret(ctx, field)
			case "faculty":
				return ec.fieldContext_User_faculty(ctx, field)
			case "department":
				return ec.fieldContext_User_department(ctx, field)
			case "isActive":
				return ec.fieldContext_User_isActive(ctx, field)
			case "lastLoginAt":
				return ec.fieldContext_User_lastLoginAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "participations":
				return ec.fieldContext_User_participations(ctx, field)
			case "subscriptions":
				return ec.fieldContext_User_subscriptions(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActivityTemplate_isActive(ctx context.Context, field graphql.CollectedField, obj *models.ActivityTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActivityTemplate_isActive(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsActive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActivityTemplate_isActive(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActivityTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActivityTemplate_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.ActivityTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActivityTemplate_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActivityTemplate_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActivityTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActivityTemplate_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models.ActivityTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActivityTemplate_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActivityTemplate_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActivityTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActivityTemplate_activities(ctx context.Context, field graphql.CollectedField, obj *models.ActivityTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActivityTemplate_activities(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Activities, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]models.Activity)
	fc.Result = res
	return ec.marshalNActivity2ᚕgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐActivityᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActivityTemplate_activities(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActivityTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Activity_id(ctx, field)
			case "title":
				return ec.fieldContext_Activity_title(ctx, field)
			case "description":
				return ec.fieldContext_Activity_description(ctx, field)
			case "type":
				return ec.fieldContext_Activity_type(ctx, field)
			case "status":
				return ec.fieldContext_Activity_status(ctx, field)
			case "startDate":
				return ec.fieldContext_Activity_startDate(ctx, field)
			case "endDate":
				return ec.fieldContext_Activity_endDate(ctx, field)
			case "location":
				return ec.fieldContext_Activity_location(ctx, field)
			case "maxParticipants":
				return ec.fieldContext_Activity_maxParticipants(ctx, field)
			case "requireApproval":
				return ec.fieldContext_Activity_requireApproval(ctx, field)
			case "points":
				return ec.fieldContext_Activity_points(ctx, field)
			case "faculty":
				return ec.fieldContext_Activity_faculty(ctx, field)
			case "department":
				return ec.fieldContext_Activity_department(ctx, field)
			case "createdBy":
				return ec.fieldContext_Activity_createdBy(ctx, field)
			case "template":
				return ec.fieldContext_Activity_template(ctx, field)
			case "isRecurring":
				return ec.fieldContext_Activity_isRecurring(ctx, field)
			case "recurrenceRule":
				return ec.fieldContext_Activity_recurrenceRule(ctx, field)
			case "parentActivity":
				return ec.fieldContext_Activity_parentActivity(ctx, field)
			case "qrCodeRequired":
				return ec.fieldContext_Activity_qrCodeRequired(ctx, field)
			case "autoApprove":
				return ec.fieldContext_Activity_autoApprove(ctx, field)
			case "createdAt":
				return ec.fieldContext_Activity_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Activity_updatedAt(ctx, field)
			case "participations":
				return ec.fieldContext_Activity_participations(ctx, field)
			case "assignments":
				return ec.fieldContext_Activity_assignments(ctx, field)
			case "childActivities":
				return ec.fieldContext_Activity_childActivities(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Activity", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthPayload_token(ctx context.Context, field graphql.CollectedField, obj *model.AuthPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthPayload_token(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Token, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthPayload_token(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthPayload_user(ctx context.Context, field graphql.CollectedField, obj *model.AuthPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthPayload_user(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.User)
	fc.Result = res
	return ec.marshalNUser2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthPayload_user(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "studentID":
				return ec.fieldContext_User_studentID(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "role":
				return ec.fieldContext_User_role(ctx, field)
			case "qrSecret":
				return ec.fieldContext_User_qrSecret(ctx, field)
			case "faculty":
				return ec.fieldContext_User_faculty(ctx, field)
			case "department":
				return ec.fieldContext_User_department(ctx, field)
			case "isActive":
				return ec.fieldContext_User_isActive(ctx, field)
			case "lastLoginAt":
				return ec.fieldContext_User_lastLoginAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "participations":
				return ec.fieldContext_User_participations(ctx, field)
			case "subscriptions":
				return ec.fieldContext_User_subscriptions(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Department_id(ctx context.Context, field graphql.CollectedField, obj *models.Department) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Department_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Department().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Department_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Department",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Department_name(ctx context.Context, field graphql.CollectedField, obj *models.Department) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Department_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Department_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Department",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Department_code(ctx context.Context, field graphql.CollectedField, obj *models.Department) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Department_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Department_code(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Department",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Department_faculty(ctx context.Context, field graphql.CollectedField, obj *models.Department) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Department_faculty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Faculty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.Faculty)
	fc.Result = res
	return ec.marshalNFaculty2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐFaculty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Department_faculty(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Department",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Faculty_id(ctx, field)
			case "name":
				return ec.fieldContext_Faculty_name(ctx, field)
			case "code":
				return ec.fieldContext_Faculty_code(ctx, field)
			case "description":
				return ec.fieldContext_Faculty_description(ctx, field)
			case "isActive":
				return ec.fieldContext_Faculty_isActive(ctx, field)
			case "createdAt":
				return ec.fieldContext_Faculty_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Faculty_updatedAt(ctx, field)
			case "departments":
				return ec.fieldContext_Faculty_departments(ctx, field)
			case "users":
				return ec.fieldContext_Faculty_users(ctx, field)
			case "activities":
				return ec.fieldContext_Faculty_activities(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Faculty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Department_isActive(ctx context.Context, field graphql.CollectedField, obj *models.Department) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Department_isActive(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsActive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Department_isActive(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Department",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Department_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.Department) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Department_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Department_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Department",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Department_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models.Department) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Department_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Department_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Department",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Department_users(ctx context.Context, field graphql.CollectedField, obj *models.Department) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Department_users(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Users, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]models.User)
	fc.Result = res
	return ec.marshalNUser2ᚕgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUserᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Department_users(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Department",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "studentID":
				return ec.fieldContext_User_studentID(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "role":
				return ec.fieldContext_User_role(ctx, field)
			case "qrSecret":
				return ec.fieldContext_User_qrSecret(ctx, field)
			case "faculty":
				return ec.fieldContext_User_faculty(ctx, field)
			case "department":
				return ec.fieldContext_User_department(ctx, field)
			case "isActive":
				return ec.fieldContext_User_isActive(ctx, field)
			case "lastLoginAt":
				return ec.fieldContext_User_lastLoginAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "participations":
				return ec.fieldContext_User_participations(ctx, field)
			case "subscriptions":
				return ec.fieldContext_User_subscriptions(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Department_activities(ctx context.Context, field graphql.CollectedField, obj *models.Department) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Department_activities(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Activities, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]models.Activity)
	fc.Result = res
	return ec.marshalNActivity2ᚕgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐActivityᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Department_activities(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Department",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Activity_id(ctx, field)
			case "title":
				return ec.fieldContext_Activity_title(ctx, field)
			case "description":
				return ec.fieldContext_Activity_description(ctx, field)
			case "type":
				return ec.fieldContext_Activity_type(ctx, field)
			case "status":
				return ec.fieldContext_Activity_status(ctx, field)
			case "startDate":
				return ec.fieldContext_Activity_startDate(ctx, field)
			case "endDate":
				return ec.fieldContext_Activity_endDate(ctx, field)
			case "location":
				return ec.fieldContext_Activity_location(ctx, field)
			case "maxParticipants":
				return ec.fieldContext_Activity_maxParticipants(ctx, field)
			case "requireApproval":
				return ec.fieldContext_Activity_requireApproval(ctx, field)
			case "points":
				return ec.fieldContext_Activity_points(ctx, field)
			case "faculty":
				return ec.fieldContext_Activity_faculty(ctx, field)
			case "department":
				return ec.fieldContext_Activity_department(ctx, field)
			case "createdBy":
				return ec.fieldContext_Activity_createdBy(ctx, field)
			case "template":
				return ec.fieldContext_Activity_template(ctx, field)
			case "isRecurring":
				return ec.fieldContext_Activity_isRecurring(ctx, field)
			case "recurrenceRule":
				return ec.fieldContext_Activity_recurrenceRule(ctx, field)
			case "parentActivity":
				return ec.fieldContext_Activity_parentActivity(ctx, field)
			case "qrCodeRequired":
				return ec.fieldContext_Activity_qrCodeRequired(ctx, field)
			case "autoApprove":
				return ec.fieldContext_Activity_autoApprove(ctx, field)
			case "createdAt":
				return ec.fieldContext_Activity_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Activity_updatedAt(ctx, field)
			case "participations":
				return ec.fieldContext_Activity_participations(ctx, field)
			case "assignments":
				return ec.fieldContext_Activity_assignments(ctx, field)
			case "childActivities":
				return ec.fieldContext_Activity_childActivities(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Activity", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Faculty_id(ctx context.Context, field graphql.CollectedField, obj *models.Faculty) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Faculty_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Faculty().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Faculty_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Faculty",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Faculty_name(ctx context.Context, field graphql.CollectedField, obj *models.Faculty) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Faculty_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Faculty_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Faculty",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Faculty_code(ctx context.Context, field graphql.CollectedField, obj *models.Faculty) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Faculty_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Faculty_code(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Faculty",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Faculty_description(ctx context.Context, field graphql.CollectedField, obj *models.Faculty) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Faculty_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Faculty_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Faculty",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Faculty_isActive(ctx context.Context, field graphql.CollectedField, obj *models.Faculty) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Faculty_isActive(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsActive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Faculty_isActive(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Faculty",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Faculty_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.Faculty) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Faculty_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Faculty_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Faculty",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Faculty_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models.Faculty) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Faculty_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Faculty_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Faculty",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Faculty_departments(ctx context.Context, field graphql.CollectedField, obj *models.Faculty) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Faculty_departments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Departments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]models.Department)
	fc.Result = res
	return ec.marshalNDepartment2ᚕgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐDepartmentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Faculty_departments(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Faculty",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Department_id(ctx, field)
			case "name":
				return ec.fieldContext_Department_name(ctx, field)
			case "code":
				return ec.fieldContext_Department_code(ctx, field)
			case "faculty":
				return ec.fieldContext_Department_faculty(ctx, field)
			case "isActive":
				return ec.fieldContext_Department_isActive(ctx, field)
			case "createdAt":
				return ec.fieldContext_Department_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Department_updatedAt(ctx, field)
			case "users":
				return ec.fieldContext_Department_users(ctx, field)
			case "activities":
				return ec.fieldContext_Department_activities(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Department", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Faculty_users(ctx context.Context, field graphql.CollectedField, obj *models.Faculty) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Faculty_users(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Users, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]models.User)
	fc.Result = res
	return ec.marshalNUser2ᚕgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUserᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Faculty_users(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Faculty",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "studentID":
				return ec.fieldContext_User_studentID(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "role":
				return ec.fieldContext_User_role(ctx, field)
			case "qrSecret":
				return ec.fieldContext_User_qrSecret(ctx, field)
			case "faculty":
				return ec.fieldContext_User_faculty(ctx, field)
			case "department":
				return ec.fieldContext_User_department(ctx, field)
			case "isActive":
				return ec.fieldContext_User_isActive(ctx, field)
			case "lastLoginAt":
				return ec.fieldContext_User_lastLoginAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "participations":
				return ec.fieldContext_User_participations(ctx, field)
			case "subscriptions":
				return ec.fieldContext_User_subscriptions(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Faculty_activities(ctx context.Context, field graphql.CollectedField, obj *models.Faculty) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Faculty_activities(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Activities, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]models.Activity)
	fc.Result = res
	return ec.marshalNActivity2ᚕgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐActivityᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Faculty_activities(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Faculty",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Activity_id(ctx, field)
			case "title":
				return ec.fieldContext_Activity_title(ctx, field)
			case "description":
				return ec.fieldContext_Activity_description(ctx, field)
			case "type":
				return ec.fieldContext_Activity_type(ctx, field)
			case "status":
				return ec.fieldContext_Activity_status(ctx, field)
			case "startDate":
				return ec.fieldContext_Activity_startDate(ctx, field)
			case "endDate":
				return ec.fieldContext_Activity_endDate(ctx, field)
			case "location":
				return ec.fieldContext_Activity_location(ctx, field)
			case "maxParticipants":
				return ec.fieldContext_Activity_maxParticipants(ctx, field)
			case "requireApproval":
				return ec.fieldContext_Activity_requireApproval(ctx, field)
			case "points":
				return ec.fieldContext_Activity_points(ctx, field)
			case "faculty":
				return ec.fieldContext_Activity_faculty(ctx, field)
			case "department":
				return ec.fieldContext_Activity_department(ctx, field)
			case "createdBy":
				return ec.fieldContext_Activity_createdBy(ctx, field)
			case "template":
				return ec.fieldContext_Activity_template(ctx, field)
			case "isRecurring":
				return ec.fieldContext_Activity_isRecurring(ctx, field)
			case "recurrenceRule":
				return ec.fieldContext_Activity_recurrenceRule(ctx, field)
			case "parentActivity":
				return ec.fieldContext_Activity_parentActivity(ctx, field)
			case "qrCodeRequired":
				return ec.fieldContext_Activity_qrCodeRequired(ctx, field)
			case "autoApprove":
				return ec.fieldContext_Activity_autoApprove(ctx, field)
			case "createdAt":
				return ec.fieldContext_Activity_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Activity_updatedAt(ctx, field)
			case "participations":
				return ec.fieldContext_Activity_participations(ctx, field)
			case "assignments":
				return ec.fieldContext_Activity_assignments(ctx, field)
			case "childActivities":
				return ec.fieldContext_Activity_childActivities(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Activity", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FacultyMetrics_id(ctx context.Context, field graphql.CollectedField, obj *models.FacultyMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FacultyMetrics_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.FacultyMetrics().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FacultyMetrics_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FacultyMetrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FacultyMetrics_faculty(ctx context.Context, field graphql.CollectedField, obj *models.FacultyMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FacultyMetrics_faculty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Faculty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.Faculty)
	fc.Result = res
	return ec.marshalNFaculty2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐFaculty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FacultyMetrics_faculty(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FacultyMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Faculty_id(ctx, field)
			case "name":
				return ec.fieldContext_Faculty_name(ctx, field)
			case "code":
				return ec.fieldContext_Faculty_code(ctx, field)
			case "description":
				return ec.fieldContext_Faculty_description(ctx, field)
			case "isActive":
				return ec.fieldContext_Faculty_isActive(ctx, field)
			case "createdAt":
				return ec.fieldContext_Faculty_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Faculty_updatedAt(ctx, field)
			case "departments":
				return ec.fieldContext_Faculty_departments(ctx, field)
			case "users":
				return ec.fieldContext_Faculty_users(ctx, field)
			case "activities":
				return ec.fieldContext_Faculty_activities(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Faculty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FacultyMetrics_totalStudents(ctx context.Context, field graphql.CollectedField, obj *models.FacultyMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FacultyMetrics_totalStudents(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalStudents, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FacultyMetrics_totalStudents(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FacultyMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FacultyMetrics_activeStudents(ctx context.Context, field graphql.CollectedField, obj *models.FacultyMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FacultyMetrics_activeStudents(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActiveStudents, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FacultyMetrics_activeStudents(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FacultyMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FacultyMetrics_totalActivities(ctx context.Context, field graphql.CollectedField, obj *models.FacultyMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FacultyMetrics_totalActivities(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalActivities, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FacultyMetrics_totalActivities(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FacultyMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FacultyMetrics_completedActivities(ctx context.Context, field graphql.CollectedField, obj *models.FacultyMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FacultyMetrics_completedActivities(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompletedActivities, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FacultyMetrics_completedActivities(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FacultyMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FacultyMetrics_totalParticipants(ctx context.Context, field graphql.CollectedField, obj *models.FacultyMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FacultyMetrics_totalParticipants(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalParticipants, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FacultyMetrics_totalParticipants(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FacultyMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FacultyMetrics_averageAttendance(ctx context.Context, field graphql.CollectedField, obj *models.FacultyMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FacultyMetrics_averageAttendance(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AverageAttendance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FacultyMetrics_averageAttendance(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FacultyMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FacultyMetrics_date(ctx context.Context, field graphql.CollectedField, obj *models.FacultyMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FacultyMetrics_date(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FacultyMetrics_date(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FacultyMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FacultyMetrics_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.FacultyMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FacultyMetrics_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FacultyMetrics_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FacultyMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FacultyMetrics_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models.FacultyMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FacultyMetrics_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FacultyMetrics_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FacultyMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FacultySubscription_id(ctx context.Context, field graphql.CollectedField, obj *model.FacultySubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FacultySubscription_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FacultySubscription_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FacultySubscription",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FacultySubscription_faculty(ctx context.Context, field graphql.CollectedField, obj *model.FacultySubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FacultySubscription_faculty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Faculty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.Faculty)
	fc.Result = res
	return ec.marshalNFaculty2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐFaculty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FacultySubscription_faculty(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FacultySubscription",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Faculty_id(ctx, field)
			case "name":
				return ec.fieldContext_Faculty_name(ctx, field)
			case "code":
				return ec.fieldContext_Faculty_code(ctx, field)
			case "description":
				return ec.fieldContext_Faculty_description(ctx, field)
			case "isActive":
				return ec.fieldContext_Faculty_isActive(ctx, field)
			case "createdAt":
				return ec.fieldContext_Faculty_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Faculty_updatedAt(ctx, field)
			case "departments":
				return ec.fieldContext_Faculty_departments(ctx, field)
			case "users":
				return ec.fieldContext_Faculty_users(ctx, field)
			case "activities":
				return ec.fieldContext_Faculty_activities(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Faculty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FacultySubscription_type(ctx context.Context, field graphql.CollectedField, obj *model.FacultySubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FacultySubscription_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.SubscriptionType)
	fc.Result = res
	return ec.marshalNSubscriptionType2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐSubscriptionType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FacultySubscription_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FacultySubscription",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type SubscriptionType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FacultySubscription_status(ctx context.Context, field graphql.CollectedField, obj *model.FacultySubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FacultySubscription_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.SubscriptionStatus)
	fc.Result = res
	return ec.marshalNSubscriptionStatus2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐSubscriptionStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FacultySubscription_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FacultySubscription",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type SubscriptionStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FacultySubscription_startDate(ctx context.Context, field graphql.CollectedField, obj *model.FacultySubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FacultySubscription_startDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FacultySubscription_startDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FacultySubscription",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FacultySubscription_endDate(ctx context.Context, field graphql.CollectedField, obj *model.FacultySubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FacultySubscription_endDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FacultySubscription_endDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FacultySubscription",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FacultySubscription_daysUntilExpiry(ctx context.Context, field graphql.CollectedField, obj *model.FacultySubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FacultySubscription_daysUntilExpiry(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DaysUntilExpiry, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FacultySubscription_daysUntilExpiry(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FacultySubscription",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FacultySubscription_needsNotification(ctx context.Context, field graphql.CollectedField, obj *model.FacultySubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FacultySubscription_needsNotification(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NeedsNotification, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FacultySubscription_needsNotification(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FacultySubscription",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FacultySubscription_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.FacultySubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FacultySubscription_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FacultySubscription_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FacultySubscription",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FacultySubscription_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.FacultySubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FacultySubscription_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FacultySubscription_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FacultySubscription",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_login(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_login(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Login(rctx, fc.Args["input"].(model.LoginInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.AuthPayload)
	fc.Result = res
	return ec.marshalNAuthPayload2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐAuthPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_login(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "token":
				return ec.fieldContext_AuthPayload_token(ctx, field)
			case "user":
				return ec.fieldContext_AuthPayload_user(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AuthPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_login_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_register(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_register(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Register(rctx, fc.Args["input"].(model.RegisterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.AuthPayload)
	fc.Result = res
	return ec.marshalNAuthPayload2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐAuthPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_register(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "token":
				return ec.fieldContext_AuthPayload_token(ctx, field)
			case "user":
				return ec.fieldContext_AuthPayload_user(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AuthPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_register_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_refreshToken(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_refreshToken(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().RefreshToken(rctx)
		}

		directive1 := func(ctx context.Context) (any, error) {
			if ec.directives.Auth == nil {
				var zeroVal *model.AuthPayload
				return zeroVal, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.AuthPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/kruakemaths/tru-activity/backend/graph/model.AuthPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.AuthPayload)
	fc.Result = res
	return ec.marshalNAuthPayload2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐAuthPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_refreshToken(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "token":
				return ec.fieldContext_AuthPayload_token(ctx, field)
			case "user":
				return ec.fieldContext_AuthPayload_user(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AuthPayload", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createActivity(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createActivity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateActivity(rctx, fc.Args["input"].(model.CreateActivityInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			roles, err := ec.unmarshalNUserRole2ᚕgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUserRoleᚄ(ctx, []any{"SUPER_ADMIN", "FACULTY_ADMIN"})
			if err != nil {
				var zeroVal *models.Activity
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *models.Activity
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.Activity); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/kruakemaths/tru-activity/backend/internal/models.Activity`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.Activity)
	fc.Result = res
	return ec.marshalNActivity2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐActivity(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createActivity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Activity_id(ctx, field)
			case "title":
				return ec.fieldContext_Activity_title(ctx, field)
			case "description":
				return ec.fieldContext_Activity_description(ctx, field)
			case "type":
				return ec.fieldContext_Activity_type(ctx, field)
			case "status":
				return ec.fieldContext_Activity_status(ctx, field)
			case "startDate":
				return ec.fieldContext_Activity_startDate(ctx, field)
			case "endDate":
				return ec.fieldContext_Activity_endDate(ctx, field)
			case "location":
				return ec.fieldContext_Activity_location(ctx, field)
			case "maxParticipants":
				return ec.fieldContext_Activity_maxParticipants(ctx, field)
			case "requireApproval":
				return ec.fieldContext_Activity_requireApproval(ctx, field)
			case "points":
				return ec.fieldContext_Activity_points(ctx, field)
			case "faculty":
				return ec.fieldContext_Activity_faculty(ctx, field)
			case "department":
				return ec.fieldContext_Activity_department(ctx, field)
			case "createdBy":
				return ec.fieldContext_Activity_createdBy(ctx, field)
			case "template":
				return ec.fieldContext_Activity_template(ctx, field)
			case "isRecurring":
				return ec.fieldContext_Activity_isRecurring(ctx, field)
			case "recurrenceRule":
				return ec.fieldContext_Activity_recurrenceRule(ctx, field)
			case "parentActivity":
				return ec.fieldContext_Activity_parentActivity(ctx, field)
			case "qrCodeRequired":
				return ec.fieldContext_Activity_qrCodeRequired(ctx, field)
			case "autoApprove":
				return ec.fieldContext_Activity_autoApprove(ctx, field)
			case "createdAt":
				return ec.fieldContext_Activity_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Activity_updatedAt(ctx, field)
			case "participations":
				return ec.fieldContext_Activity_participations(ctx, field)
			case "assignments":
				return ec.fieldContext_Activity_assignments(ctx, field)
			case "childActivities":
				return ec.fieldContext_Activity_childActivities(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Activity", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createActivity_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateActivity(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateActivity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateActivity(rctx, fc.Args["id"].(string), fc.Args["input"].(model.UpdateActivityInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			if ec.directives.Auth == nil {
				var zeroVal *models.Activity
				return zeroVal, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.Activity); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/kruakemaths/tru-activity/backend/internal/models.Activity`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.Activity)
	fc.Result = res
	return ec.marshalNActivity2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐActivity(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateActivity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Activity_id(ctx, field)
			case "title":
				return ec.fieldContext_Activity_title(ctx, field)
			case "description":
				return ec.fieldContext_Activity_description(ctx, field)
			case "type":
				return ec.fieldContext_Activity_type(ctx, field)
			case "status":
				return ec.fieldContext_Activity_status(ctx, field)
			case "startDate":
				return ec.fieldContext_Activity_startDate(ctx, field)
			case "endDate":
				return ec.fieldContext_Activity_endDate(ctx, field)
			case "location":
				return ec.fieldContext_Activity_location(ctx, field)
			case "maxParticipants":
				return ec.fieldContext_Activity_maxParticipants(ctx, field)
			case "requireApproval":
				return ec.fieldContext_Activity_requireApproval(ctx, field)
			case "points":
				return ec.fieldContext_Activity_points(ctx, field)
			case "faculty":
				return ec.fieldContext_Activity_faculty(ctx, field)
			case "department":
				return ec.fieldContext_Activity_department(ctx, field)
			case "createdBy":
				return ec.fieldContext_Activity_createdBy(ctx, field)
			case "template":
				return ec.fieldContext_Activity_template(ctx, field)
			case "isRecurring":
				return ec.fieldContext_Activity_isRecurring(ctx, field)
			case "recurrenceRule":
				return ec.fieldContext_Activity_recurrenceRule(ctx, field)
			case "parentActivity":
				return ec.fieldContext_Activity_parentActivity(ctx, field)
			case "qrCodeRequired":
				return ec.fieldContext_Activity_qrCodeRequired(ctx, field)
			case "autoApprove":
				return ec.fieldContext_Activity_autoApprove(ctx, field)
			case "createdAt":
				return ec.fieldContext_Activity_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Activity_updatedAt(ctx, field)
			case "participations":
				return ec.fieldContext_Activity_participations(ctx, field)
			case "assignments":
				return ec.fieldContext_Activity_assignments(ctx, field)
			case "childActivities":
				return ec.fieldContext_Activity_childActivities(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Activity", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateActivity_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteActivity(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteActivity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteActivity(rctx, fc.Args["id"].(string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			if ec.directives.Auth == nil {
				var zeroVal bool
				return zeroVal, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteActivity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteActivity_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_joinActivity(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_joinActivity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().JoinActivity(rctx, fc.Args["activityID"].(string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			if ec.directives.Auth == nil {
				var zeroVal *models.Participation
				return zeroVal, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.Participation); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/kruakemaths/tru-activity/backend/internal/models.Participation`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.Participation)
	fc.Result = res
	return ec.marshalNParticipation2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐParticipation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_joinActivity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Participation_id(ctx, field)
			case "user":
				return ec.fieldContext_Participation_user(ctx, field)
			case "activity":
				return ec.fieldContext_Participation_activity(ctx, field)
			case "status":
				return ec.fieldContext_Participation_status(ctx, field)
			case "registeredAt":
				return ec.fieldContext_Participation_registeredAt(ctx, field)
			case "approvedAt":
				return ec.fieldContext_Participation_approvedAt(ctx, field)
			case "attendedAt":
				return ec.fieldContext_Participation_attendedAt(ctx, field)
			case "qrScannedAt":
				return ec.fieldContext_Participation_qrScannedAt(ctx, field)
			case "scannedBy":
				return ec.fieldContext_Participation_scannedBy(ctx, field)
			case "scanLocation":
				return ec.fieldContext_Participation_scanLocation(ctx, field)
			case "notes":
				return ec.fieldContext_Participation_notes(ctx, field)
			case "createdAt":
				return ec.fieldContext_Participation_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Participation_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Participation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_joinActivity_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_leaveActivity(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_leaveActivity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().LeaveActivity(rctx, fc.Args["activityID"].(string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			if ec.directives.Auth == nil {
				var zeroVal bool
				return zeroVal, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_leaveActivity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_leaveActivity_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_approveParticipation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_approveParticipation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().ApproveParticipation(rctx, fc.Args["participationID"].(string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			roles, err := ec.unmarshalNUserRole2ᚕgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUserRoleᚄ(ctx, []any{"SUPER_ADMIN", "FACULTY_ADMIN", "REGULAR_ADMIN"})
			if err != nil {
				var zeroVal *models.Participation
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *models.Participation
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.Participation); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/kruakemaths/tru-activity/backend/internal/models.Participation`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.Participation)
	fc.Result = res
	return ec.marshalNParticipation2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐParticipation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_approveParticipation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Participation_id(ctx, field)
			case "user":
				return ec.fieldContext_Participation_user(ctx, field)
			case "activity":
				return ec.fieldContext_Participation_activity(ctx, field)
			case "status":
				return ec.fieldContext_Participation_status(ctx, field)
			case "registeredAt":
				return ec.fieldContext_Participation_registeredAt(ctx, field)
			case "approvedAt":
				return ec.fieldContext_Participation_approvedAt(ctx, field)
			case "attendedAt":
				return ec.fieldContext_Participation_attendedAt(ctx, field)
			case "qrScannedAt":
				return ec.fieldContext_Participation_qrScannedAt(ctx, field)
			case "scannedBy":
				return ec.fieldContext_Participation_scannedBy(ctx, field)
			case "scanLocation":
				return ec.fieldContext_Participation_scanLocation(ctx, field)
			case "notes":
				return ec.fieldContext_Participation_notes(ctx, field)
			case "createdAt":
				return ec.fieldContext_Participation_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Participation_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Participation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_approveParticipation_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_rejectParticipation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_rejectParticipation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().RejectParticipation(rctx, fc.Args["participationID"].(string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			roles, err := ec.unmarshalNUserRole2ᚕgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUserRoleᚄ(ctx, []any{"SUPER_ADMIN", "FACULTY_ADMIN", "REGULAR_ADMIN"})
			if err != nil {
				var zeroVal *models.Participation
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *models.Participation
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.Participation); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/kruakemaths/tru-activity/backend/internal/models.Participation`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.Participation)
	fc.Result = res
	return ec.marshalNParticipation2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐParticipation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_rejectParticipation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Participation_id(ctx, field)
			case "user":
				return ec.fieldContext_Participation_user(ctx, field)
			case "activity":
				return ec.fieldContext_Participation_activity(ctx, field)
			case "status":
				return ec.fieldContext_Participation_status(ctx, field)
			case "registeredAt":
				return ec.fieldContext_Participation_registeredAt(ctx, field)
			case "approvedAt":
				return ec.fieldContext_Participation_approvedAt(ctx, field)
			case "attendedAt":
				return ec.fieldContext_Participation_attendedAt(ctx, field)
			case "qrScannedAt":
				return ec.fieldContext_Participation_qrScannedAt(ctx, field)
			case "scannedBy":
				return ec.fieldContext_Participation_scannedBy(ctx, field)
			case "scanLocation":
				return ec.fieldContext_Participation_scanLocation(ctx, field)
			case "notes":
				return ec.fieldContext_Participation_notes(ctx, field)
			case "createdAt":
				return ec.fieldContext_Participation_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Participation_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Participation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_rejectParticipation_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_markAttendance(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_markAttendance(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().MarkAttendance(rctx, fc.Args["participationID"].(string), fc.Args["attended"].(bool))
		}

		directive1 := func(ctx context.Context) (any, error) {
			roles, err := ec.unmarshalNUserRole2ᚕgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUserRoleᚄ(ctx, []any{"SUPER_ADMIN", "FACULTY_ADMIN", "REGULAR_ADMIN"})
			if err != nil {
				var zeroVal *models.Participation
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *models.Participation
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.Participation); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/kruakemaths/tru-activity/backend/internal/models.Participation`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.Participation)
	fc.Result = res
	return ec.marshalNParticipation2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐParticipation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_markAttendance(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Participation_id(ctx, field)
			case "user":
				return ec.fieldContext_Participation_user(ctx, field)
			case "activity":
				return ec.fieldContext_Participation_activity(ctx, field)
			case "status":
				return ec.fieldContext_Participation_status(ctx, field)
			case "registeredAt":
				return ec.fieldContext_Participation_registeredAt(ctx, field)
			case "approvedAt":
				return ec.fieldContext_Participation_approvedAt(ctx, field)
			case "attendedAt":
				return ec.fieldContext_Participation_attendedAt(ctx, field)
			case "qrScannedAt":
				return ec.fieldContext_Participation_qrScannedAt(ctx, field)
			case "scannedBy":
				return ec.fieldContext_Participation_scannedBy(ctx, field)
			case "scanLocation":
				return ec.fieldContext_Participation_scanLocation(ctx, field)
			case "notes":
				return ec.fieldContext_Participation_notes(ctx, field)
			case "createdAt":
				return ec.fieldContext_Participation_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Participation_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Participation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_markAttendance_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createFaculty(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createFaculty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateFaculty(rctx, fc.Args["input"].(model.CreateFacultyInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			roles, err := ec.unmarshalNUserRole2ᚕgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUserRoleᚄ(ctx, []any{"SUPER_ADMIN"})
			if err != nil {
				var zeroVal *models.Faculty
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *models.Faculty
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.Faculty); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/kruakemaths/tru-activity/backend/internal/models.Faculty`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.Faculty)
	fc.Result = res
	return ec.marshalNFaculty2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐFaculty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createFaculty(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Faculty_id(ctx, field)
			case "name":
				return ec.fieldContext_Faculty_name(ctx, field)
			case "code":
				return ec.fieldContext_Faculty_code(ctx, field)
			case "description":
				return ec.fieldContext_Faculty_description(ctx, field)
			case "isActive":
				return ec.fieldContext_Faculty_isActive(ctx, field)
			case "createdAt":
				return ec.fieldContext_Faculty_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Faculty_updatedAt(ctx, field)
			case "departments":
				return ec.fieldContext_Faculty_departments(ctx, field)
			case "users":
				return ec.fieldContext_Faculty_users(ctx, field)
			case "activities":
				return ec.fieldContext_Faculty_activities(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Faculty", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createFaculty_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateFaculty(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateFaculty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateFaculty(rctx, fc.Args["id"].(string), fc.Args["input"].(model.CreateFacultyInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			roles, err := ec.unmarshalNUserRole2ᚕgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUserRoleᚄ(ctx, []any{"SUPER_ADMIN"})
			if err != nil {
				var zeroVal *models.Faculty
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *models.Faculty
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.Faculty); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/kruakemaths/tru-activity/backend/internal/models.Faculty`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.Faculty)
	fc.Result = res
	return ec.marshalNFaculty2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐFaculty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateFaculty(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Faculty_id(ctx, field)
			case "name":
				return ec.fieldContext_Faculty_name(ctx, field)
			case "code":
				return ec.fieldContext_Faculty_code(ctx, field)
			case "description":
				return ec.fieldContext_Faculty_description(ctx, field)
			case "isActive":
				return ec.fieldContext_Faculty_isActive(ctx, field)
			case "createdAt":
				return ec.fieldContext_Faculty_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Faculty_updatedAt(ctx, field)
			case "departments":
				return ec.fieldContext_Faculty_departments(ctx, field)
			case "users":
				return ec.fieldContext_Faculty_users(ctx, field)
			case "activities":
				return ec.fieldContext_Faculty_activities(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Faculty", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateFaculty_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteFaculty(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteFaculty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteFaculty(rctx, fc.Args["id"].(string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			roles, err := ec.unmarshalNUserRole2ᚕgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUserRoleᚄ(ctx, []any{"SUPER_ADMIN"})
			if err != nil {
				var zeroVal bool
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal bool
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteFaculty(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteFaculty_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createDepartment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createDepartment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateDepartment(rctx, fc.Args["input"].(model.CreateDepartmentInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			roles, err := ec.unmarshalNUserRole2ᚕgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUserRoleᚄ(ctx, []any{"SUPER_ADMIN", "FACULTY_ADMIN"})
			if err != nil {
				var zeroVal *models.Department
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *models.Department
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.Department); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/kruakemaths/tru-activity/backend/internal/models.Department`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.Department)
	fc.Result = res
	return ec.marshalNDepartment2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐDepartment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createDepartment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Department_id(ctx, field)
			case "name":
				return ec.fieldContext_Department_name(ctx, field)
			case "code":
				return ec.fieldContext_Department_code(ctx, field)
			case "faculty":
				return ec.fieldContext_Department_faculty(ctx, field)
			case "isActive":
				return ec.fieldContext_Department_isActive(ctx, field)
			case "createdAt":
				return ec.fieldContext_Department_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Department_updatedAt(ctx, field)
			case "users":
				return ec.fieldContext_Department_users(ctx, field)
			case "activities":
				return ec.fieldContext_Department_activities(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Department", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createDepartment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateDepartment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateDepartment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateDepartment(rctx, fc.Args["id"].(string), fc.Args["input"].(model.UpdateDepartmentInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			roles, err := ec.unmarshalNUserRole2ᚕgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUserRoleᚄ(ctx, []any{"SUPER_ADMIN", "FACULTY_ADMIN"})
			if err != nil {
				var zeroVal *models.Department
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *models.Department
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.Department); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/kruakemaths/tru-activity/backend/internal/models.Department`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.Department)
	fc.Result = res
	return ec.marshalNDepartment2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐDepartment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateDepartment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Department_id(ctx, field)
			case "name":
				return ec.fieldContext_Department_name(ctx, field)
			case "code":
				return ec.fieldContext_Department_code(ctx, field)
			case "faculty":
				return ec.fieldContext_Department_faculty(ctx, field)
			case "isActive":
				return ec.fieldContext_Department_isActive(ctx, field)
			case "createdAt":
				return ec.fieldContext_Department_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Department_updatedAt(ctx, field)
			case "users":
				return ec.fieldContext_Department_users(ctx, field)
			case "activities":
				return ec.fieldContext_Department_activities(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Department", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateDepartment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteDepartment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteDepartment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteDepartment(rctx, fc.Args["id"].(string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			roles, err := ec.unmarshalNUserRole2ᚕgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUserRoleᚄ(ctx, []any{"SUPER_ADMIN", "FACULTY_ADMIN"})
			if err != nil {
				var zeroVal bool
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal bool
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteDepartment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteDepartment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createSubscription(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createSubscription(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateSubscription(rctx, fc.Args["input"].(model.CreateSubscriptionInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			roles, err := ec.unmarshalNUserRole2ᚕgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUserRoleᚄ(ctx, []any{"SUPER_ADMIN"})
			if err != nil {
				var zeroVal *model.FacultySubscription
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *model.FacultySubscription
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.FacultySubscription); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/kruakemaths/tru-activity/backend/graph/model.FacultySubscription`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.FacultySubscription)
	fc.Result = res
	return ec.marshalNFacultySubscription2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐFacultySubscription(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createSubscription(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_FacultySubscription_id(ctx, field)
			case "faculty":
				return ec.fieldContext_FacultySubscription_faculty(ctx, field)
			case "type":
				return ec.fieldContext_FacultySubscription_type(ctx, field)
			case "status":
				return ec.fieldContext_FacultySubscription_status(ctx, field)
			case "startDate":
				return ec.fieldContext_FacultySubscription_startDate(ctx, field)
			case "endDate":
				return ec.fieldContext_FacultySubscription_endDate(ctx, field)
			case "daysUntilExpiry":
				return ec.fieldContext_FacultySubscription_daysUntilExpiry(ctx, field)
			case "needsNotification":
				return ec.fieldContext_FacultySubscription_needsNotification(ctx, field)
			case "createdAt":
				return ec.fieldContext_FacultySubscription_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_FacultySubscription_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FacultySubscription", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createSubscription_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateSubscription(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateSubscription(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateSubscription(rctx, fc.Args["id"].(string), fc.Args["input"].(model.UpdateSubscriptionInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			roles, err := ec.unmarshalNUserRole2ᚕgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUserRoleᚄ(ctx, []any{"SUPER_ADMIN"})
			if err != nil {
				var zeroVal *model.FacultySubscription
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *model.FacultySubscription
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.FacultySubscription); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/kruakemaths/tru-activity/backend/graph/model.FacultySubscription`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.FacultySubscription)
	fc.Result = res
	return ec.marshalNFacultySubscription2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐFacultySubscription(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateSubscription(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_FacultySubscription_id(ctx, field)
			case "faculty":
				return ec.fieldContext_FacultySubscription_faculty(ctx, field)
			case "type":
				return ec.fieldContext_FacultySubscription_type(ctx, field)
			case "status":
				return ec.fieldContext_FacultySubscription_status(ctx, field)
			case "startDate":
				return ec.fieldContext_FacultySubscription_startDate(ctx, field)
			case "endDate":
				return ec.fieldContext_FacultySubscription_endDate(ctx, field)
			case "daysUntilExpiry":
				return ec.fieldContext_FacultySubscription_daysUntilExpiry(ctx, field)
			case "needsNotification":
				return ec.fieldContext_FacultySubscription_needsNotification(ctx, field)
			case "createdAt":
				return ec.fieldContext_FacultySubscription_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_FacultySubscription_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FacultySubscription", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateSubscription_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteSubscription(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteSubscription(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteSubscription(rctx, fc.Args["id"].(string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			roles, err := ec.unmarshalNUserRole2ᚕgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUserRoleᚄ(ctx, []any{"SUPER_ADMIN"})
			if err != nil {
				var zeroVal bool
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal bool
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteSubscription(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteSubscription_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_assignFacultyAdmin(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_assignFacultyAdmin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().AssignFacultyAdmin(rctx, fc.Args["userID"].(string), fc.Args["facultyID"].(string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			roles, err := ec.unmarshalNUserRole2ᚕgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUserRoleᚄ(ctx, []any{"SUPER_ADMIN"})
			if err != nil {
				var zeroVal *models.User
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *models.User
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.User); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/kruakemaths/tru-activity/backend/internal/models.User`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.User)
	fc.Result = res
	return ec.marshalNUser2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_assignFacultyAdmin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "studentID":
				return ec.fieldContext_User_studentID(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "role":
				return ec.fieldContext_User_role(ctx, field)
			case "qrSecret":
				return ec.fieldContext_User_qrSecret(ctx, field)
			case "faculty":
				return ec.fieldContext_User_faculty(ctx, field)
			case "department":
				return ec.fieldContext_User_department(ctx, field)
			case "isActive":
				return ec.fieldContext_User_isActive(ctx, field)
			case "lastLoginAt":
				return ec.fieldContext_User_lastLoginAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "participations":
				return ec.fieldContext_User_participations(ctx, field)
			case "subscriptions":
				return ec.fieldContext_User_subscriptions(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_assignFacultyAdmin_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_assignRegularAdmin(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_assignRegularAdmin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().AssignRegularAdmin(rctx, fc.Args["userID"].(string), fc.Args["facultyID"].(string), fc.Args["departmentID"].(*string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			roles, err := ec.unmarshalNUserRole2ᚕgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUserRoleᚄ(ctx, []any{"SUPER_ADMIN", "FACULTY_ADMIN"})
			if err != nil {
				var zeroVal *models.User
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *models.User
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.User); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/kruakemaths/tru-activity/backend/internal/models.User`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.User)
	fc.Result = res
	return ec.marshalNUser2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_assignRegularAdmin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "studentID":
				return ec.fieldContext_User_studentID(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "role":
				return ec.fieldContext_User_role(ctx, field)
			case "qrSecret":
				return ec.fieldContext_User_qrSecret(ctx, field)
			case "faculty":
				return ec.fieldContext_User_faculty(ctx, field)
			case "department":
				return ec.fieldContext_User_department(ctx, field)
			case "isActive":
				return ec.fieldContext_User_isActive(ctx, field)
			case "lastLoginAt":
				return ec.fieldContext_User_lastLoginAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "participations":
				return ec.fieldContext_User_participations(ctx, field)
			case "subscriptions":
				return ec.fieldContext_User_subscriptions(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_assignRegularAdmin_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_removeAdminRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_removeAdminRole(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().RemoveAdminRole(rctx, fc.Args["userID"].(string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			roles, err := ec.unmarshalNUserRole2ᚕgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUserRoleᚄ(ctx, []any{"SUPER_ADMIN", "FACULTY_ADMIN"})
			if err != nil {
				var zeroVal *models.User
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *models.User
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.User); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/kruakemaths/tru-activity/backend/internal/models.User`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.User)
	fc.Result = res
	return ec.marshalNUser2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_removeAdminRole(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "studentID":
				return ec.fieldContext_User_studentID(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "role":
				return ec.fieldContext_User_role(ctx, field)
			case "qrSecret":
				return ec.fieldContext_User_qrSecret(ctx, field)
			case "faculty":
				return ec.fieldContext_User_faculty(ctx, field)
			case "department":
				return ec.fieldContext_User_department(ctx, field)
			case "isActive":
				return ec.fieldContext_User_isActive(ctx, field)
			case "lastLoginAt":
				return ec.fieldContext_User_lastLoginAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "participations":
				return ec.fieldContext_User_participations(ctx, field)
			case "subscriptions":
				return ec.fieldContext_User_subscriptions(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_removeAdminRole_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createActivityTemplate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createActivityTemplate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateActivityTemplate(rctx, fc.Args["input"].(model.CreateActivityTemplateInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			roles, err := ec.unmarshalNUserRole2ᚕgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUserRoleᚄ(ctx, []any{"SUPER_ADMIN", "FACULTY_ADMIN"})
			if err != nil {
				var zeroVal *models.ActivityTemplate
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *models.ActivityTemplate
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.ActivityTemplate); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/kruakemaths/tru-activity/backend/internal/models.ActivityTemplate`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.ActivityTemplate)
	fc.Result = res
	return ec.marshalNActivityTemplate2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐActivityTemplate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createActivityTemplate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ActivityTemplate_id(ctx, field)
			case "name":
				return ec.fieldContext_ActivityTemplate_name(ctx, field)
			case "description":
				return ec.fieldContext_ActivityTemplate_description(ctx, field)
			case "type":
				return ec.fieldContext_ActivityTemplate_type(ctx, field)
			case "defaultDuration":
				return ec.fieldContext_ActivityTemplate_defaultDuration(ctx, field)
			case "location":
				return ec.fieldContext_ActivityTemplate_location(ctx, field)
			case "maxParticipants":
				return ec.fieldContext_ActivityTemplate_maxParticipants(ctx, field)
			case "requireApproval":
				return ec.fieldContext_ActivityTemplate_requireApproval(ctx, field)
			case "points":
				return ec.fieldContext_ActivityTemplate_points(ctx, field)
			case "qrCodeRequired":
				return ec.fieldContext_ActivityTemplate_qrCodeRequired(ctx, field)
			case "autoApprove":
				return ec.fieldContext_ActivityTemplate_autoApprove(ctx, field)
			case "faculty":
				return ec.fieldContext_ActivityTemplate_faculty(ctx, field)
			case "createdBy":
				return ec.fieldContext_ActivityTemplate_createdBy(ctx, field)
			case "isActive":
				return ec.fieldContext_ActivityTemplate_isActive(ctx, field)
			case "createdAt":
				return ec.fieldContext_ActivityTemplate_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ActivityTemplate_updatedAt(ctx, field)
			case "activities":
				return ec.fieldContext_ActivityTemplate_activities(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActivityTemplate", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createActivityTemplate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateActivityTemplate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateActivityTemplate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateActivityTemplate(rctx, fc.Args["id"].(string), fc.Args["input"].(model.UpdateActivityTemplateInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			roles, err := ec.unmarshalNUserRole2ᚕgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUserRoleᚄ(ctx, []any{"SUPER_ADMIN", "FACULTY_ADMIN"})
			if err != nil {
				var zeroVal *models.ActivityTemplate
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *models.ActivityTemplate
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.ActivityTemplate); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/kruakemaths/tru-activity/backend/internal/models.ActivityTemplate`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.ActivityTemplate)
	fc.Result = res
	return ec.marshalNActivityTemplate2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐActivityTemplate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateActivityTemplate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ActivityTemplate_id(ctx, field)
			case "name":
				return ec.fieldContext_ActivityTemplate_name(ctx, field)
			case "description":
				return ec.fieldContext_ActivityTemplate_description(ctx, field)
			case "type":
				return ec.fieldContext_ActivityTemplate_type(ctx, field)
			case "defaultDuration":
				return ec.fieldContext_ActivityTemplate_defaultDuration(ctx, field)
			case "location":
				return ec.fieldContext_ActivityTemplate_location(ctx, field)
			case "maxParticipants":
				return ec.fieldContext_ActivityTemplate_maxParticipants(ctx, field)
			case "requireApproval":
				return ec.fieldContext_ActivityTemplate_requireApproval(ctx, field)
			case "points":
				return ec.fieldContext_ActivityTemplate_points(ctx, field)
			case "qrCodeRequired":
				return ec.fieldContext_ActivityTemplate_qrCodeRequired(ctx, field)
			case "autoApprove":
				return ec.fieldContext_ActivityTemplate_autoApprove(ctx, field)
			case "faculty":
				return ec.fieldContext_ActivityTemplate_faculty(ctx, field)
			case "createdBy":
				return ec.fieldContext_ActivityTemplate_createdBy(ctx, field)
			case "isActive":
				return ec.fieldContext_ActivityTemplate_isActive(ctx, field)
			case "createdAt":
				return ec.fieldContext_ActivityTemplate_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ActivityTemplate_updatedAt(ctx, field)
			case "activities":
				return ec.fieldContext_ActivityTemplate_activities(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActivityTemplate", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateActivityTemplate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteActivityTemplate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteActivityTemplate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteActivityTemplate(rctx, fc.Args["id"].(string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			roles, err := ec.unmarshalNUserRole2ᚕgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUserRoleᚄ(ctx, []any{"SUPER_ADMIN", "FACULTY_ADMIN"})
			if err != nil {
				var zeroVal bool
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal bool
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteActivityTemplate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteActivityTemplate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_assignActivity(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_assignActivity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().AssignActivity(rctx, fc.Args["input"].(model.CreateActivityAssignmentInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			roles, err := ec.unmarshalNUserRole2ᚕgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUserRoleᚄ(ctx, []any{"SUPER_ADMIN", "FACULTY_ADMIN"})
			if err != nil {
				var zeroVal *models.ActivityAssignment
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *models.ActivityAssignment
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.ActivityAssignment); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/kruakemaths/tru-activity/backend/internal/models.ActivityAssignment`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.ActivityAssignment)
	fc.Result = res
	return ec.marshalNActivityAssignment2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐActivityAssignment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_assignActivity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ActivityAssignment_id(ctx, field)
			case "activity":
				return ec.fieldContext_ActivityAssignment_activity(ctx, field)
			case "admin":
				return ec.fieldContext_ActivityAssignment_admin(ctx, field)
			case "assignedBy":
				return ec.fieldContext_ActivityAssignment_assignedBy(ctx, field)
			case "canScanQR":
				return ec.fieldContext_ActivityAssignment_canScanQR(ctx, field)
			case "canApprove":
				return ec.fieldContext_ActivityAssignment_canApprove(ctx, field)
			case "notes":
				return ec.fieldContext_ActivityAssignment_notes(ctx, field)
			case "createdAt":
				return ec.fieldContext_ActivityAssignment_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ActivityAssignment_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActivityAssignment", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_assignActivity_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateActivityAssignment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateActivityAssignment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateActivityAssignment(rctx, fc.Args["id"].(string), fc.Args["input"].(model.UpdateActivityAssignmentInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			roles, err := ec.unmarshalNUserRole2ᚕgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUserRoleᚄ(ctx, []any{"SUPER_ADMIN", "FACULTY_ADMIN"})
			if err != nil {
				var zeroVal *models.ActivityAssignment
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *models.ActivityAssignment
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.ActivityAssignment); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/kruakemaths/tru-activity/backend/internal/models.ActivityAssignment`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.ActivityAssignment)
	fc.Result = res
	return ec.marshalNActivityAssignment2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐActivityAssignment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateActivityAssignment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ActivityAssignment_id(ctx, field)
			case "activity":
				return ec.fieldContext_ActivityAssignment_activity(ctx, field)
			case "admin":
				return ec.fieldContext_ActivityAssignment_admin(ctx, field)
			case "assignedBy":
				return ec.fieldContext_ActivityAssignment_assignedBy(ctx, field)
			case "canScanQR":
				return ec.fieldContext_ActivityAssignment_canScanQR(ctx, field)
			case "canApprove":
				return ec.fieldContext_ActivityAssignment_canApprove(ctx, field)
			case "notes":
				return ec.fieldContext_ActivityAssignment_notes(ctx, field)
			case "createdAt":
				return ec.fieldContext_ActivityAssignment_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ActivityAssignment_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActivityAssignment", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateActivityAssignment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_removeActivityAssignment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_removeActivityAssignment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().RemoveActivityAssignment(rctx, fc.Args["id"].(string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			roles, err := ec.unmarshalNUserRole2ᚕgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUserRoleᚄ(ctx, []any{"SUPER_ADMIN", "FACULTY_ADMIN"})
			if err != nil {
				var zeroVal bool
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal bool
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_removeActivityAssignment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_removeActivityAssignment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_scanQRCode(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_scanQRCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().ScanQRCode(rctx, fc.Args["input"].(model.QRScanInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			roles, err := ec.unmarshalNUserRole2ᚕgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUserRoleᚄ(ctx, []any{"SUPER_ADMIN", "FACULTY_ADMIN", "REGULAR_ADMIN"})
			if err != nil {
				var zeroVal *model.QRScanResult
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *model.QRScanResult
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.QRScanResult); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/kruakemaths/tru-activity/backend/graph/model.QRScanResult`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.QRScanResult)
	fc.Result = res
	return ec.marshalNQRScanResult2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐQRScanResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_scanQRCode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "success":
				return ec.fieldContext_QRScanResult_success(ctx, field)
			case "message":
				return ec.fieldContext_QRScanResult_message(ctx, field)
			case "participation":
				return ec.fieldContext_QRScanResult_participation(ctx, field)
			case "user":
				return ec.fieldContext_QRScanResult_user(ctx, field)
			case "scanLog":
				return ec.fieldContext_QRScanResult_scanLog(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type QRScanResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_scanQRCode_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_refreshMyQRSecret(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_refreshMyQRSecret(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().RefreshMyQRSecret(rctx)
		}

		directive1 := func(ctx context.Context) (any, error) {
			if ec.directives.Auth == nil {
				var zeroVal *model.QRData
				return zeroVal, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.QRData); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/kruakemaths/tru-activity/backend/graph/model.QRData`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.QRData)
	fc.Result = res
	return ec.marshalNQRData2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐQRData(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_refreshMyQRSecret(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "studentID":
				return ec.fieldContext_QRData_studentID(ctx, field)
			case "timestamp":
				return ec.fieldContext_QRData_timestamp(ctx, field)
			case "signature":
				return ec.fieldContext_QRData_signature(ctx, field)
			case "version":
				return ec.fieldContext_QRData_version(ctx, field)
			case "qrString":
				return ec.fieldContext_QRData_qrString(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type QRData", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_refreshUserQRSecret(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_refreshUserQRSecret(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().RefreshUserQRSecret(rctx, fc.Args["userID"].(string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			roles, err := ec.unmarshalNUserRole2ᚕgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUserRoleᚄ(ctx, []any{"SUPER_ADMIN", "FACULTY_ADMIN"})
			if err != nil {
				var zeroVal *model.QRData
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *model.QRData
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.QRData); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/kruakemaths/tru-activity/backend/graph/model.QRData`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.QRData)
	fc.Result = res
	return ec.marshalNQRData2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐQRData(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_refreshUserQRSecret(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "studentID":
				return ec.fieldContext_QRData_studentID(ctx, field)
			case "timestamp":
				return ec.fieldContext_QRData_timestamp(ctx, field)
			case "signature":
				return ec.fieldContext_QRData_signature(ctx, field)
			case "version":
				return ec.fieldContext_QRData_version(ctx, field)
			case "qrString":
				return ec.fieldContext_QRData_qrString(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type QRData", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_refreshUserQRSecret_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _NotificationLog_id(ctx context.Context, field graphql.CollectedField, obj *models.NotificationLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NotificationLog_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.NotificationLog().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NotificationLog_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NotificationLog",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NotificationLog_subscription(ctx context.Context, field graphql.CollectedField, obj *models.NotificationLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NotificationLog_subscription(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.NotificationLog().Subscription(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.FacultySubscription)
	fc.Result = res
	return ec.marshalNFacultySubscription2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐFacultySubscription(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NotificationLog_subscription(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NotificationLog",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_FacultySubscription_id(ctx, field)
			case "faculty":
				return ec.fieldContext_FacultySubscription_faculty(ctx, field)
			case "type":
				return ec.fieldContext_FacultySubscription_type(ctx, field)
			case "status":
				return ec.fieldContext_FacultySubscription_status(ctx, field)
			case "startDate":
				return ec.fieldContext_FacultySubscription_startDate(ctx, field)
			case "endDate":
				return ec.fieldContext_FacultySubscription_endDate(ctx, field)
			case "daysUntilExpiry":
				return ec.fieldContext_FacultySubscription_daysUntilExpiry(ctx, field)
			case "needsNotification":
				return ec.fieldContext_FacultySubscription_needsNotification(ctx, field)
			case "createdAt":
				return ec.fieldContext_FacultySubscription_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_FacultySubscription_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FacultySubscription", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _NotificationLog_type(ctx context.Context, field graphql.CollectedField, obj *models.NotificationLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NotificationLog_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.NotificationLog().Type(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NotificationLog_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NotificationLog",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NotificationLog_status(ctx context.Context, field graphql.CollectedField, obj *models.NotificationLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NotificationLog_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.NotificationLog().Status(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NotificationLog_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NotificationLog",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NotificationLog_email(ctx context.Context, field graphql.CollectedField, obj *models.NotificationLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NotificationLog_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NotificationLog_email(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NotificationLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NotificationLog_subject(ctx context.Context, field graphql.CollectedField, obj *models.NotificationLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NotificationLog_subject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NotificationLog_subject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NotificationLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NotificationLog_message(ctx context.Context, field graphql.CollectedField, obj *models.NotificationLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NotificationLog_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NotificationLog_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NotificationLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NotificationLog_sentAt(ctx context.Context, field graphql.CollectedField, obj *models.NotificationLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NotificationLog_sentAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SentAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NotificationLog_sentAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NotificationLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NotificationLog_errorMessage(ctx context.Context, field graphql.CollectedField, obj *models.NotificationLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NotificationLog_errorMessage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ErrorMessage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NotificationLog_errorMessage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NotificationLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NotificationLog_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.NotificationLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NotificationLog_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NotificationLog_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NotificationLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NotificationLog_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models.NotificationLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NotificationLog_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NotificationLog_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NotificationLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Participation_id(ctx context.Context, field graphql.CollectedField, obj *models.Participation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Participation_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Participation().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Participation_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Participation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Participation_user(ctx context.Context, field graphql.CollectedField, obj *models.Participation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Participation_user(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.User)
	fc.Result = res
	return ec.marshalNUser2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Participation_user(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Participation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "studentID":
				return ec.fieldContext_User_studentID(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "role":
				return ec.fieldContext_User_role(ctx, field)
			case "qrSecret":
				return ec.fieldContext_User_qrSecret(ctx, field)
			case "faculty":
				return ec.fieldContext_User_faculty(ctx, field)
			case "department":
				return ec.fieldContext_User_department(ctx, field)
			case "isActive":
				return ec.fieldContext_User_isActive(ctx, field)
			case "lastLoginAt":
				return ec.fieldContext_User_lastLoginAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "participations":
				return ec.fieldContext_User_participations(ctx, field)
			case "subscriptions":
				return ec.fieldContext_User_subscriptions(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Participation_activity(ctx context.Context, field graphql.CollectedField, obj *models.Participation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Participation_activity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Activity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.Activity)
	fc.Result = res
	return ec.marshalNActivity2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐActivity(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Participation_activity(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Participation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Activity_id(ctx, field)
			case "title":
				return ec.fieldContext_Activity_title(ctx, field)
			case "description":
				return ec.fieldContext_Activity_description(ctx, field)
			case "type":
				return ec.fieldContext_Activity_type(ctx, field)
			case "status":
				return ec.fieldContext_Activity_status(ctx, field)
			case "startDate":
				return ec.fieldContext_Activity_startDate(ctx, field)
			case "endDate":
				return ec.fieldContext_Activity_endDate(ctx, field)
			case "location":
				return ec.fieldContext_Activity_location(ctx, field)
			case "maxParticipants":
				return ec.fieldContext_Activity_maxParticipants(ctx, field)
			case "requireApproval":
				return ec.fieldContext_Activity_requireApproval(ctx, field)
			case "points":
				return ec.fieldContext_Activity_points(ctx, field)
			case "faculty":
				return ec.fieldContext_Activity_faculty(ctx, field)
			case "department":
				return ec.fieldContext_Activity_department(ctx, field)
			case "createdBy":
				return ec.fieldContext_Activity_createdBy(ctx, field)
			case "template":
				return ec.fieldContext_Activity_template(ctx, field)
			case "isRecurring":
				return ec.fieldContext_Activity_isRecurring(ctx, field)
			case "recurrenceRule":
				return ec.fieldContext_Activity_recurrenceRule(ctx, field)
			case "parentActivity":
				return ec.fieldContext_Activity_parentActivity(ctx, field)
			case "qrCodeRequired":
				return ec.fieldContext_Activity_qrCodeRequired(ctx, field)
			case "autoApprove":
				return ec.fieldContext_Activity_autoApprove(ctx, field)
			case "createdAt":
				return ec.fieldContext_Activity_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Activity_updatedAt(ctx, field)
			case "participations":
				return ec.fieldContext_Activity_participations(ctx, field)
			case "assignments":
				return ec.fieldContext_Activity_assignments(ctx, field)
			case "childActivities":
				return ec.fieldContext_Activity_childActivities(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Activity", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Participation_status(ctx context.Context, field graphql.CollectedField, obj *models.Participation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Participation_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.ParticipationStatus)
	fc.Result = res
	return ec.marshalNParticipationStatus2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐParticipationStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Participation_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Participation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ParticipationStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Participation_registeredAt(ctx context.Context, field graphql.CollectedField, obj *models.Participation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Participation_registeredAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegisteredAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Participation_registeredAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Participation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Participation_approvedAt(ctx context.Context, field graphql.CollectedField, obj *models.Participation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Participation_approvedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApprovedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Participation_approvedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Participation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Participation_attendedAt(ctx context.Context, field graphql.CollectedField, obj *models.Participation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Participation_attendedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AttendedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Participation_attendedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Participation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Participation_qrScannedAt(ctx context.Context, field graphql.CollectedField, obj *models.Participation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Participation_qrScannedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QRScannedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Participation_qrScannedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Participation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Participation_scannedBy(ctx context.Context, field graphql.CollectedField, obj *models.Participation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Participation_scannedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScannedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Participation_scannedBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Participation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "studentID":
				return ec.fieldContext_User_studentID(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "role":
				return ec.fieldContext_User_role(ctx, field)
			case "qrSecret":
				return ec.fieldContext_User_qrSecret(ctx, field)
			case "faculty":
				return ec.fieldContext_User_faculty(ctx, field)
			case "department":
				return ec.fieldContext_User_department(ctx, field)
			case "isActive":
				return ec.fieldContext_User_isActive(ctx, field)
			case "lastLoginAt":
				return ec.fieldContext_User_lastLoginAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "participations":
				return ec.fieldContext_User_participations(ctx, field)
			case "subscriptions":
				return ec.fieldContext_User_subscriptions(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Participation_scanLocation(ctx context.Context, field graphql.CollectedField, obj *models.Participation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Participation_scanLocation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScanLocation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Participation_scanLocation(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Participation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Participation_notes(ctx context.Context, field graphql.CollectedField, obj *models.Participation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Participation_notes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Notes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Participation_notes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Participation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Participation_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.Participation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Participation_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Participation_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Participation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Participation_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models.Participation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Participation_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Participation_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Participation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QRData_studentID(ctx context.Context, field graphql.CollectedField, obj *model.QRData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QRData_studentID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StudentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QRData_studentID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QRData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QRData_timestamp(ctx context.Context, field graphql.CollectedField, obj *model.QRData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QRData_timestamp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Timestamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QRData_timestamp(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QRData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QRData_signature(ctx context.Context, field graphql.CollectedField, obj *model.QRData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QRData_signature(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Signature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QRData_signature(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QRData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QRData_version(ctx context.Context, field graphql.CollectedField, obj *model.QRData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QRData_version(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QRData_version(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QRData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QRData_qrString(ctx context.Context, field graphql.CollectedField, obj *model.QRData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QRData_qrString(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QRString, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QRData_qrString(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QRData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QRScanLog_id(ctx context.Context, field graphql.CollectedField, obj *models.QRScanLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QRScanLog_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.QRScanLog().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QRScanLog_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QRScanLog",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QRScanLog_studentID(ctx context.Context, field graphql.CollectedField, obj *models.QRScanLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QRScanLog_studentID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StudentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QRScanLog_studentID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QRScanLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QRScanLog_user(ctx context.Context, field graphql.CollectedField, obj *models.QRScanLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QRScanLog_user(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QRScanLog_user(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QRScanLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "studentID":
				return ec.fieldContext_User_studentID(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "role":
				return ec.fieldContext_User_role(ctx, field)
			case "qrSecret":
				return ec.fieldContext_User_qrSecret(ctx, field)
			case "faculty":
				return ec.fieldContext_User_faculty(ctx, field)
			case "department":
				return ec.fieldContext_User_department(ctx, field)
			case "isActive":
				return ec.fieldContext_User_isActive(ctx, field)
			case "lastLoginAt":
				return ec.fieldContext_User_lastLoginAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "participations":
				return ec.fieldContext_User_participations(ctx, field)
			case "subscriptions":
				return ec.fieldContext_User_subscriptions(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _QRScanLog_activity(ctx context.Context, field graphql.CollectedField, obj *models.QRScanLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QRScanLog_activity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Activity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.Activity)
	fc.Result = res
	return ec.marshalNActivity2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐActivity(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QRScanLog_activity(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QRScanLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Activity_id(ctx, field)
			case "title":
				return ec.fieldContext_Activity_title(ctx, field)
			case "description":
				return ec.fieldContext_Activity_description(ctx, field)
			case "type":
				return ec.fieldContext_Activity_type(ctx, field)
			case "status":
				return ec.fieldContext_Activity_status(ctx, field)
			case "startDate":
				return ec.fieldContext_Activity_startDate(ctx, field)
			case "endDate":
				return ec.fieldContext_Activity_endDate(ctx, field)
			case "location":
				return ec.fieldContext_Activity_location(ctx, field)
			case "maxParticipants":
				return ec.fieldContext_Activity_maxParticipants(ctx, field)
			case "requireApproval":
				return ec.fieldContext_Activity_requireApproval(ctx, field)
			case "points":
				return ec.fieldContext_Activity_points(ctx, field)
			case "faculty":
				return ec.fieldContext_Activity_faculty(ctx, field)
			case "department":
				return ec.fieldContext_Activity_department(ctx, field)
			case "createdBy":
				return ec.fieldContext_Activity_createdBy(ctx, field)
			case "template":
				return ec.fieldContext_Activity_template(ctx, field)
			case "isRecurring":
				return ec.fieldContext_Activity_isRecurring(ctx, field)
			case "recurrenceRule":
				return ec.fieldContext_Activity_recurrenceRule(ctx, field)
			case "parentActivity":
				return ec.fieldContext_Activity_parentActivity(ctx, field)
			case "qrCodeRequired":
				return ec.fieldContext_Activity_qrCodeRequired(ctx, field)
			case "autoApprove":
				return ec.fieldContext_Activity_autoApprove(ctx, field)
			case "createdAt":
				return ec.fieldContext_Activity_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Activity_updatedAt(ctx, field)
			case "participations":
				return ec.fieldContext_Activity_participations(ctx, field)
			case "assignments":
				return ec.fieldContext_Activity_assignments(ctx, field)
			case "childActivities":
				return ec.fieldContext_Activity_childActivities(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Activity", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _QRScanLog_scannedBy(ctx context.Context, field graphql.CollectedField, obj *models.QRScanLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QRScanLog_scannedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScannedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.User)
	fc.Result = res
	return ec.marshalNUser2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QRScanLog_scannedBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QRScanLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "studentID":
				return ec.fieldContext_User_studentID(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "role":
				return ec.fieldContext_User_role(ctx, field)
			case "qrSecret":
				return ec.fieldContext_User_qrSecret(ctx, field)
			case "faculty":
				return ec.fieldContext_User_faculty(ctx, field)
			case "department":
				return ec.fieldContext_User_department(ctx, field)
			case "isActive":
				return ec.fieldContext_User_isActive(ctx, field)
			case "lastLoginAt":
				return ec.fieldContext_User_lastLoginAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "participations":
				return ec.fieldContext_User_participations(ctx, field)
			case "subscriptions":
				return ec.fieldContext_User_subscriptions(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _QRScanLog_scanTimestamp(ctx context.Context, field graphql.CollectedField, obj *models.QRScanLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QRScanLog_scanTimestamp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScanTimestamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QRScanLog_scanTimestamp(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QRScanLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QRScanLog_qrTimestamp(ctx context.Context, field graphql.CollectedField, obj *models.QRScanLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QRScanLog_qrTimestamp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QRTimestamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QRScanLog_qrTimestamp(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QRScanLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QRScanLog_valid(ctx context.Context, field graphql.CollectedField, obj *models.QRScanLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QRScanLog_valid(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Valid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QRScanLog_valid(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QRScanLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QRScanLog_errorMessage(ctx context.Context, field graphql.CollectedField, obj *models.QRScanLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QRScanLog_errorMessage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ErrorMessage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QRScanLog_errorMessage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QRScanLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QRScanLog_scanLocation(ctx context.Context, field graphql.CollectedField, obj *models.QRScanLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QRScanLog_scanLocation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScanLocation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QRScanLog_scanLocation(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QRScanLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QRScanLog_ipAddress(ctx context.Context, field graphql.CollectedField, obj *models.QRScanLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QRScanLog_ipAddress(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IPAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QRScanLog_ipAddress(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QRScanLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QRScanLog_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.QRScanLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QRScanLog_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QRScanLog_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QRScanLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QRScanResult_success(ctx context.Context, field graphql.CollectedField, obj *model.QRScanResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QRScanResult_success(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Success, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QRScanResult_success(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QRScanResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QRScanResult_message(ctx context.Context, field graphql.CollectedField, obj *model.QRScanResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QRScanResult_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QRScanResult_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QRScanResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QRScanResult_participation(ctx context.Context, field graphql.CollectedField, obj *model.QRScanResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QRScanResult_participation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Participation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Participation)
	fc.Result = res
	return ec.marshalOParticipation2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐParticipation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QRScanResult_participation(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QRScanResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Participation_id(ctx, field)
			case "user":
				return ec.fieldContext_Participation_user(ctx, field)
			case "activity":
				return ec.fieldContext_Participation_activity(ctx, field)
			case "status":
				return ec.fieldContext_Participation_status(ctx, field)
			case "registeredAt":
				return ec.fieldContext_Participation_registeredAt(ctx, field)
			case "approvedAt":
				return ec.fieldContext_Participation_approvedAt(ctx, field)
			case "attendedAt":
				return ec.fieldContext_Participation_attendedAt(ctx, field)
			case "qrScannedAt":
				return ec.fieldContext_Participation_qrScannedAt(ctx, field)
			case "scannedBy":
				return ec.fieldContext_Participation_scannedBy(ctx, field)
			case "scanLocation":
				return ec.fieldContext_Participation_scanLocation(ctx, field)
			case "notes":
				return ec.fieldContext_Participation_notes(ctx, field)
			case "createdAt":
				return ec.fieldContext_Participation_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Participation_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Participation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _QRScanResult_user(ctx context.Context, field graphql.CollectedField, obj *model.QRScanResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QRScanResult_user(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QRScanResult_user(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QRScanResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "studentID":
				return ec.fieldContext_User_studentID(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "role":
				return ec.fieldContext_User_role(ctx, field)
			case "qrSecret":
				return ec.fieldContext_User_qrSecret(ctx, field)
			case "faculty":
				return ec.fieldContext_User_faculty(ctx, field)
			case "department":
				return ec.fieldContext_User_department(ctx, field)
			case "isActive":
				return ec.fieldContext_User_isActive(ctx, field)
			case "lastLoginAt":
				return ec.fieldContext_User_lastLoginAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "participations":
				return ec.fieldContext_User_participations(ctx, field)
			case "subscriptions":
				return ec.fieldContext_User_subscriptions(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _QRScanResult_scanLog(ctx context.Context, field graphql.CollectedField, obj *model.QRScanResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QRScanResult_scanLog(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScanLog, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.QRScanLog)
	fc.Result = res
	return ec.marshalOQRScanLog2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐQRScanLog(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QRScanResult_scanLog(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QRScanResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_QRScanLog_id(ctx, field)
			case "studentID":
				return ec.fieldContext_QRScanLog_studentID(ctx, field)
			case "user":
				return ec.fieldContext_QRScanLog_user(ctx, field)
			case "activity":
				return ec.fieldContext_QRScanLog_activity(ctx, field)
			case "scannedBy":
				return ec.fieldContext_QRScanLog_scannedBy(ctx, field)
			case "scanTimestamp":
				return ec.fieldContext_QRScanLog_scanTimestamp(ctx, field)
			case "qrTimestamp":
				return ec.fieldContext_QRScanLog_qrTimestamp(ctx, field)
			case "valid":
				return ec.fieldContext_QRScanLog_valid(ctx, field)
			case "errorMessage":
				return ec.fieldContext_QRScanLog_errorMessage(ctx, field)
			case "scanLocation":
				return ec.fieldContext_QRScanLog_scanLocation(ctx, field)
			case "ipAddress":
				return ec.fieldContext_QRScanLog_ipAddress(ctx, field)
			case "createdAt":
				return ec.fieldContext_QRScanLog_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type QRScanLog", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_me(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_me(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Me(rctx)
		}

		directive1 := func(ctx context.Context) (any, error) {
			if ec.directives.Auth == nil {
				var zeroVal *models.User
				return zeroVal, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.User); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/kruakemaths/tru-activity/backend/internal/models.User`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_me(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "studentID":
				return ec.fieldContext_User_studentID(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "role":
				return ec.fieldContext_User_role(ctx, field)
			case "qrSecret":
				return ec.fieldContext_User_qrSecret(ctx, field)
			case "faculty":
				return ec.fieldContext_User_faculty(ctx, field)
			case "department":
				return ec.fieldContext_User_department(ctx, field)
			case "isActive":
				return ec.fieldContext_User_isActive(ctx, field)
			case "lastLoginAt":
				return ec.fieldContext_User_lastLoginAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "participations":
				return ec.fieldContext_User_participations(ctx, field)
			case "subscriptions":
				return ec.fieldContext_User_subscriptions(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_users(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_users(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Users(rctx, fc.Args["limit"].(*int), fc.Args["offset"].(*int))
		}

		directive1 := func(ctx context.Context) (any, error) {
			roles, err := ec.unmarshalNUserRole2ᚕgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUserRoleᚄ(ctx, []any{"SUPER_ADMIN", "FACULTY_ADMIN", "REGULAR_ADMIN"})
			if err != nil {
				var zeroVal []*models.User
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal []*models.User
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.User); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/kruakemaths/tru-activity/backend/internal/models.User`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.User)
	fc.Result = res
	return ec.marshalNUser2ᚕᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUserᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_users(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "studentID":
				return ec.fieldContext_User_studentID(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "role":
				return ec.fieldContext_User_role(ctx, field)
			case "qrSecret":
				return ec.fieldContext_User_qrSecret(ctx, field)
			case "faculty":
				return ec.fieldContext_User_faculty(ctx, field)
			case "department":
				return ec.fieldContext_User_department(ctx, field)
			case "isActive":
				return ec.fieldContext_User_isActive(ctx, field)
			case "lastLoginAt":
				return ec.fieldContext_User_lastLoginAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "participations":
				return ec.fieldContext_User_participations(ctx, field)
			case "subscriptions":
				return ec.fieldContext_User_subscriptions(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_users_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_user(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_user(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().User(rctx, fc.Args["id"].(string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			if ec.directives.Auth == nil {
				var zeroVal *models.User
				return zeroVal, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.User); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/kruakemaths/tru-activity/backend/internal/models.User`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_user(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "studentID":
				return ec.fieldContext_User_studentID(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "role":
				return ec.fieldContext_User_role(ctx, field)
			case "qrSecret":
				return ec.fieldContext_User_qrSecret(ctx, field)
			case "faculty":
				return ec.fieldContext_User_faculty(ctx, field)
			case "department":
				return ec.fieldContext_User_department(ctx, field)
			case "isActive":
				return ec.fieldContext_User_isActive(ctx, field)
			case "lastLoginAt":
				return ec.fieldContext_User_lastLoginAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "participations":
				return ec.fieldContext_User_participations(ctx, field)
			case "subscriptions":
				return ec.fieldContext_User_subscriptions(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_user_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_faculties(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_faculties(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Faculties(rctx)
		}

		directive1 := func(ctx context.Context) (any, error) {
			if ec.directives.Auth == nil {
				var zeroVal []*models.Faculty
				return zeroVal, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.Faculty); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/kruakemaths/tru-activity/backend/internal/models.Faculty`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.Faculty)
	fc.Result = res
	return ec.marshalNFaculty2ᚕᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐFacultyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_faculties(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Faculty_id(ctx, field)
			case "name":
				return ec.fieldContext_Faculty_name(ctx, field)
			case "code":
				return ec.fieldContext_Faculty_code(ctx, field)
			case "description":
				return ec.fieldContext_Faculty_description(ctx, field)
			case "isActive":
				return ec.fieldContext_Faculty_isActive(ctx, field)
			case "createdAt":
				return ec.fieldContext_Faculty_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Faculty_updatedAt(ctx, field)
			case "departments":
				return ec.fieldContext_Faculty_departments(ctx, field)
			case "users":
				return ec.fieldContext_Faculty_users(ctx, field)
			case "activities":
				return ec.fieldContext_Faculty_activities(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Faculty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_faculty(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_faculty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Faculty(rctx, fc.Args["id"].(string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			if ec.directives.Auth == nil {
				var zeroVal *models.Faculty
				return zeroVal, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.Faculty); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/kruakemaths/tru-activity/backend/internal/models.Faculty`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Faculty)
	fc.Result = res
	return ec.marshalOFaculty2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐFaculty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_faculty(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Faculty_id(ctx, field)
			case "name":
				return ec.fieldContext_Faculty_name(ctx, field)
			case "code":
				return ec.fieldContext_Faculty_code(ctx, field)
			case "description":
				return ec.fieldContext_Faculty_description(ctx, field)
			case "isActive":
				return ec.fieldContext_Faculty_isActive(ctx, field)
			case "createdAt":
				return ec.fieldContext_Faculty_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Faculty_updatedAt(ctx, field)
			case "departments":
				return ec.fieldContext_Faculty_departments(ctx, field)
			case "users":
				return ec.fieldContext_Faculty_users(ctx, field)
			case "activities":
				return ec.fieldContext_Faculty_activities(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Faculty", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_faculty_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_departments(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_departments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Departments(rctx, fc.Args["facultyID"].(*string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			if ec.directives.Auth == nil {
				var zeroVal []*models.Department
				return zeroVal, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.Department); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/kruakemaths/tru-activity/backend/internal/models.Department`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.Department)
	fc.Result = res
	return ec.marshalNDepartment2ᚕᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐDepartmentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_departments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Department_id(ctx, field)
			case "name":
				return ec.fieldContext_Department_name(ctx, field)
			case "code":
				return ec.fieldContext_Department_code(ctx, field)
			case "faculty":
				return ec.fieldContext_Department_faculty(ctx, field)
			case "isActive":
				return ec.fieldContext_Department_isActive(ctx, field)
			case "createdAt":
				return ec.fieldContext_Department_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Department_updatedAt(ctx, field)
			case "users":
				return ec.fieldContext_Department_users(ctx, field)
			case "activities":
				return ec.fieldContext_Department_activities(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Department", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_departments_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_department(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_department(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Department(rctx, fc.Args["id"].(string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			if ec.directives.Auth == nil {
				var zeroVal *models.Department
				return zeroVal, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.Department); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/kruakemaths/tru-activity/backend/internal/models.Department`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Department)
	fc.Result = res
	return ec.marshalODepartment2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐDepartment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_department(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Department_id(ctx, field)
			case "name":
				return ec.fieldContext_Department_name(ctx, field)
			case "code":
				return ec.fieldContext_Department_code(ctx, field)
			case "faculty":
				return ec.fieldContext_Department_faculty(ctx, field)
			case "isActive":
				return ec.fieldContext_Department_isActive(ctx, field)
			case "createdAt":
				return ec.fieldContext_Department_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Department_updatedAt(ctx, field)
			case "users":
				return ec.fieldContext_Department_users(ctx, field)
			case "activities":
				return ec.fieldContext_Department_activities(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Department", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_department_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_activities(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_activities(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Activities(rctx, fc.Args["limit"].(*int), fc.Args["offset"].(*int), fc.Args["facultyID"].(*string), fc.Args["status"].(*models.ActivityStatus))
		}

		directive1 := func(ctx context.Context) (any, error) {
			if ec.directives.Auth == nil {
				var zeroVal []*models.Activity
				return zeroVal, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.Activity); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/kruakemaths/tru-activity/backend/internal/models.Activity`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.Activity)
	fc.Result = res
	return ec.marshalNActivity2ᚕᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐActivityᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_activities(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Activity_id(ctx, field)
			case "title":
				return ec.fieldContext_Activity_title(ctx, field)
			case "description":
				return ec.fieldContext_Activity_description(ctx, field)
			case "type":
				return ec.fieldContext_Activity_type(ctx, field)
			case "status":
				return ec.fieldContext_Activity_status(ctx, field)
			case "startDate":
				return ec.fieldContext_Activity_startDate(ctx, field)
			case "endDate":
				return ec.fieldContext_Activity_endDate(ctx, field)
			case "location":
				return ec.fieldContext_Activity_location(ctx, field)
			case "maxParticipants":
				return ec.fieldContext_Activity_maxParticipants(ctx, field)
			case "requireApproval":
				return ec.fieldContext_Activity_requireApproval(ctx, field)
			case "points":
				return ec.fieldContext_Activity_points(ctx, field)
			case "faculty":
				return ec.fieldContext_Activity_faculty(ctx, field)
			case "department":
				return ec.fieldContext_Activity_department(ctx, field)
			case "createdBy":
				return ec.fieldContext_Activity_createdBy(ctx, field)
			case "template":
				return ec.fieldContext_Activity_template(ctx, field)
			case "isRecurring":
				return ec.fieldContext_Activity_isRecurring(ctx, field)
			case "recurrenceRule":
				return ec.fieldContext_Activity_recurrenceRule(ctx, field)
			case "parentActivity":
				return ec.fieldContext_Activity_parentActivity(ctx, field)
			case "qrCodeRequired":
				return ec.fieldContext_Activity_qrCodeRequired(ctx, field)
			case "autoApprove":
				return ec.fieldContext_Activity_autoApprove(ctx, field)
			case "createdAt":
				return ec.fieldContext_Activity_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Activity_updatedAt(ctx, field)
			case "participations":
				return ec.fieldContext_Activity_participations(ctx, field)
			case "assignments":
				return ec.fieldContext_Activity_assignments(ctx, field)
			case "childActivities":
				return ec.fieldContext_Activity_childActivities(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Activity", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_activities_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_activity(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_activity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Activity(rctx, fc.Args["id"].(string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			if ec.directives.Auth == nil {
				var zeroVal *models.Activity
				return zeroVal, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.Activity); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/kruakemaths/tru-activity/backend/internal/models.Activity`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Activity)
	fc.Result = res
	return ec.marshalOActivity2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐActivity(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_activity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Activity_id(ctx, field)
			case "title":
				return ec.fieldContext_Activity_title(ctx, field)
			case "description":
				return ec.fieldContext_Activity_description(ctx, field)
			case "type":
				return ec.fieldContext_Activity_type(ctx, field)
			case "status":
				return ec.fieldContext_Activity_status(ctx, field)
			case "startDate":
				return ec.fieldContext_Activity_startDate(ctx, field)
			case "endDate":
				return ec.fieldContext_Activity_endDate(ctx, field)
			case "location":
				return ec.fieldContext_Activity_location(ctx, field)
			case "maxParticipants":
				return ec.fieldContext_Activity_maxParticipants(ctx, field)
			case "requireApproval":
				return ec.fieldContext_Activity_requireApproval(ctx, field)
			case "points":
				return ec.fieldContext_Activity_points(ctx, field)
			case "faculty":
				return ec.fieldContext_Activity_faculty(ctx, field)
			case "department":
				return ec.fieldContext_Activity_department(ctx, field)
			case "createdBy":
				return ec.fieldContext_Activity_createdBy(ctx, field)
			case "template":
				return ec.fieldContext_Activity_template(ctx, field)
			case "isRecurring":
				return ec.fieldContext_Activity_isRecurring(ctx, field)
			case "recurrenceRule":
				return ec.fieldContext_Activity_recurrenceRule(ctx, field)
			case "parentActivity":
				return ec.fieldContext_Activity_parentActivity(ctx, field)
			case "qrCodeRequired":
				return ec.fieldContext_Activity_qrCodeRequired(ctx, field)
			case "autoApprove":
				return ec.fieldContext_Activity_autoApprove(ctx, field)
			case "createdAt":
				return ec.fieldContext_Activity_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Activity_updatedAt(ctx, field)
			case "participations":
				return ec.fieldContext_Activity_participations(ctx, field)
			case "assignments":
				return ec.fieldContext_Activity_assignments(ctx, field)
			case "childActivities":
				return ec.fieldContext_Activity_childActivities(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Activity", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_activity_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_myActivities(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_myActivities(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().MyActivities(rctx)
		}

		directive1 := func(ctx context.Context) (any, error) {
			if ec.directives.Auth == nil {
				var zeroVal []*models.Activity
				return zeroVal, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.Activity); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/kruakemaths/tru-activity/backend/internal/models.Activity`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.Activity)
	fc.Result = res
	return ec.marshalNActivity2ᚕᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐActivityᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_myActivities(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Activity_id(ctx, field)
			case "title":
				return ec.fieldContext_Activity_title(ctx, field)
			case "description":
				return ec.fieldContext_Activity_description(ctx, field)
			case "type":
				return ec.fieldContext_Activity_type(ctx, field)
			case "status":
				return ec.fieldContext_Activity_status(ctx, field)
			case "startDate":
				return ec.fieldContext_Activity_startDate(ctx, field)
			case "endDate":
				return ec.fieldContext_Activity_endDate(ctx, field)
			case "location":
				return ec.fieldContext_Activity_location(ctx, field)
			case "maxParticipants":
				return ec.fieldContext_Activity_maxParticipants(ctx, field)
			case "requireApproval":
				return ec.fieldContext_Activity_requireApproval(ctx, field)
			case "points":
				return ec.fieldContext_Activity_points(ctx, field)
			case "faculty":
				return ec.fieldContext_Activity_faculty(ctx, field)
			case "department":
				return ec.fieldContext_Activity_department(ctx, field)
			case "createdBy":
				return ec.fieldContext_Activity_createdBy(ctx, field)
			case "template":
				return ec.fieldContext_Activity_template(ctx, field)
			case "isRecurring":
				return ec.fieldContext_Activity_isRecurring(ctx, field)
			case "recurrenceRule":
				return ec.fieldContext_Activity_recurrenceRule(ctx, field)
			case "parentActivity":
				return ec.fieldContext_Activity_parentActivity(ctx, field)
			case "qrCodeRequired":
				return ec.fieldContext_Activity_qrCodeRequired(ctx, field)
			case "autoApprove":
				return ec.fieldContext_Activity_autoApprove(ctx, field)
			case "createdAt":
				return ec.fieldContext_Activity_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Activity_updatedAt(ctx, field)
			case "participations":
				return ec.fieldContext_Activity_participations(ctx, field)
			case "assignments":
				return ec.fieldContext_Activity_assignments(ctx, field)
			case "childActivities":
				return ec.fieldContext_Activity_childActivities(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Activity", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_participations(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_participations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Participations(rctx, fc.Args["activityID"].(*string), fc.Args["userID"].(*string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			roles, err := ec.unmarshalNUserRole2ᚕgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUserRoleᚄ(ctx, []any{"SUPER_ADMIN", "FACULTY_ADMIN", "REGULAR_ADMIN"})
			if err != nil {
				var zeroVal []*models.Participation
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal []*models.Participation
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.Participation); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/kruakemaths/tru-activity/backend/internal/models.Participation`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.Participation)
	fc.Result = res
	return ec.marshalNParticipation2ᚕᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐParticipationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_participations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Participation_id(ctx, field)
			case "user":
				return ec.fieldContext_Participation_user(ctx, field)
			case "activity":
				return ec.fieldContext_Participation_activity(ctx, field)
			case "status":
				return ec.fieldContext_Participation_status(ctx, field)
			case "registeredAt":
				return ec.fieldContext_Participation_registeredAt(ctx, field)
			case "approvedAt":
				return ec.fieldContext_Participation_approvedAt(ctx, field)
			case "attendedAt":
				return ec.fieldContext_Participation_attendedAt(ctx, field)
			case "qrScannedAt":
				return ec.fieldContext_Participation_qrScannedAt(ctx, field)
			case "scannedBy":
				return ec.fieldContext_Participation_scannedBy(ctx, field)
			case "scanLocation":
				return ec.fieldContext_Participation_scanLocation(ctx, field)
			case "notes":
				return ec.fieldContext_Participation_notes(ctx, field)
			case "createdAt":
				return ec.fieldContext_Participation_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Participation_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Participation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_participations_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_myParticipations(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_myParticipations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().MyParticipations(rctx)
		}

		directive1 := func(ctx context.Context) (any, error) {
			if ec.directives.Auth == nil {
				var zeroVal []*models.Participation
				return zeroVal, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.Participation); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/kruakemaths/tru-activity/backend/internal/models.Participation`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.Participation)
	fc.Result = res
	return ec.marshalNParticipation2ᚕᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐParticipationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_myParticipations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Participation_id(ctx, field)
			case "user":
				return ec.fieldContext_Participation_user(ctx, field)
			case "activity":
				return ec.fieldContext_Participation_activity(ctx, field)
			case "status":
				return ec.fieldContext_Participation_status(ctx, field)
			case "registeredAt":
				return ec.fieldContext_Participation_registeredAt(ctx, field)
			case "approvedAt":
				return ec.fieldContext_Participation_approvedAt(ctx, field)
			case "attendedAt":
				return ec.fieldContext_Participation_attendedAt(ctx, field)
			case "qrScannedAt":
				return ec.fieldContext_Participation_qrScannedAt(ctx, field)
			case "scannedBy":
				return ec.fieldContext_Participation_scannedBy(ctx, field)
			case "scanLocation":
				return ec.fieldContext_Participation_scanLocation(ctx, field)
			case "notes":
				return ec.fieldContext_Participation_notes(ctx, field)
			case "createdAt":
				return ec.fieldContext_Participation_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Participation_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Participation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_subscriptions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_subscriptions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Subscriptions(rctx)
		}

		directive1 := func(ctx context.Context) (any, error) {
			roles, err := ec.unmarshalNUserRole2ᚕgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUserRoleᚄ(ctx, []any{"SUPER_ADMIN"})
			if err != nil {
				var zeroVal []*model.FacultySubscription
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal []*model.FacultySubscription
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.FacultySubscription); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/kruakemaths/tru-activity/backend/graph/model.FacultySubscription`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.FacultySubscription)
	fc.Result = res
	return ec.marshalNFacultySubscription2ᚕᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐFacultySubscriptionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_subscriptions(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_FacultySubscription_id(ctx, field)
			case "faculty":
				return ec.fieldContext_FacultySubscription_faculty(ctx, field)
			case "type":
				return ec.fieldContext_FacultySubscription_type(ctx, field)
			case "status":
				return ec.fieldContext_FacultySubscription_status(ctx, field)
			case "startDate":
				return ec.fieldContext_FacultySubscription_startDate(ctx, field)
			case "endDate":
				return ec.fieldContext_FacultySubscription_endDate(ctx, field)
			case "daysUntilExpiry":
				return ec.fieldContext_FacultySubscription_daysUntilExpiry(ctx, field)
			case "needsNotification":
				return ec.fieldContext_FacultySubscription_needsNotification(ctx, field)
			case "createdAt":
				return ec.fieldContext_FacultySubscription_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_FacultySubscription_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FacultySubscription", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_subscription(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_subscription(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Subscription(rctx, fc.Args["id"].(string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			roles, err := ec.unmarshalNUserRole2ᚕgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUserRoleᚄ(ctx, []any{"SUPER_ADMIN", "FACULTY_ADMIN"})
			if err != nil {
				var zeroVal *model.FacultySubscription
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *model.FacultySubscription
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.FacultySubscription); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/kruakemaths/tru-activity/backend/graph/model.FacultySubscription`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.FacultySubscription)
	fc.Result = res
	return ec.marshalOFacultySubscription2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐFacultySubscription(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_subscription(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_FacultySubscription_id(ctx, field)
			case "faculty":
				return ec.fieldContext_FacultySubscription_faculty(ctx, field)
			case "type":
				return ec.fieldContext_FacultySubscription_type(ctx, field)
			case "status":
				return ec.fieldContext_FacultySubscription_status(ctx, field)
			case "startDate":
				return ec.fieldContext_FacultySubscription_startDate(ctx, field)
			case "endDate":
				return ec.fieldContext_FacultySubscription_endDate(ctx, field)
			case "daysUntilExpiry":
				return ec.fieldContext_FacultySubscription_daysUntilExpiry(ctx, field)
			case "needsNotification":
				return ec.fieldContext_FacultySubscription_needsNotification(ctx, field)
			case "createdAt":
				return ec.fieldContext_FacultySubscription_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_FacultySubscription_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FacultySubscription", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_subscription_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_facultySubscription(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_facultySubscription(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().FacultySubscription(rctx, fc.Args["facultyID"].(string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			roles, err := ec.unmarshalNUserRole2ᚕgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUserRoleᚄ(ctx, []any{"SUPER_ADMIN", "FACULTY_ADMIN"})
			if err != nil {
				var zeroVal *model.FacultySubscription
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *model.FacultySubscription
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.FacultySubscription); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/kruakemaths/tru-activity/backend/graph/model.FacultySubscription`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.FacultySubscription)
	fc.Result = res
	return ec.marshalOFacultySubscription2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐFacultySubscription(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_facultySubscription(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_FacultySubscription_id(ctx, field)
			case "faculty":
				return ec.fieldContext_FacultySubscription_faculty(ctx, field)
			case "type":
				return ec.fieldContext_FacultySubscription_type(ctx, field)
			case "status":
				return ec.fieldContext_FacultySubscription_status(ctx, field)
			case "startDate":
				return ec.fieldContext_FacultySubscription_startDate(ctx, field)
			case "endDate":
				return ec.fieldContext_FacultySubscription_endDate(ctx, field)
			case "daysUntilExpiry":
				return ec.fieldContext_FacultySubscription_daysUntilExpiry(ctx, field)
			case "needsNotification":
				return ec.fieldContext_FacultySubscription_needsNotification(ctx, field)
			case "createdAt":
				return ec.fieldContext_FacultySubscription_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_FacultySubscription_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FacultySubscription", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_facultySubscription_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_systemMetrics(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_systemMetrics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().SystemMetrics(rctx, fc.Args["fromDate"].(*time.Time), fc.Args["toDate"].(*time.Time))
		}

		directive1 := func(ctx context.Context) (any, error) {
			roles, err := ec.unmarshalNUserRole2ᚕgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUserRoleᚄ(ctx, []any{"SUPER_ADMIN"})
			if err != nil {
				var zeroVal []*models.SystemMetrics
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal []*models.SystemMetrics
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.SystemMetrics); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/kruakemaths/tru-activity/backend/internal/models.SystemMetrics`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.SystemMetrics)
	fc.Result = res
	return ec.marshalNSystemMetrics2ᚕᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐSystemMetricsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_systemMetrics(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SystemMetrics_id(ctx, field)
			case "totalFaculties":
				return ec.fieldContext_SystemMetrics_totalFaculties(ctx, field)
			case "totalDepartments":
				return ec.fieldContext_SystemMetrics_totalDepartments(ctx, field)
			case "totalStudents":
				return ec.fieldContext_SystemMetrics_totalStudents(ctx, field)
			case "totalActivities":
				return ec.fieldContext_SystemMetrics_totalActivities(ctx, field)
			case "totalParticipations":
				return ec.fieldContext_SystemMetrics_totalParticipations(ctx, field)
			case "activeSubscriptions":
				return ec.fieldContext_SystemMetrics_activeSubscriptions(ctx, field)
			case "expiredSubscriptions":
				return ec.fieldContext_SystemMetrics_expiredSubscriptions(ctx, field)
			case "date":
				return ec.fieldContext_SystemMetrics_date(ctx, field)
			case "createdAt":
				return ec.fieldContext_SystemMetrics_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_SystemMetrics_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SystemMetrics", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_systemMetrics_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_facultyMetrics(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_facultyMetrics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().FacultyMetrics(rctx, fc.Args["facultyID"].(*string), fc.Args["fromDate"].(*time.Time), fc.Args["toDate"].(*time.Time))
		}

		directive1 := func(ctx context.Context) (any, error) {
			roles, err := ec.unmarshalNUserRole2ᚕgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUserRoleᚄ(ctx, []any{"SUPER_ADMIN", "FACULTY_ADMIN"})
			if err != nil {
				var zeroVal []*models.FacultyMetrics
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal []*models.FacultyMetrics
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.FacultyMetrics); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/kruakemaths/tru-activity/backend/internal/models.FacultyMetrics`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.FacultyMetrics)
	fc.Result = res
	return ec.marshalNFacultyMetrics2ᚕᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐFacultyMetricsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_facultyMetrics(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_FacultyMetrics_id(ctx, field)
			case "faculty":
				return ec.fieldContext_FacultyMetrics_faculty(ctx, field)
			case "totalStudents":
				return ec.fieldContext_FacultyMetrics_totalStudents(ctx, field)
			case "activeStudents":
				return ec.fieldContext_FacultyMetrics_activeStudents(ctx, field)
			case "totalActivities":
				return ec.fieldContext_FacultyMetrics_totalActivities(ctx, field)
			case "completedActivities":
				return ec.fieldContext_FacultyMetrics_completedActivities(ctx, field)
			case "totalParticipants":
				return ec.fieldContext_FacultyMetrics_totalParticipants(ctx, field)
			case "averageAttendance":
				return ec.fieldContext_FacultyMetrics_averageAttendance(ctx, field)
			case "date":
				return ec.fieldContext_FacultyMetrics_date(ctx, field)
			case "createdAt":
				return ec.fieldContext_FacultyMetrics_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_FacultyMetrics_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FacultyMetrics", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_facultyMetrics_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_notificationLogs(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_notificationLogs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().NotificationLogs(rctx, fc.Args["subscriptionID"].(*string), fc.Args["limit"].(*int), fc.Args["offset"].(*int))
		}

		directive1 := func(ctx context.Context) (any, error) {
			roles, err := ec.unmarshalNUserRole2ᚕgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUserRoleᚄ(ctx, []any{"SUPER_ADMIN", "FACULTY_ADMIN"})
			if err != nil {
				var zeroVal []*models.NotificationLog
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal []*models.NotificationLog
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.NotificationLog); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/kruakemaths/tru-activity/backend/internal/models.NotificationLog`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.NotificationLog)
	fc.Result = res
	return ec.marshalNNotificationLog2ᚕᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐNotificationLogᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_notificationLogs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_NotificationLog_id(ctx, field)
			case "subscription":
				return ec.fieldContext_NotificationLog_subscription(ctx, field)
			case "type":
				return ec.fieldContext_NotificationLog_type(ctx, field)
			case "status":
				return ec.fieldContext_NotificationLog_status(ctx, field)
			case "email":
				return ec.fieldContext_NotificationLog_email(ctx, field)
			case "subject":
				return ec.fieldContext_NotificationLog_subject(ctx, field)
			case "message":
				return ec.fieldContext_NotificationLog_message(ctx, field)
			case "sentAt":
				return ec.fieldContext_NotificationLog_sentAt(ctx, field)
			case "errorMessage":
				return ec.fieldContext_NotificationLog_errorMessage(ctx, field)
			case "createdAt":
				return ec.fieldContext_NotificationLog_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_NotificationLog_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type NotificationLog", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_notificationLogs_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_activityTemplates(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_activityTemplates(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().ActivityTemplates(rctx, fc.Args["facultyID"].(*string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			roles, err := ec.unmarshalNUserRole2ᚕgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUserRoleᚄ(ctx, []any{"SUPER_ADMIN", "FACULTY_ADMIN"})
			if err != nil {
				var zeroVal []*models.ActivityTemplate
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal []*models.ActivityTemplate
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.ActivityTemplate); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/kruakemaths/tru-activity/backend/internal/models.ActivityTemplate`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.ActivityTemplate)
	fc.Result = res
	return ec.marshalNActivityTemplate2ᚕᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐActivityTemplateᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_activityTemplates(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ActivityTemplate_id(ctx, field)
			case "name":
				return ec.fieldContext_ActivityTemplate_name(ctx, field)
			case "description":
				return ec.fieldContext_ActivityTemplate_description(ctx, field)
			case "type":
				return ec.fieldContext_ActivityTemplate_type(ctx, field)
			case "defaultDuration":
				return ec.fieldContext_ActivityTemplate_defaultDuration(ctx, field)
			case "location":
				return ec.fieldContext_ActivityTemplate_location(ctx, field)
			case "maxParticipants":
				return ec.fieldContext_ActivityTemplate_maxParticipants(ctx, field)
			case "requireApproval":
				return ec.fieldContext_ActivityTemplate_requireApproval(ctx, field)
			case "points":
				return ec.fieldContext_ActivityTemplate_points(ctx, field)
			case "qrCodeRequired":
				return ec.fieldContext_ActivityTemplate_qrCodeRequired(ctx, field)
			case "autoApprove":
				return ec.fieldContext_ActivityTemplate_autoApprove(ctx, field)
			case "faculty":
				return ec.fieldContext_ActivityTemplate_faculty(ctx, field)
			case "createdBy":
				return ec.fieldContext_ActivityTemplate_createdBy(ctx, field)
			case "isActive":
				return ec.fieldContext_ActivityTemplate_isActive(ctx, field)
			case "createdAt":
				return ec.fieldContext_ActivityTemplate_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ActivityTemplate_updatedAt(ctx, field)
			case "activities":
				return ec.fieldContext_ActivityTemplate_activities(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActivityTemplate", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_activityTemplates_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_activityTemplate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_activityTemplate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().ActivityTemplate(rctx, fc.Args["id"].(string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			roles, err := ec.unmarshalNUserRole2ᚕgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUserRoleᚄ(ctx, []any{"SUPER_ADMIN", "FACULTY_ADMIN"})
			if err != nil {
				var zeroVal *models.ActivityTemplate
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *models.ActivityTemplate
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.ActivityTemplate); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/kruakemaths/tru-activity/backend/internal/models.ActivityTemplate`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.ActivityTemplate)
	fc.Result = res
	return ec.marshalOActivityTemplate2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐActivityTemplate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_activityTemplate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ActivityTemplate_id(ctx, field)
			case "name":
				return ec.fieldContext_ActivityTemplate_name(ctx, field)
			case "description":
				return ec.fieldContext_ActivityTemplate_description(ctx, field)
			case "type":
				return ec.fieldContext_ActivityTemplate_type(ctx, field)
			case "defaultDuration":
				return ec.fieldContext_ActivityTemplate_defaultDuration(ctx, field)
			case "location":
				return ec.fieldContext_ActivityTemplate_location(ctx, field)
			case "maxParticipants":
				return ec.fieldContext_ActivityTemplate_maxParticipants(ctx, field)
			case "requireApproval":
				return ec.fieldContext_ActivityTemplate_requireApproval(ctx, field)
			case "points":
				return ec.fieldContext_ActivityTemplate_points(ctx, field)
			case "qrCodeRequired":
				return ec.fieldContext_ActivityTemplate_qrCodeRequired(ctx, field)
			case "autoApprove":
				return ec.fieldContext_ActivityTemplate_autoApprove(ctx, field)
			case "faculty":
				return ec.fieldContext_ActivityTemplate_faculty(ctx, field)
			case "createdBy":
				return ec.fieldContext_ActivityTemplate_createdBy(ctx, field)
			case "isActive":
				return ec.fieldContext_ActivityTemplate_isActive(ctx, field)
			case "createdAt":
				return ec.fieldContext_ActivityTemplate_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ActivityTemplate_updatedAt(ctx, field)
			case "activities":
				return ec.fieldContext_ActivityTemplate_activities(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActivityTemplate", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_activityTemplate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_activityAssignments(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_activityAssignments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().ActivityAssignments(rctx, fc.Args["activityID"].(*string), fc.Args["adminID"].(*string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			roles, err := ec.unmarshalNUserRole2ᚕgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUserRoleᚄ(ctx, []any{"SUPER_ADMIN", "FACULTY_ADMIN"})
			if err != nil {
				var zeroVal []*models.ActivityAssignment
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal []*models.ActivityAssignment
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.ActivityAssignment); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/kruakemaths/tru-activity/backend/internal/models.ActivityAssignment`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.ActivityAssignment)
	fc.Result = res
	return ec.marshalNActivityAssignment2ᚕᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐActivityAssignmentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_activityAssignments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ActivityAssignment_id(ctx, field)
			case "activity":
				return ec.fieldContext_ActivityAssignment_activity(ctx, field)
			case "admin":
				return ec.fieldContext_ActivityAssignment_admin(ctx, field)
			case "assignedBy":
				return ec.fieldContext_ActivityAssignment_assignedBy(ctx, field)
			case "canScanQR":
				return ec.fieldContext_ActivityAssignment_canScanQR(ctx, field)
			case "canApprove":
				return ec.fieldContext_ActivityAssignment_canApprove(ctx, field)
			case "notes":
				return ec.fieldContext_ActivityAssignment_notes(ctx, field)
			case "createdAt":
				return ec.fieldContext_ActivityAssignment_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ActivityAssignment_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActivityAssignment", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_activityAssignments_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_myActivityAssignments(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_myActivityAssignments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().MyActivityAssignments(rctx)
		}

		directive1 := func(ctx context.Context) (any, error) {
			roles, err := ec.unmarshalNUserRole2ᚕgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUserRoleᚄ(ctx, []any{"REGULAR_ADMIN"})
			if err != nil {
				var zeroVal []*models.ActivityAssignment
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal []*models.ActivityAssignment
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.ActivityAssignment); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/kruakemaths/tru-activity/backend/internal/models.ActivityAssignment`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.ActivityAssignment)
	fc.Result = res
	return ec.marshalNActivityAssignment2ᚕᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐActivityAssignmentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_myActivityAssignments(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ActivityAssignment_id(ctx, field)
			case "activity":
				return ec.fieldContext_ActivityAssignment_activity(ctx, field)
			case "admin":
				return ec.fieldContext_ActivityAssignment_admin(ctx, field)
			case "assignedBy":
				return ec.fieldContext_ActivityAssignment_assignedBy(ctx, field)
			case "canScanQR":
				return ec.fieldContext_ActivityAssignment_canScanQR(ctx, field)
			case "canApprove":
				return ec.fieldContext_ActivityAssignment_canApprove(ctx, field)
			case "notes":
				return ec.fieldContext_ActivityAssignment_notes(ctx, field)
			case "createdAt":
				return ec.fieldContext_ActivityAssignment_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ActivityAssignment_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActivityAssignment", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_myQRData(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_myQRData(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().MyQRData(rctx)
		}

		directive1 := func(ctx context.Context) (any, error) {
			if ec.directives.Auth == nil {
				var zeroVal *model.QRData
				return zeroVal, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.QRData); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/kruakemaths/tru-activity/backend/graph/model.QRData`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.QRData)
	fc.Result = res
	return ec.marshalNQRData2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐQRData(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_myQRData(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "studentID":
				return ec.fieldContext_QRData_studentID(ctx, field)
			case "timestamp":
				return ec.fieldContext_QRData_timestamp(ctx, field)
			case "signature":
				return ec.fieldContext_QRData_signature(ctx, field)
			case "version":
				return ec.fieldContext_QRData_version(ctx, field)
			case "qrString":
				return ec.fieldContext_QRData_qrString(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type QRData", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_qrScanLogs(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_qrScanLogs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().QRScanLogs(rctx, fc.Args["activityID"].(*string), fc.Args["userID"].(*string), fc.Args["limit"].(*int))
		}

		directive1 := func(ctx context.Context) (any, error) {
			roles, err := ec.unmarshalNUserRole2ᚕgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUserRoleᚄ(ctx, []any{"SUPER_ADMIN", "FACULTY_ADMIN", "REGULAR_ADMIN"})
			if err != nil {
				var zeroVal []*models.QRScanLog
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal []*models.QRScanLog
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.QRScanLog); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/kruakemaths/tru-activity/backend/internal/models.QRScanLog`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.QRScanLog)
	fc.Result = res
	return ec.marshalNQRScanLog2ᚕᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐQRScanLogᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_qrScanLogs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_QRScanLog_id(ctx, field)
			case "studentID":
				return ec.fieldContext_QRScanLog_studentID(ctx, field)
			case "user":
				return ec.fieldContext_QRScanLog_user(ctx, field)
			case "activity":
				return ec.fieldContext_QRScanLog_activity(ctx, field)
			case "scannedBy":
				return ec.fieldContext_QRScanLog_scannedBy(ctx, field)
			case "scanTimestamp":
				return ec.fieldContext_QRScanLog_scanTimestamp(ctx, field)
			case "qrTimestamp":
				return ec.fieldContext_QRScanLog_qrTimestamp(ctx, field)
			case "valid":
				return ec.fieldContext_QRScanLog_valid(ctx, field)
			case "errorMessage":
				return ec.fieldContext_QRScanLog_errorMessage(ctx, field)
			case "scanLocation":
				return ec.fieldContext_QRScanLog_scanLocation(ctx, field)
			case "ipAddress":
				return ec.fieldContext_QRScanLog_ipAddress(ctx, field)
			case "createdAt":
				return ec.fieldContext_QRScanLog_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type QRScanLog", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_qrScanLogs_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_personalNotifications(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_personalNotifications(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Subscription().PersonalNotifications(rctx, fc.Args["filter"].(*model.SubscriptionFilter))
		}

		directive1 := func(ctx context.Context) (any, error) {
			if ec.directives.Auth == nil {
				var zeroVal *model.SubscriptionPayload
				return zeroVal, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(<-chan *model.SubscriptionPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be <-chan *github.com/kruakemaths/tru-activity/backend/graph/model.SubscriptionPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *model.SubscriptionPayload):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalNSubscriptionPayload2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐSubscriptionPayload(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_personalNotifications(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type":
				return ec.fieldContext_SubscriptionPayload_type(ctx, field)
			case "timestamp":
				return ec.fieldContext_SubscriptionPayload_timestamp(ctx, field)
			case "data":
				return ec.fieldContext_SubscriptionPayload_data(ctx, field)
			case "metadata":
				return ec.fieldContext_SubscriptionPayload_metadata(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SubscriptionPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_personalNotifications_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_activityUpdates(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_activityUpdates(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Subscription().ActivityUpdates(rctx, fc.Args["activityID"].(string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			if ec.directives.Auth == nil {
				var zeroVal *model.SubscriptionPayload
				return zeroVal, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(<-chan *model.SubscriptionPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be <-chan *github.com/kruakemaths/tru-activity/backend/graph/model.SubscriptionPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *model.SubscriptionPayload):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalNSubscriptionPayload2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐSubscriptionPayload(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_activityUpdates(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type":
				return ec.fieldContext_SubscriptionPayload_type(ctx, field)
			case "timestamp":
				return ec.fieldContext_SubscriptionPayload_timestamp(ctx, field)
			case "data":
				return ec.fieldContext_SubscriptionPayload_data(ctx, field)
			case "metadata":
				return ec.fieldContext_SubscriptionPayload_metadata(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SubscriptionPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_activityUpdates_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_facultyUpdates(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_facultyUpdates(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Subscription().FacultyUpdates(rctx, fc.Args["facultyID"].(string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			roles, err := ec.unmarshalNUserRole2ᚕgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUserRoleᚄ(ctx, []any{"SUPER_ADMIN", "FACULTY_ADMIN", "REGULAR_ADMIN"})
			if err != nil {
				var zeroVal *model.SubscriptionPayload
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *model.SubscriptionPayload
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(<-chan *model.SubscriptionPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be <-chan *github.com/kruakemaths/tru-activity/backend/graph/model.SubscriptionPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *model.SubscriptionPayload):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalNSubscriptionPayload2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐSubscriptionPayload(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_facultyUpdates(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type":
				return ec.fieldContext_SubscriptionPayload_type(ctx, field)
			case "timestamp":
				return ec.fieldContext_SubscriptionPayload_timestamp(ctx, field)
			case "data":
				return ec.fieldContext_SubscriptionPayload_data(ctx, field)
			case "metadata":
				return ec.fieldContext_SubscriptionPayload_metadata(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SubscriptionPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_facultyUpdates_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_systemAlerts(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_systemAlerts(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Subscription().SystemAlerts(rctx, fc.Args["filter"].(*model.SubscriptionFilter))
		}

		directive1 := func(ctx context.Context) (any, error) {
			roles, err := ec.unmarshalNUserRole2ᚕgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUserRoleᚄ(ctx, []any{"SUPER_ADMIN", "FACULTY_ADMIN", "REGULAR_ADMIN"})
			if err != nil {
				var zeroVal *model.SubscriptionPayload
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *model.SubscriptionPayload
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(<-chan *model.SubscriptionPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be <-chan *github.com/kruakemaths/tru-activity/backend/graph/model.SubscriptionPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *model.SubscriptionPayload):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalNSubscriptionPayload2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐSubscriptionPayload(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_systemAlerts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type":
				return ec.fieldContext_SubscriptionPayload_type(ctx, field)
			case "timestamp":
				return ec.fieldContext_SubscriptionPayload_timestamp(ctx, field)
			case "data":
				return ec.fieldContext_SubscriptionPayload_data(ctx, field)
			case "metadata":
				return ec.fieldContext_SubscriptionPayload_metadata(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SubscriptionPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_systemAlerts_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_qrScanEvents(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_qrScanEvents(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Subscription().QRScanEvents(rctx, fc.Args["activityID"].(*string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			roles, err := ec.unmarshalNUserRole2ᚕgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUserRoleᚄ(ctx, []any{"SUPER_ADMIN", "FACULTY_ADMIN", "REGULAR_ADMIN"})
			if err != nil {
				var zeroVal *model.SubscriptionPayload
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *model.SubscriptionPayload
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(<-chan *model.SubscriptionPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be <-chan *github.com/kruakemaths/tru-activity/backend/graph/model.SubscriptionPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *model.SubscriptionPayload):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalNSubscriptionPayload2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐSubscriptionPayload(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_qrScanEvents(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type":
				return ec.fieldContext_SubscriptionPayload_type(ctx, field)
			case "timestamp":
				return ec.fieldContext_SubscriptionPayload_timestamp(ctx, field)
			case "data":
				return ec.fieldContext_SubscriptionPayload_data(ctx, field)
			case "metadata":
				return ec.fieldContext_SubscriptionPayload_metadata(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SubscriptionPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_qrScanEvents_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_participationEvents(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_participationEvents(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Subscription().ParticipationEvents(rctx, fc.Args["activityID"].(*string), fc.Args["userID"].(*string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			if ec.directives.Auth == nil {
				var zeroVal *model.SubscriptionPayload
				return zeroVal, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(<-chan *model.SubscriptionPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be <-chan *github.com/kruakemaths/tru-activity/backend/graph/model.SubscriptionPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *model.SubscriptionPayload):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalNSubscriptionPayload2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐSubscriptionPayload(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_participationEvents(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type":
				return ec.fieldContext_SubscriptionPayload_type(ctx, field)
			case "timestamp":
				return ec.fieldContext_SubscriptionPayload_timestamp(ctx, field)
			case "data":
				return ec.fieldContext_SubscriptionPayload_data(ctx, field)
			case "metadata":
				return ec.fieldContext_SubscriptionPayload_metadata(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SubscriptionPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_participationEvents_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_subscriptionWarnings(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_subscriptionWarnings(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Subscription().SubscriptionWarnings(rctx, fc.Args["facultyID"].(*string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			roles, err := ec.unmarshalNUserRole2ᚕgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUserRoleᚄ(ctx, []any{"SUPER_ADMIN", "FACULTY_ADMIN"})
			if err != nil {
				var zeroVal *model.SubscriptionPayload
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *model.SubscriptionPayload
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(<-chan *model.SubscriptionPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be <-chan *github.com/kruakemaths/tru-activity/backend/graph/model.SubscriptionPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *model.SubscriptionPayload):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalNSubscriptionPayload2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐSubscriptionPayload(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_subscriptionWarnings(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type":
				return ec.fieldContext_SubscriptionPayload_type(ctx, field)
			case "timestamp":
				return ec.fieldContext_SubscriptionPayload_timestamp(ctx, field)
			case "data":
				return ec.fieldContext_SubscriptionPayload_data(ctx, field)
			case "metadata":
				return ec.fieldContext_SubscriptionPayload_metadata(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SubscriptionPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_subscriptionWarnings_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_activityAssignments(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_activityAssignments(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Subscription().ActivityAssignments(rctx)
		}

		directive1 := func(ctx context.Context) (any, error) {
			roles, err := ec.unmarshalNUserRole2ᚕgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUserRoleᚄ(ctx, []any{"REGULAR_ADMIN"})
			if err != nil {
				var zeroVal *model.SubscriptionPayload
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *model.SubscriptionPayload
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(<-chan *model.SubscriptionPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be <-chan *github.com/kruakemaths/tru-activity/backend/graph/model.SubscriptionPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *model.SubscriptionPayload):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalNSubscriptionPayload2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐSubscriptionPayload(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_activityAssignments(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type":
				return ec.fieldContext_SubscriptionPayload_type(ctx, field)
			case "timestamp":
				return ec.fieldContext_SubscriptionPayload_timestamp(ctx, field)
			case "data":
				return ec.fieldContext_SubscriptionPayload_data(ctx, field)
			case "metadata":
				return ec.fieldContext_SubscriptionPayload_metadata(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SubscriptionPayload", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_newActivities(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_newActivities(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Subscription().NewActivities(rctx, fc.Args["facultyID"].(*string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			if ec.directives.Auth == nil {
				var zeroVal *model.SubscriptionPayload
				return zeroVal, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(<-chan *model.SubscriptionPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be <-chan *github.com/kruakemaths/tru-activity/backend/graph/model.SubscriptionPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *model.SubscriptionPayload):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalNSubscriptionPayload2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐSubscriptionPayload(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_newActivities(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type":
				return ec.fieldContext_SubscriptionPayload_type(ctx, field)
			case "timestamp":
				return ec.fieldContext_SubscriptionPayload_timestamp(ctx, field)
			case "data":
				return ec.fieldContext_SubscriptionPayload_data(ctx, field)
			case "metadata":
				return ec.fieldContext_SubscriptionPayload_metadata(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SubscriptionPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_newActivities_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_heartbeat(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_heartbeat(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Subscription().Heartbeat(rctx)
		}

		directive1 := func(ctx context.Context) (any, error) {
			if ec.directives.Auth == nil {
				var zeroVal string
				return zeroVal, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(<-chan string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be <-chan string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan string):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalNString2string(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_heartbeat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubscriptionMetadata_source(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionMetadata) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubscriptionMetadata_source(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubscriptionMetadata_source(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubscriptionMetadata",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubscriptionMetadata_userID(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionMetadata) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubscriptionMetadata_userID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubscriptionMetadata_userID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubscriptionMetadata",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubscriptionMetadata_facultyID(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionMetadata) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubscriptionMetadata_facultyID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FacultyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubscriptionMetadata_facultyID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubscriptionMetadata",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubscriptionMetadata_activityID(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionMetadata) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubscriptionMetadata_activityID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActivityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubscriptionMetadata_activityID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubscriptionMetadata",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubscriptionMetadata_connectionID(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionMetadata) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubscriptionMetadata_connectionID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConnectionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubscriptionMetadata_connectionID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubscriptionMetadata",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubscriptionPayload_type(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubscriptionPayload_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubscriptionPayload_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubscriptionPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubscriptionPayload_timestamp(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubscriptionPayload_timestamp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Timestamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubscriptionPayload_timestamp(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubscriptionPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubscriptionPayload_data(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubscriptionPayload_data(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(model.SubscriptionData)
	fc.Result = res
	return ec.marshalOSubscriptionData2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐSubscriptionData(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubscriptionPayload_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubscriptionPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type SubscriptionData does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubscriptionPayload_metadata(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubscriptionPayload_metadata(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SubscriptionMetadata)
	fc.Result = res
	return ec.marshalOSubscriptionMetadata2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐSubscriptionMetadata(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubscriptionPayload_metadata(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubscriptionPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "source":
				return ec.fieldContext_SubscriptionMetadata_source(ctx, field)
			case "userID":
				return ec.fieldContext_SubscriptionMetadata_userID(ctx, field)
			case "facultyID":
				return ec.fieldContext_SubscriptionMetadata_facultyID(ctx, field)
			case "activityID":
				return ec.fieldContext_SubscriptionMetadata_activityID(ctx, field)
			case "connectionID":
				return ec.fieldContext_SubscriptionMetadata_connectionID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SubscriptionMetadata", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemAlert_id(ctx context.Context, field graphql.CollectedField, obj *models.SystemAlert) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemAlert_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SystemAlert().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemAlert_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemAlert",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemAlert_type(ctx context.Context, field graphql.CollectedField, obj *models.SystemAlert) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemAlert_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemAlert_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemAlert",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemAlert_level(ctx context.Context, field graphql.CollectedField, obj *models.SystemAlert) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemAlert_level(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SystemAlert().Level(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemAlert_level(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemAlert",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemAlert_title(ctx context.Context, field graphql.CollectedField, obj *models.SystemAlert) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemAlert_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SystemAlert().Title(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemAlert_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemAlert",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemAlert_message(ctx context.Context, field graphql.CollectedField, obj *models.SystemAlert) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemAlert_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemAlert_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemAlert",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemAlert_facultyID(ctx context.Context, field graphql.CollectedField, obj *models.SystemAlert) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemAlert_facultyID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SystemAlert().FacultyID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemAlert_facultyID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemAlert",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemAlert_userID(ctx context.Context, field graphql.CollectedField, obj *models.SystemAlert) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemAlert_userID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SystemAlert().UserID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemAlert_userID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemAlert",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemAlert_data(ctx context.Context, field graphql.CollectedField, obj *models.SystemAlert) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemAlert_data(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SystemAlert().Data(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemAlert_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemAlert",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemAlert_timestamp(ctx context.Context, field graphql.CollectedField, obj *models.SystemAlert) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemAlert_timestamp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SystemAlert().Timestamp(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalNTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemAlert_timestamp(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemAlert",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemMetrics_id(ctx context.Context, field graphql.CollectedField, obj *models.SystemMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemMetrics_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SystemMetrics().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemMetrics_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemMetrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemMetrics_totalFaculties(ctx context.Context, field graphql.CollectedField, obj *models.SystemMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemMetrics_totalFaculties(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalFaculties, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemMetrics_totalFaculties(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemMetrics_totalDepartments(ctx context.Context, field graphql.CollectedField, obj *models.SystemMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemMetrics_totalDepartments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalDepartments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemMetrics_totalDepartments(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemMetrics_totalStudents(ctx context.Context, field graphql.CollectedField, obj *models.SystemMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemMetrics_totalStudents(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalStudents, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemMetrics_totalStudents(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemMetrics_totalActivities(ctx context.Context, field graphql.CollectedField, obj *models.SystemMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemMetrics_totalActivities(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalActivities, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemMetrics_totalActivities(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemMetrics_totalParticipations(ctx context.Context, field graphql.CollectedField, obj *models.SystemMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemMetrics_totalParticipations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalParticipations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemMetrics_totalParticipations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemMetrics_activeSubscriptions(ctx context.Context, field graphql.CollectedField, obj *models.SystemMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemMetrics_activeSubscriptions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActiveSubscriptions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemMetrics_activeSubscriptions(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemMetrics_expiredSubscriptions(ctx context.Context, field graphql.CollectedField, obj *models.SystemMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemMetrics_expiredSubscriptions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpiredSubscriptions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemMetrics_expiredSubscriptions(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemMetrics_date(ctx context.Context, field graphql.CollectedField, obj *models.SystemMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemMetrics_date(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemMetrics_date(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemMetrics_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.SystemMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemMetrics_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemMetrics_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemMetrics_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models.SystemMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemMetrics_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemMetrics_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_id(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.User().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_studentID(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_studentID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StudentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_studentID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_email(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_email(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_firstName(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_firstName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_firstName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_lastName(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_lastName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_lastName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_role(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_role(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Role, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.UserRole)
	fc.Result = res
	return ec.marshalNUserRole2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUserRole(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_role(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UserRole does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_qrSecret(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_qrSecret(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QRSecret, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_qrSecret(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_faculty(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_faculty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Faculty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Faculty)
	fc.Result = res
	return ec.marshalOFaculty2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐFaculty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_faculty(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Faculty_id(ctx, field)
			case "name":
				return ec.fieldContext_Faculty_name(ctx, field)
			case "code":
				return ec.fieldContext_Faculty_code(ctx, field)
			case "description":
				return ec.fieldContext_Faculty_description(ctx, field)
			case "isActive":
				return ec.fieldContext_Faculty_isActive(ctx, field)
			case "createdAt":
				return ec.fieldContext_Faculty_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Faculty_updatedAt(ctx, field)
			case "departments":
				return ec.fieldContext_Faculty_departments(ctx, field)
			case "users":
				return ec.fieldContext_Faculty_users(ctx, field)
			case "activities":
				return ec.fieldContext_Faculty_activities(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Faculty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_department(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_department(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Department, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Department)
	fc.Result = res
	return ec.marshalODepartment2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐDepartment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_department(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Department_id(ctx, field)
			case "name":
				return ec.fieldContext_Department_name(ctx, field)
			case "code":
				return ec.fieldContext_Department_code(ctx, field)
			case "faculty":
				return ec.fieldContext_Department_faculty(ctx, field)
			case "isActive":
				return ec.fieldContext_Department_isActive(ctx, field)
			case "createdAt":
				return ec.fieldContext_Department_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Department_updatedAt(ctx, field)
			case "users":
				return ec.fieldContext_Department_users(ctx, field)
			case "activities":
				return ec.fieldContext_Department_activities(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Department", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_isActive(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_isActive(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsActive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_isActive(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_lastLoginAt(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_lastLoginAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastLoginAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_lastLoginAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_participations(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_participations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Participations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]models.Participation)
	fc.Result = res
	return ec.marshalNParticipation2ᚕgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐParticipationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_participations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Participation_id(ctx, field)
			case "user":
				return ec.fieldContext_Participation_user(ctx, field)
			case "activity":
				return ec.fieldContext_Participation_activity(ctx, field)
			case "status":
				return ec.fieldContext_Participation_status(ctx, field)
			case "registeredAt":
				return ec.fieldContext_Participation_registeredAt(ctx, field)
			case "approvedAt":
				return ec.fieldContext_Participation_approvedAt(ctx, field)
			case "attendedAt":
				return ec.fieldContext_Participation_attendedAt(ctx, field)
			case "qrScannedAt":
				return ec.fieldContext_Participation_qrScannedAt(ctx, field)
			case "scannedBy":
				return ec.fieldContext_Participation_scannedBy(ctx, field)
			case "scanLocation":
				return ec.fieldContext_Participation_scanLocation(ctx, field)
			case "notes":
				return ec.fieldContext_Participation_notes(ctx, field)
			case "createdAt":
				return ec.fieldContext_Participation_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Participation_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Participation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_subscriptions(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_subscriptions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.User().Subscriptions(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.FacultySubscription)
	fc.Result = res
	return ec.marshalNFacultySubscription2ᚕᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐFacultySubscriptionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_subscriptions(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_FacultySubscription_id(ctx, field)
			case "faculty":
				return ec.fieldContext_FacultySubscription_faculty(ctx, field)
			case "type":
				return ec.fieldContext_FacultySubscription_type(ctx, field)
			case "status":
				return ec.fieldContext_FacultySubscription_status(ctx, field)
			case "startDate":
				return ec.fieldContext_FacultySubscription_startDate(ctx, field)
			case "endDate":
				return ec.fieldContext_FacultySubscription_endDate(ctx, field)
			case "daysUntilExpiry":
				return ec.fieldContext_FacultySubscription_daysUntilExpiry(ctx, field)
			case "needsNotification":
				return ec.fieldContext_FacultySubscription_needsNotification(ctx, field)
			case "createdAt":
				return ec.fieldContext_FacultySubscription_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_FacultySubscription_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FacultySubscription", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_locations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___InputValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___InputValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Directive_args_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___InputValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___InputValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Field_args_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_types(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_queryType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_queryType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_mutationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_mutationType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_directives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_directives(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_kind(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_interfaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_interfaces(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_possibleTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_enumValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_inputFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_inputFields(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___InputValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___InputValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_ofType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_ofType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_isOneOf(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_isOneOf(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsOneOf(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_isOneOf(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputCreateActivityAssignmentInput(ctx context.Context, obj any) (model.CreateActivityAssignmentInput, error) {
	var it model.CreateActivityAssignmentInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"activityID", "adminID", "canScanQR", "canApprove", "notes"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "activityID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("activityID"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActivityID = data
		case "adminID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adminID"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdminID = data
		case "canScanQR":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("canScanQR"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CanScanQR = data
		case "canApprove":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("canApprove"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CanApprove = data
		case "notes":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notes"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Notes = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateActivityInput(ctx context.Context, obj any) (model.CreateActivityInput, error) {
	var it model.CreateActivityInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"title", "description", "type", "startDate", "endDate", "location", "maxParticipants", "requireApproval", "points", "facultyID", "departmentID", "templateID", "isRecurring", "recurrenceRule", "qrCodeRequired", "autoApprove"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalNActivityType2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐActivityType(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "startDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startDate"))
			data, err := ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartDate = data
		case "endDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endDate"))
			data, err := ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndDate = data
		case "location":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Location = data
		case "maxParticipants":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxParticipants"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaxParticipants = data
		case "requireApproval":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requireApproval"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.RequireApproval = data
		case "points":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("points"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.Points = data
		case "facultyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facultyID"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FacultyID = data
		case "departmentID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("departmentID"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DepartmentID = data
		case "templateID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("templateID"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TemplateID = data
		case "isRecurring":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isRecurring"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsRecurring = data
		case "recurrenceRule":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("recurrenceRule"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RecurrenceRule = data
		case "qrCodeRequired":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("qrCodeRequired"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.QRCodeRequired = data
		case "autoApprove":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("autoApprove"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AutoApprove = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateActivityTemplateInput(ctx context.Context, obj any) (model.CreateActivityTemplateInput, error) {
	var it model.CreateActivityTemplateInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "description", "type", "defaultDuration", "location", "maxParticipants", "requireApproval", "points", "qrCodeRequired", "autoApprove", "facultyID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalNActivityType2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐActivityType(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "defaultDuration":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("defaultDuration"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.DefaultDuration = data
		case "location":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Location = data
		case "maxParticipants":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxParticipants"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaxParticipants = data
		case "requireApproval":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requireApproval"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.RequireApproval = data
		case "points":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("points"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.Points = data
		case "qrCodeRequired":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("qrCodeRequired"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.QRCodeRequired = data
		case "autoApprove":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("autoApprove"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AutoApprove = data
		case "facultyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facultyID"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FacultyID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateDepartmentInput(ctx context.Context, obj any) (model.CreateDepartmentInput, error) {
	var it model.CreateDepartmentInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "code", "facultyID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "code":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Code = data
		case "facultyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facultyID"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.FacultyID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateFacultyInput(ctx context.Context, obj any) (model.CreateFacultyInput, error) {
	var it model.CreateFacultyInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "code", "description"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "code":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Code = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateSubscriptionInput(ctx context.Context, obj any) (model.CreateSubscriptionInput, error) {
	var it model.CreateSubscriptionInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"facultyID", "type", "startDate", "endDate"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "facultyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facultyID"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.FacultyID = data
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalNSubscriptionType2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐSubscriptionType(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "startDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startDate"))
			data, err := ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartDate = data
		case "endDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endDate"))
			data, err := ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndDate = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLoginInput(ctx context.Context, obj any) (model.LoginInput, error) {
	var it model.LoginInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"email", "password"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "password":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Password = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputQRScanInput(ctx context.Context, obj any) (model.QRScanInput, error) {
	var it model.QRScanInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"qrData", "activityID", "scanLocation"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "qrData":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("qrData"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.QRData = data
		case "activityID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("activityID"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActivityID = data
		case "scanLocation":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scanLocation"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ScanLocation = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRegisterInput(ctx context.Context, obj any) (model.RegisterInput, error) {
	var it model.RegisterInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"studentID", "email", "firstName", "lastName", "password", "facultyID", "departmentID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "studentID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("studentID"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.StudentID = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "firstName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstName = data
		case "lastName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastName = data
		case "password":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Password = data
		case "facultyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facultyID"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FacultyID = data
		case "departmentID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("departmentID"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DepartmentID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSubscriptionFilter(ctx context.Context, obj any) (model.SubscriptionFilter, error) {
	var it model.SubscriptionFilter
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"facultyID", "activityID", "userID", "types"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "facultyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facultyID"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FacultyID = data
		case "activityID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("activityID"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActivityID = data
		case "userID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserID = data
		case "types":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("types"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Types = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateActivityAssignmentInput(ctx context.Context, obj any) (model.UpdateActivityAssignmentInput, error) {
	var it model.UpdateActivityAssignmentInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"canScanQR", "canApprove", "notes"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "canScanQR":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("canScanQR"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CanScanQR = data
		case "canApprove":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("canApprove"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CanApprove = data
		case "notes":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notes"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Notes = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateActivityInput(ctx context.Context, obj any) (model.UpdateActivityInput, error) {
	var it model.UpdateActivityInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"title", "description", "type", "status", "startDate", "endDate", "location", "maxParticipants", "requireApproval", "points", "facultyID", "departmentID", "qrCodeRequired", "autoApprove"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalOActivityType2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐActivityType(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOActivityStatus2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐActivityStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "startDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartDate = data
		case "endDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndDate = data
		case "location":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Location = data
		case "maxParticipants":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxParticipants"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaxParticipants = data
		case "requireApproval":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requireApproval"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.RequireApproval = data
		case "points":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("points"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Points = data
		case "facultyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facultyID"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FacultyID = data
		case "departmentID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("departmentID"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DepartmentID = data
		case "qrCodeRequired":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("qrCodeRequired"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.QRCodeRequired = data
		case "autoApprove":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("autoApprove"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AutoApprove = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateActivityTemplateInput(ctx context.Context, obj any) (model.UpdateActivityTemplateInput, error) {
	var it model.UpdateActivityTemplateInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "description", "type", "defaultDuration", "location", "maxParticipants", "requireApproval", "points", "qrCodeRequired", "autoApprove", "isActive"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalOActivityType2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐActivityType(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "defaultDuration":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("defaultDuration"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DefaultDuration = data
		case "location":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Location = data
		case "maxParticipants":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxParticipants"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaxParticipants = data
		case "requireApproval":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requireApproval"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.RequireApproval = data
		case "points":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("points"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Points = data
		case "qrCodeRequired":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("qrCodeRequired"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.QRCodeRequired = data
		case "autoApprove":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("autoApprove"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AutoApprove = data
		case "isActive":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isActive"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsActive = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateDepartmentInput(ctx context.Context, obj any) (model.UpdateDepartmentInput, error) {
	var it model.UpdateDepartmentInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "code"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "code":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Code = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateSubscriptionInput(ctx context.Context, obj any) (model.UpdateSubscriptionInput, error) {
	var it model.UpdateSubscriptionInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"type", "startDate", "endDate", "status"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalOSubscriptionType2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐSubscriptionType(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "startDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartDate = data
		case "endDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndDate = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOSubscriptionStatus2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐSubscriptionStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) _SubscriptionData(ctx context.Context, sel ast.SelectionSet, obj model.SubscriptionData) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case *models.User:
		if obj == nil {
			return graphql.Null
		}
		return ec._User(ctx, sel, obj)
	case *models.SystemAlert:
		if obj == nil {
			return graphql.Null
		}
		return ec._SystemAlert(ctx, sel, obj)
	case *models.Participation:
		if obj == nil {
			return graphql.Null
		}
		return ec._Participation(ctx, sel, obj)
	case model.FacultySubscription:
		return ec._FacultySubscription(ctx, sel, &obj)
	case *model.FacultySubscription:
		if obj == nil {
			return graphql.Null
		}
		return ec._FacultySubscription(ctx, sel, obj)
	case *models.Faculty:
		if obj == nil {
			return graphql.Null
		}
		return ec._Faculty(ctx, sel, obj)
	case *models.ActivityAssignment:
		if obj == nil {
			return graphql.Null
		}
		return ec._ActivityAssignment(ctx, sel, obj)
	case *models.Activity:
		if obj == nil {
			return graphql.Null
		}
		return ec._Activity(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var activityImplementors = []string{"Activity", "SubscriptionData"}

func (ec *executionContext) _Activity(ctx context.Context, sel ast.SelectionSet, obj *models.Activity) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, activityImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Activity")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Activity_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "title":
			out.Values[i] = ec._Activity_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "description":
			out.Values[i] = ec._Activity_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec._Activity_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "status":
			out.Values[i] = ec._Activity_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "startDate":
			out.Values[i] = ec._Activity_startDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "endDate":
			out.Values[i] = ec._Activity_endDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "location":
			out.Values[i] = ec._Activity_location(ctx, field, obj)
		case "maxParticipants":
			out.Values[i] = ec._Activity_maxParticipants(ctx, field, obj)
		case "requireApproval":
			out.Values[i] = ec._Activity_requireApproval(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "points":
			out.Values[i] = ec._Activity_points(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "faculty":
			out.Values[i] = ec._Activity_faculty(ctx, field, obj)
		case "department":
			out.Values[i] = ec._Activity_department(ctx, field, obj)
		case "createdBy":
			out.Values[i] = ec._Activity_createdBy(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "template":
			out.Values[i] = ec._Activity_template(ctx, field, obj)
		case "isRecurring":
			out.Values[i] = ec._Activity_isRecurring(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "recurrenceRule":
			out.Values[i] = ec._Activity_recurrenceRule(ctx, field, obj)
		case "parentActivity":
			out.Values[i] = ec._Activity_parentActivity(ctx, field, obj)
		case "qrCodeRequired":
			out.Values[i] = ec._Activity_qrCodeRequired(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "autoApprove":
			out.Values[i] = ec._Activity_autoApprove(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._Activity_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Activity_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "participations":
			out.Values[i] = ec._Activity_participations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "assignments":
			out.Values[i] = ec._Activity_assignments(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "childActivities":
			out.Values[i] = ec._Activity_childActivities(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var activityAssignmentImplementors = []string{"ActivityAssignment", "SubscriptionData"}

func (ec *executionContext) _ActivityAssignment(ctx context.Context, sel ast.SelectionSet, obj *models.ActivityAssignment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, activityAssignmentImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActivityAssignment")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ActivityAssignment_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "activity":
			out.Values[i] = ec._ActivityAssignment_activity(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "admin":
			out.Values[i] = ec._ActivityAssignment_admin(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "assignedBy":
			out.Values[i] = ec._ActivityAssignment_assignedBy(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "canScanQR":
			out.Values[i] = ec._ActivityAssignment_canScanQR(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "canApprove":
			out.Values[i] = ec._ActivityAssignment_canApprove(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "notes":
			out.Values[i] = ec._ActivityAssignment_notes(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._ActivityAssignment_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._ActivityAssignment_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var activityTemplateImplementors = []string{"ActivityTemplate"}

func (ec *executionContext) _ActivityTemplate(ctx context.Context, sel ast.SelectionSet, obj *models.ActivityTemplate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, activityTemplateImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActivityTemplate")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ActivityTemplate_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "name":
			out.Values[i] = ec._ActivityTemplate_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "description":
			out.Values[i] = ec._ActivityTemplate_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec._ActivityTemplate_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "defaultDuration":
			out.Values[i] = ec._ActivityTemplate_defaultDuration(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "location":
			out.Values[i] = ec._ActivityTemplate_location(ctx, field, obj)
		case "maxParticipants":
			out.Values[i] = ec._ActivityTemplate_maxParticipants(ctx, field, obj)
		case "requireApproval":
			out.Values[i] = ec._ActivityTemplate_requireApproval(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "points":
			out.Values[i] = ec._ActivityTemplate_points(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "qrCodeRequired":
			out.Values[i] = ec._ActivityTemplate_qrCodeRequired(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "autoApprove":
			out.Values[i] = ec._ActivityTemplate_autoApprove(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "faculty":
			out.Values[i] = ec._ActivityTemplate_faculty(ctx, field, obj)
		case "createdBy":
			out.Values[i] = ec._ActivityTemplate_createdBy(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "isActive":
			out.Values[i] = ec._ActivityTemplate_isActive(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._ActivityTemplate_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._ActivityTemplate_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "activities":
			out.Values[i] = ec._ActivityTemplate_activities(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var authPayloadImplementors = []string{"AuthPayload"}

func (ec *executionContext) _AuthPayload(ctx context.Context, sel ast.SelectionSet, obj *model.AuthPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthPayload")
		case "token":
			out.Values[i] = ec._AuthPayload_token(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "user":
			out.Values[i] = ec._AuthPayload_user(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var departmentImplementors = []string{"Department"}

func (ec *executionContext) _Department(ctx context.Context, sel ast.SelectionSet, obj *models.Department) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, departmentImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Department")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Department_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "name":
			out.Values[i] = ec._Department_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "code":
			out.Values[i] = ec._Department_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "faculty":
			out.Values[i] = ec._Department_faculty(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "isActive":
			out.Values[i] = ec._Department_isActive(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._Department_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Department_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "users":
			out.Values[i] = ec._Department_users(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "activities":
			out.Values[i] = ec._Department_activities(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var facultyImplementors = []string{"Faculty", "SubscriptionData"}

func (ec *executionContext) _Faculty(ctx context.Context, sel ast.SelectionSet, obj *models.Faculty) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, facultyImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Faculty")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Faculty_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "name":
			out.Values[i] = ec._Faculty_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "code":
			out.Values[i] = ec._Faculty_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "description":
			out.Values[i] = ec._Faculty_description(ctx, field, obj)
		case "isActive":
			out.Values[i] = ec._Faculty_isActive(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._Faculty_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Faculty_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "departments":
			out.Values[i] = ec._Faculty_departments(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "users":
			out.Values[i] = ec._Faculty_users(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "activities":
			out.Values[i] = ec._Faculty_activities(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var facultyMetricsImplementors = []string{"FacultyMetrics"}

func (ec *executionContext) _FacultyMetrics(ctx context.Context, sel ast.SelectionSet, obj *models.FacultyMetrics) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, facultyMetricsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FacultyMetrics")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._FacultyMetrics_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "faculty":
			out.Values[i] = ec._FacultyMetrics_faculty(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "totalStudents":
			out.Values[i] = ec._FacultyMetrics_totalStudents(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "activeStudents":
			out.Values[i] = ec._FacultyMetrics_activeStudents(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "totalActivities":
			out.Values[i] = ec._FacultyMetrics_totalActivities(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "completedActivities":
			out.Values[i] = ec._FacultyMetrics_completedActivities(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "totalParticipants":
			out.Values[i] = ec._FacultyMetrics_totalParticipants(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "averageAttendance":
			out.Values[i] = ec._FacultyMetrics_averageAttendance(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "date":
			out.Values[i] = ec._FacultyMetrics_date(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._FacultyMetrics_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._FacultyMetrics_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var facultySubscriptionImplementors = []string{"FacultySubscription", "SubscriptionData"}

func (ec *executionContext) _FacultySubscription(ctx context.Context, sel ast.SelectionSet, obj *model.FacultySubscription) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, facultySubscriptionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FacultySubscription")
		case "id":
			out.Values[i] = ec._FacultySubscription_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "faculty":
			out.Values[i] = ec._FacultySubscription_faculty(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec._FacultySubscription_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "status":
			out.Values[i] = ec._FacultySubscription_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "startDate":
			out.Values[i] = ec._FacultySubscription_startDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "endDate":
			out.Values[i] = ec._FacultySubscription_endDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "daysUntilExpiry":
			out.Values[i] = ec._FacultySubscription_daysUntilExpiry(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "needsNotification":
			out.Values[i] = ec._FacultySubscription_needsNotification(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._FacultySubscription_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._FacultySubscription_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "login":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_login(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "register":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_register(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "refreshToken":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_refreshToken(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createActivity":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createActivity(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateActivity":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateActivity(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteActivity":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteActivity(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "joinActivity":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_joinActivity(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "leaveActivity":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_leaveActivity(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "approveParticipation":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_approveParticipation(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "rejectParticipation":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_rejectParticipation(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "markAttendance":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_markAttendance(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createFaculty":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createFaculty(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateFaculty":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateFaculty(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteFaculty":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteFaculty(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createDepartment":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createDepartment(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateDepartment":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateDepartment(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteDepartment":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteDepartment(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createSubscription":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createSubscription(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateSubscription":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateSubscription(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteSubscription":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteSubscription(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "assignFacultyAdmin":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_assignFacultyAdmin(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "assignRegularAdmin":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_assignRegularAdmin(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "removeAdminRole":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_removeAdminRole(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createActivityTemplate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createActivityTemplate(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateActivityTemplate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateActivityTemplate(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteActivityTemplate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteActivityTemplate(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "assignActivity":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_assignActivity(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateActivityAssignment":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateActivityAssignment(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "removeActivityAssignment":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_removeActivityAssignment(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "scanQRCode":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_scanQRCode(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "refreshMyQRSecret":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_refreshMyQRSecret(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "refreshUserQRSecret":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_refreshUserQRSecret(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var notificationLogImplementors = []string{"NotificationLog"}

func (ec *executionContext) _NotificationLog(ctx context.Context, sel ast.SelectionSet, obj *models.NotificationLog) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, notificationLogImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NotificationLog")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._NotificationLog_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "subscription":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._NotificationLog_subscription(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "type":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._NotificationLog_type(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "status":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._NotificationLog_status(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "email":
			out.Values[i] = ec._NotificationLog_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "subject":
			out.Values[i] = ec._NotificationLog_subject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "message":
			out.Values[i] = ec._NotificationLog_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "sentAt":
			out.Values[i] = ec._NotificationLog_sentAt(ctx, field, obj)
		case "errorMessage":
			out.Values[i] = ec._NotificationLog_errorMessage(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._NotificationLog_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._NotificationLog_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var participationImplementors = []string{"Participation", "SubscriptionData"}

func (ec *executionContext) _Participation(ctx context.Context, sel ast.SelectionSet, obj *models.Participation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, participationImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Participation")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Participation_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "user":
			out.Values[i] = ec._Participation_user(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "activity":
			out.Values[i] = ec._Participation_activity(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "status":
			out.Values[i] = ec._Participation_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "registeredAt":
			out.Values[i] = ec._Participation_registeredAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "approvedAt":
			out.Values[i] = ec._Participation_approvedAt(ctx, field, obj)
		case "attendedAt":
			out.Values[i] = ec._Participation_attendedAt(ctx, field, obj)
		case "qrScannedAt":
			out.Values[i] = ec._Participation_qrScannedAt(ctx, field, obj)
		case "scannedBy":
			out.Values[i] = ec._Participation_scannedBy(ctx, field, obj)
		case "scanLocation":
			out.Values[i] = ec._Participation_scanLocation(ctx, field, obj)
		case "notes":
			out.Values[i] = ec._Participation_notes(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Participation_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Participation_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var qRDataImplementors = []string{"QRData"}

func (ec *executionContext) _QRData(ctx context.Context, sel ast.SelectionSet, obj *model.QRData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, qRDataImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("QRData")
		case "studentID":
			out.Values[i] = ec._QRData_studentID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "timestamp":
			out.Values[i] = ec._QRData_timestamp(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "signature":
			out.Values[i] = ec._QRData_signature(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "version":
			out.Values[i] = ec._QRData_version(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "qrString":
			out.Values[i] = ec._QRData_qrString(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var qRScanLogImplementors = []string{"QRScanLog"}

func (ec *executionContext) _QRScanLog(ctx context.Context, sel ast.SelectionSet, obj *models.QRScanLog) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, qRScanLogImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("QRScanLog")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._QRScanLog_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "studentID":
			out.Values[i] = ec._QRScanLog_studentID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "user":
			out.Values[i] = ec._QRScanLog_user(ctx, field, obj)
		case "activity":
			out.Values[i] = ec._QRScanLog_activity(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "scannedBy":
			out.Values[i] = ec._QRScanLog_scannedBy(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "scanTimestamp":
			out.Values[i] = ec._QRScanLog_scanTimestamp(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "qrTimestamp":
			out.Values[i] = ec._QRScanLog_qrTimestamp(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "valid":
			out.Values[i] = ec._QRScanLog_valid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "errorMessage":
			out.Values[i] = ec._QRScanLog_errorMessage(ctx, field, obj)
		case "scanLocation":
			out.Values[i] = ec._QRScanLog_scanLocation(ctx, field, obj)
		case "ipAddress":
			out.Values[i] = ec._QRScanLog_ipAddress(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._QRScanLog_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var qRScanResultImplementors = []string{"QRScanResult"}

func (ec *executionContext) _QRScanResult(ctx context.Context, sel ast.SelectionSet, obj *model.QRScanResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, qRScanResultImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("QRScanResult")
		case "success":
			out.Values[i] = ec._QRScanResult_success(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._QRScanResult_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "participation":
			out.Values[i] = ec._QRScanResult_participation(ctx, field, obj)
		case "user":
			out.Values[i] = ec._QRScanResult_user(ctx, field, obj)
		case "scanLog":
			out.Values[i] = ec._QRScanResult_scanLog(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "me":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_me(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "users":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_users(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "user":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_user(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "faculties":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_faculties(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "faculty":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_faculty(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "departments":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_departments(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "department":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_department(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "activities":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_activities(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "activity":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_activity(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "myActivities":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_myActivities(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "participations":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_participations(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "myParticipations":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_myParticipations(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "subscriptions":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_subscriptions(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "subscription":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_subscription(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "facultySubscription":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_facultySubscription(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "systemMetrics":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_systemMetrics(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "facultyMetrics":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_facultyMetrics(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "notificationLogs":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_notificationLogs(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "activityTemplates":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_activityTemplates(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "activityTemplate":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_activityTemplate(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "activityAssignments":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_activityAssignments(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "myActivityAssignments":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_myActivityAssignments(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "myQRData":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_myQRData(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "qrScanLogs":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_qrScanLogs(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "__type":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})
		case "__schema":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var subscriptionImplementors = []string{"Subscription"}

func (ec *executionContext) _Subscription(ctx context.Context, sel ast.SelectionSet) func(ctx context.Context) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subscriptionImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Subscription",
	})
	if len(fields) != 1 {
		ec.Errorf(ctx, "must subscribe to exactly one stream")
		return nil
	}

	switch fields[0].Name {
	case "personalNotifications":
		return ec._Subscription_personalNotifications(ctx, fields[0])
	case "activityUpdates":
		return ec._Subscription_activityUpdates(ctx, fields[0])
	case "facultyUpdates":
		return ec._Subscription_facultyUpdates(ctx, fields[0])
	case "systemAlerts":
		return ec._Subscription_systemAlerts(ctx, fields[0])
	case "qrScanEvents":
		return ec._Subscription_qrScanEvents(ctx, fields[0])
	case "participationEvents":
		return ec._Subscription_participationEvents(ctx, fields[0])
	case "subscriptionWarnings":
		return ec._Subscription_subscriptionWarnings(ctx, fields[0])
	case "activityAssignments":
		return ec._Subscription_activityAssignments(ctx, fields[0])
	case "newActivities":
		return ec._Subscription_newActivities(ctx, fields[0])
	case "heartbeat":
		return ec._Subscription_heartbeat(ctx, fields[0])
	default:
		panic("unknown field " + strconv.Quote(fields[0].Name))
	}
}

var subscriptionMetadataImplementors = []string{"SubscriptionMetadata"}

func (ec *executionContext) _SubscriptionMetadata(ctx context.Context, sel ast.SelectionSet, obj *model.SubscriptionMetadata) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subscriptionMetadataImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SubscriptionMetadata")
		case "source":
			out.Values[i] = ec._SubscriptionMetadata_source(ctx, field, obj)
		case "userID":
			out.Values[i] = ec._SubscriptionMetadata_userID(ctx, field, obj)
		case "facultyID":
			out.Values[i] = ec._SubscriptionMetadata_facultyID(ctx, field, obj)
		case "activityID":
			out.Values[i] = ec._SubscriptionMetadata_activityID(ctx, field, obj)
		case "connectionID":
			out.Values[i] = ec._SubscriptionMetadata_connectionID(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var subscriptionPayloadImplementors = []string{"SubscriptionPayload"}

func (ec *executionContext) _SubscriptionPayload(ctx context.Context, sel ast.SelectionSet, obj *model.SubscriptionPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subscriptionPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SubscriptionPayload")
		case "type":
			out.Values[i] = ec._SubscriptionPayload_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "timestamp":
			out.Values[i] = ec._SubscriptionPayload_timestamp(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._SubscriptionPayload_data(ctx, field, obj)
		case "metadata":
			out.Values[i] = ec._SubscriptionPayload_metadata(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var systemAlertImplementors = []string{"SystemAlert", "SubscriptionData"}

func (ec *executionContext) _SystemAlert(ctx context.Context, sel ast.SelectionSet, obj *models.SystemAlert) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, systemAlertImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SystemAlert")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemAlert_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "type":
			out.Values[i] = ec._SystemAlert_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "level":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemAlert_level(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "title":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemAlert_title(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "message":
			out.Values[i] = ec._SystemAlert_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "facultyID":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemAlert_facultyID(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "userID":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemAlert_userID(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "data":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemAlert_data(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "timestamp":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemAlert_timestamp(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var systemMetricsImplementors = []string{"SystemMetrics"}

func (ec *executionContext) _SystemMetrics(ctx context.Context, sel ast.SelectionSet, obj *models.SystemMetrics) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, systemMetricsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SystemMetrics")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemMetrics_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "totalFaculties":
			out.Values[i] = ec._SystemMetrics_totalFaculties(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "totalDepartments":
			out.Values[i] = ec._SystemMetrics_totalDepartments(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "totalStudents":
			out.Values[i] = ec._SystemMetrics_totalStudents(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "totalActivities":
			out.Values[i] = ec._SystemMetrics_totalActivities(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "totalParticipations":
			out.Values[i] = ec._SystemMetrics_totalParticipations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "activeSubscriptions":
			out.Values[i] = ec._SystemMetrics_activeSubscriptions(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "expiredSubscriptions":
			out.Values[i] = ec._SystemMetrics_expiredSubscriptions(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "date":
			out.Values[i] = ec._SystemMetrics_date(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._SystemMetrics_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._SystemMetrics_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var userImplementors = []string{"User", "SubscriptionData"}

func (ec *executionContext) _User(ctx context.Context, sel ast.SelectionSet, obj *models.User) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("User")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "studentID":
			out.Values[i] = ec._User_studentID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "email":
			out.Values[i] = ec._User_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "firstName":
			out.Values[i] = ec._User_firstName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lastName":
			out.Values[i] = ec._User_lastName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "role":
			out.Values[i] = ec._User_role(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "qrSecret":
			out.Values[i] = ec._User_qrSecret(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "faculty":
			out.Values[i] = ec._User_faculty(ctx, field, obj)
		case "department":
			out.Values[i] = ec._User_department(ctx, field, obj)
		case "isActive":
			out.Values[i] = ec._User_isActive(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lastLoginAt":
			out.Values[i] = ec._User_lastLoginAt(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._User_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._User_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "participations":
			out.Values[i] = ec._User_participations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "subscriptions":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_subscriptions(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "isRepeatable":
			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___InputValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___InputValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":
			out.Values[i] = ec.___Schema_description(ctx, field, obj)
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "specifiedByURL":
			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		case "isOneOf":
			out.Values[i] = ec.___Type_isOneOf(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNActivity2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐActivity(ctx context.Context, sel ast.SelectionSet, v models.Activity) graphql.Marshaler {
	return ec._Activity(ctx, sel, &v)
}

func (ec *executionContext) marshalNActivity2ᚕgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐActivityᚄ(ctx context.Context, sel ast.SelectionSet, v []models.Activity) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNActivity2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐActivity(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNActivity2ᚕᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐActivityᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.Activity) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNActivity2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐActivity(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNActivity2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐActivity(ctx context.Context, sel ast.SelectionSet, v *models.Activity) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Activity(ctx, sel, v)
}

func (ec *executionContext) marshalNActivityAssignment2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐActivityAssignment(ctx context.Context, sel ast.SelectionSet, v models.ActivityAssignment) graphql.Marshaler {
	return ec._ActivityAssignment(ctx, sel, &v)
}

func (ec *executionContext) marshalNActivityAssignment2ᚕgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐActivityAssignmentᚄ(ctx context.Context, sel ast.SelectionSet, v []models.ActivityAssignment) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNActivityAssignment2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐActivityAssignment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNActivityAssignment2ᚕᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐActivityAssignmentᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.ActivityAssignment) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNActivityAssignment2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐActivityAssignment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNActivityAssignment2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐActivityAssignment(ctx context.Context, sel ast.SelectionSet, v *models.ActivityAssignment) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ActivityAssignment(ctx, sel, v)
}

func (ec *executionContext) unmarshalNActivityStatus2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐActivityStatus(ctx context.Context, v any) (models.ActivityStatus, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.ActivityStatus(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNActivityStatus2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐActivityStatus(ctx context.Context, sel ast.SelectionSet, v models.ActivityStatus) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNActivityTemplate2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐActivityTemplate(ctx context.Context, sel ast.SelectionSet, v models.ActivityTemplate) graphql.Marshaler {
	return ec._ActivityTemplate(ctx, sel, &v)
}

func (ec *executionContext) marshalNActivityTemplate2ᚕᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐActivityTemplateᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.ActivityTemplate) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNActivityTemplate2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐActivityTemplate(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNActivityTemplate2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐActivityTemplate(ctx context.Context, sel ast.SelectionSet, v *models.ActivityTemplate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ActivityTemplate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNActivityType2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐActivityType(ctx context.Context, v any) (models.ActivityType, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.ActivityType(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNActivityType2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐActivityType(ctx context.Context, sel ast.SelectionSet, v models.ActivityType) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNAuthPayload2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐAuthPayload(ctx context.Context, sel ast.SelectionSet, v model.AuthPayload) graphql.Marshaler {
	return ec._AuthPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNAuthPayload2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐAuthPayload(ctx context.Context, sel ast.SelectionSet, v *model.AuthPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AuthPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v any) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNCreateActivityAssignmentInput2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐCreateActivityAssignmentInput(ctx context.Context, v any) (model.CreateActivityAssignmentInput, error) {
	res, err := ec.unmarshalInputCreateActivityAssignmentInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateActivityInput2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐCreateActivityInput(ctx context.Context, v any) (model.CreateActivityInput, error) {
	res, err := ec.unmarshalInputCreateActivityInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateActivityTemplateInput2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐCreateActivityTemplateInput(ctx context.Context, v any) (model.CreateActivityTemplateInput, error) {
	res, err := ec.unmarshalInputCreateActivityTemplateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateDepartmentInput2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐCreateDepartmentInput(ctx context.Context, v any) (model.CreateDepartmentInput, error) {
	res, err := ec.unmarshalInputCreateDepartmentInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateFacultyInput2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐCreateFacultyInput(ctx context.Context, v any) (model.CreateFacultyInput, error) {
	res, err := ec.unmarshalInputCreateFacultyInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateSubscriptionInput2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐCreateSubscriptionInput(ctx context.Context, v any) (model.CreateSubscriptionInput, error) {
	res, err := ec.unmarshalInputCreateSubscriptionInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDepartment2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐDepartment(ctx context.Context, sel ast.SelectionSet, v models.Department) graphql.Marshaler {
	return ec._Department(ctx, sel, &v)
}

func (ec *executionContext) marshalNDepartment2ᚕgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐDepartmentᚄ(ctx context.Context, sel ast.SelectionSet, v []models.Department) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDepartment2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐDepartment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNDepartment2ᚕᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐDepartmentᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.Department) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDepartment2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐDepartment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNDepartment2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐDepartment(ctx context.Context, sel ast.SelectionSet, v *models.Department) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Department(ctx, sel, v)
}

func (ec *executionContext) marshalNFaculty2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐFaculty(ctx context.Context, sel ast.SelectionSet, v models.Faculty) graphql.Marshaler {
	return ec._Faculty(ctx, sel, &v)
}

func (ec *executionContext) marshalNFaculty2ᚕᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐFacultyᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.Faculty) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNFaculty2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐFaculty(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNFaculty2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐFaculty(ctx context.Context, sel ast.SelectionSet, v *models.Faculty) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Faculty(ctx, sel, v)
}

func (ec *executionContext) marshalNFacultyMetrics2ᚕᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐFacultyMetricsᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.FacultyMetrics) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNFacultyMetrics2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐFacultyMetrics(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNFacultyMetrics2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐFacultyMetrics(ctx context.Context, sel ast.SelectionSet, v *models.FacultyMetrics) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._FacultyMetrics(ctx, sel, v)
}

func (ec *executionContext) marshalNFacultySubscription2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐFacultySubscription(ctx context.Context, sel ast.SelectionSet, v model.FacultySubscription) graphql.Marshaler {
	return ec._FacultySubscription(ctx, sel, &v)
}

func (ec *executionContext) marshalNFacultySubscription2ᚕᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐFacultySubscriptionᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.FacultySubscription) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNFacultySubscription2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐFacultySubscription(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNFacultySubscription2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐFacultySubscription(ctx context.Context, sel ast.SelectionSet, v *model.FacultySubscription) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._FacultySubscription(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v any) (float64, error) {
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalFloatContext(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v any) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNLoginInput2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐLoginInput(ctx context.Context, v any) (model.LoginInput, error) {
	res, err := ec.unmarshalInputLoginInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNNotificationLog2ᚕᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐNotificationLogᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.NotificationLog) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNNotificationLog2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐNotificationLog(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNNotificationLog2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐNotificationLog(ctx context.Context, sel ast.SelectionSet, v *models.NotificationLog) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._NotificationLog(ctx, sel, v)
}

func (ec *executionContext) marshalNParticipation2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐParticipation(ctx context.Context, sel ast.SelectionSet, v models.Participation) graphql.Marshaler {
	return ec._Participation(ctx, sel, &v)
}

func (ec *executionContext) marshalNParticipation2ᚕgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐParticipationᚄ(ctx context.Context, sel ast.SelectionSet, v []models.Participation) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNParticipation2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐParticipation(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNParticipation2ᚕᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐParticipationᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.Participation) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNParticipation2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐParticipation(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNParticipation2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐParticipation(ctx context.Context, sel ast.SelectionSet, v *models.Participation) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Participation(ctx, sel, v)
}

func (ec *executionContext) unmarshalNParticipationStatus2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐParticipationStatus(ctx context.Context, v any) (models.ParticipationStatus, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.ParticipationStatus(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNParticipationStatus2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐParticipationStatus(ctx context.Context, sel ast.SelectionSet, v models.ParticipationStatus) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNQRData2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐQRData(ctx context.Context, sel ast.SelectionSet, v model.QRData) graphql.Marshaler {
	return ec._QRData(ctx, sel, &v)
}

func (ec *executionContext) marshalNQRData2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐQRData(ctx context.Context, sel ast.SelectionSet, v *model.QRData) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._QRData(ctx, sel, v)
}

func (ec *executionContext) unmarshalNQRScanInput2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐQRScanInput(ctx context.Context, v any) (model.QRScanInput, error) {
	res, err := ec.unmarshalInputQRScanInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNQRScanLog2ᚕᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐQRScanLogᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.QRScanLog) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNQRScanLog2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐQRScanLog(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNQRScanLog2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐQRScanLog(ctx context.Context, sel ast.SelectionSet, v *models.QRScanLog) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._QRScanLog(ctx, sel, v)
}

func (ec *executionContext) marshalNQRScanResult2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐQRScanResult(ctx context.Context, sel ast.SelectionSet, v model.QRScanResult) graphql.Marshaler {
	return ec._QRScanResult(ctx, sel, &v)
}

func (ec *executionContext) marshalNQRScanResult2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐQRScanResult(ctx context.Context, sel ast.SelectionSet, v *model.QRScanResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._QRScanResult(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRegisterInput2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐRegisterInput(ctx context.Context, v any) (model.RegisterInput, error) {
	res, err := ec.unmarshalInputRegisterInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNSubscriptionPayload2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐSubscriptionPayload(ctx context.Context, sel ast.SelectionSet, v model.SubscriptionPayload) graphql.Marshaler {
	return ec._SubscriptionPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNSubscriptionPayload2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐSubscriptionPayload(ctx context.Context, sel ast.SelectionSet, v *model.SubscriptionPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SubscriptionPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSubscriptionStatus2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐSubscriptionStatus(ctx context.Context, v any) (models.SubscriptionStatus, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.SubscriptionStatus(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSubscriptionStatus2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐSubscriptionStatus(ctx context.Context, sel ast.SelectionSet, v models.SubscriptionStatus) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNSubscriptionType2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐSubscriptionType(ctx context.Context, v any) (models.SubscriptionType, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.SubscriptionType(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSubscriptionType2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐSubscriptionType(ctx context.Context, sel ast.SelectionSet, v models.SubscriptionType) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNSystemMetrics2ᚕᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐSystemMetricsᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.SystemMetrics) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSystemMetrics2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐSystemMetrics(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSystemMetrics2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐSystemMetrics(ctx context.Context, sel ast.SelectionSet, v *models.SystemMetrics) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SystemMetrics(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTime2timeᚐTime(ctx context.Context, v any) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalTime(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTime2ᚖtimeᚐTime(ctx context.Context, v any) (*time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	_ = sel
	res := graphql.MarshalTime(*v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNUpdateActivityAssignmentInput2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐUpdateActivityAssignmentInput(ctx context.Context, v any) (model.UpdateActivityAssignmentInput, error) {
	res, err := ec.unmarshalInputUpdateActivityAssignmentInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateActivityInput2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐUpdateActivityInput(ctx context.Context, v any) (model.UpdateActivityInput, error) {
	res, err := ec.unmarshalInputUpdateActivityInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateActivityTemplateInput2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐUpdateActivityTemplateInput(ctx context.Context, v any) (model.UpdateActivityTemplateInput, error) {
	res, err := ec.unmarshalInputUpdateActivityTemplateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateDepartmentInput2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐUpdateDepartmentInput(ctx context.Context, v any) (model.UpdateDepartmentInput, error) {
	res, err := ec.unmarshalInputUpdateDepartmentInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateSubscriptionInput2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐUpdateSubscriptionInput(ctx context.Context, v any) (model.UpdateSubscriptionInput, error) {
	res, err := ec.unmarshalInputUpdateSubscriptionInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUser2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUser(ctx context.Context, sel ast.SelectionSet, v models.User) graphql.Marshaler {
	return ec._User(ctx, sel, &v)
}

func (ec *executionContext) marshalNUser2ᚕgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUserᚄ(ctx context.Context, sel ast.SelectionSet, v []models.User) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUser2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUser(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNUser2ᚕᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUserᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.User) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUser2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUser(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNUser2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUser(ctx context.Context, sel ast.SelectionSet, v *models.User) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUserRole2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUserRole(ctx context.Context, v any) (models.UserRole, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.UserRole(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUserRole2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUserRole(ctx context.Context, sel ast.SelectionSet, v models.UserRole) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNUserRole2ᚕgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUserRoleᚄ(ctx context.Context, v any) ([]models.UserRole, error) {
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]models.UserRole, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNUserRole2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUserRole(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNUserRole2ᚕgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUserRoleᚄ(ctx context.Context, sel ast.SelectionSet, v []models.UserRole) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUserRole2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUserRole(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v any) ([]string, error) {
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalOActivity2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐActivity(ctx context.Context, sel ast.SelectionSet, v *models.Activity) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Activity(ctx, sel, v)
}

func (ec *executionContext) unmarshalOActivityStatus2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐActivityStatus(ctx context.Context, v any) (*models.ActivityStatus, error) {
	if v == nil {
		return nil, nil
	}
	tmp, err := graphql.UnmarshalString(v)
	res := models.ActivityStatus(tmp)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOActivityStatus2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐActivityStatus(ctx context.Context, sel ast.SelectionSet, v *models.ActivityStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalString(string(*v))
	return res
}

func (ec *executionContext) marshalOActivityTemplate2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐActivityTemplate(ctx context.Context, sel ast.SelectionSet, v *models.ActivityTemplate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ActivityTemplate(ctx, sel, v)
}

func (ec *executionContext) unmarshalOActivityType2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐActivityType(ctx context.Context, v any) (*models.ActivityType, error) {
	if v == nil {
		return nil, nil
	}
	tmp, err := graphql.UnmarshalString(v)
	res := models.ActivityType(tmp)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOActivityType2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐActivityType(ctx context.Context, sel ast.SelectionSet, v *models.ActivityType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalString(string(*v))
	return res
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v any) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	_ = sel
	_ = ctx
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v any) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) marshalODepartment2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐDepartment(ctx context.Context, sel ast.SelectionSet, v *models.Department) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Department(ctx, sel, v)
}

func (ec *executionContext) marshalOFaculty2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐFaculty(ctx context.Context, sel ast.SelectionSet, v *models.Faculty) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Faculty(ctx, sel, v)
}

func (ec *executionContext) marshalOFacultySubscription2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐFacultySubscription(ctx context.Context, sel ast.SelectionSet, v *model.FacultySubscription) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FacultySubscription(ctx, sel, v)
}

func (ec *executionContext) unmarshalOID2ᚖstring(ctx context.Context, v any) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalID(*v)
	return res
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v any) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalInt(*v)
	return res
}

func (ec *executionContext) marshalOParticipation2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐParticipation(ctx context.Context, sel ast.SelectionSet, v *models.Participation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Participation(ctx, sel, v)
}

func (ec *executionContext) marshalOQRScanLog2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐQRScanLog(ctx context.Context, sel ast.SelectionSet, v *models.QRScanLog) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._QRScanLog(ctx, sel, v)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	_ = ctx
	res := graphql.MarshalString(v)
	return res
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v any) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v any) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalOSubscriptionData2githubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐSubscriptionData(ctx context.Context, sel ast.SelectionSet, v model.SubscriptionData) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SubscriptionData(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSubscriptionFilter2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐSubscriptionFilter(ctx context.Context, v any) (*model.SubscriptionFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSubscriptionFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSubscriptionMetadata2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋgraphᚋmodelᚐSubscriptionMetadata(ctx context.Context, sel ast.SelectionSet, v *model.SubscriptionMetadata) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SubscriptionMetadata(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSubscriptionStatus2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐSubscriptionStatus(ctx context.Context, v any) (*models.SubscriptionStatus, error) {
	if v == nil {
		return nil, nil
	}
	tmp, err := graphql.UnmarshalString(v)
	res := models.SubscriptionStatus(tmp)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSubscriptionStatus2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐSubscriptionStatus(ctx context.Context, sel ast.SelectionSet, v *models.SubscriptionStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalString(string(*v))
	return res
}

func (ec *executionContext) unmarshalOSubscriptionType2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐSubscriptionType(ctx context.Context, v any) (*models.SubscriptionType, error) {
	if v == nil {
		return nil, nil
	}
	tmp, err := graphql.UnmarshalString(v)
	res := models.SubscriptionType(tmp)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSubscriptionType2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐSubscriptionType(ctx context.Context, sel ast.SelectionSet, v *models.SubscriptionType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalString(string(*v))
	return res
}

func (ec *executionContext) unmarshalOTime2ᚖtimeᚐTime(ctx context.Context, v any) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalTime(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalTime(*v)
	return res
}

func (ec *executionContext) marshalOUser2ᚖgithubᚗcomᚋkruakemathsᚋtruᚑactivityᚋbackendᚋinternalᚋmodelsᚐUser(ctx context.Context, sel ast.SelectionSet, v *models.User) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
