// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"time"

	"github.com/kruakemaths/tru-activity/backend/internal/models"
)

type SubscriptionData interface {
	IsSubscriptionData()
}

type AuthPayload struct {
	Token string       `json:"token"`
	User  *models.User `json:"user"`
}

type CreateActivityAssignmentInput struct {
	ActivityID string  `json:"activityID"`
	AdminID    string  `json:"adminID"`
	CanScanQR  *bool   `json:"canScanQR,omitempty"`
	CanApprove *bool   `json:"canApprove,omitempty"`
	Notes      *string `json:"notes,omitempty"`
}

type CreateActivityInput struct {
	Title           string              `json:"title"`
	Description     *string             `json:"description,omitempty"`
	Type            models.ActivityType `json:"type"`
	StartDate       time.Time           `json:"startDate"`
	EndDate         time.Time           `json:"endDate"`
	Location        *string             `json:"location,omitempty"`
	MaxParticipants *int                `json:"maxParticipants,omitempty"`
	RequireApproval bool                `json:"requireApproval"`
	Points          int                 `json:"points"`
	FacultyID       *string             `json:"facultyID,omitempty"`
	DepartmentID    *string             `json:"departmentID,omitempty"`
	TemplateID      *string             `json:"templateID,omitempty"`
	IsRecurring     *bool               `json:"isRecurring,omitempty"`
	RecurrenceRule  *string             `json:"recurrenceRule,omitempty"`
	QRCodeRequired  *bool               `json:"qrCodeRequired,omitempty"`
	AutoApprove     *bool               `json:"autoApprove,omitempty"`
}

type CreateActivityTemplateInput struct {
	Name            string              `json:"name"`
	Description     *string             `json:"description,omitempty"`
	Type            models.ActivityType `json:"type"`
	DefaultDuration int                 `json:"defaultDuration"`
	Location        *string             `json:"location,omitempty"`
	MaxParticipants *int                `json:"maxParticipants,omitempty"`
	RequireApproval bool                `json:"requireApproval"`
	Points          int                 `json:"points"`
	QRCodeRequired  *bool               `json:"qrCodeRequired,omitempty"`
	AutoApprove     *bool               `json:"autoApprove,omitempty"`
	FacultyID       *string             `json:"facultyID,omitempty"`
}

type CreateDepartmentInput struct {
	Name      string `json:"name"`
	Code      string `json:"code"`
	FacultyID string `json:"facultyID"`
}

type CreateFacultyInput struct {
	Name        string  `json:"name"`
	Code        string  `json:"code"`
	Description *string `json:"description,omitempty"`
}

type CreateSubscriptionInput struct {
	FacultyID string                  `json:"facultyID"`
	Type      models.SubscriptionType `json:"type"`
	StartDate time.Time               `json:"startDate"`
	EndDate   time.Time               `json:"endDate"`
}

type FacultySubscription struct {
	ID                string                    `json:"id"`
	Faculty           *models.Faculty           `json:"faculty"`
	Type              models.SubscriptionType   `json:"type"`
	Status            models.SubscriptionStatus `json:"status"`
	StartDate         time.Time                 `json:"startDate"`
	EndDate           time.Time                 `json:"endDate"`
	DaysUntilExpiry   int                       `json:"daysUntilExpiry"`
	NeedsNotification bool                      `json:"needsNotification"`
	CreatedAt         time.Time                 `json:"createdAt"`
	UpdatedAt         time.Time                 `json:"updatedAt"`
}

func (FacultySubscription) IsSubscriptionData() {}

type LoginInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type Mutation struct {
}

type QRData struct {
	StudentID string `json:"studentID"`
	Timestamp string `json:"timestamp"`
	Signature string `json:"signature"`
	Version   int    `json:"version"`
	QRString  string `json:"qrString"`
}

type QRScanInput struct {
	QRData       string  `json:"qrData"`
	ActivityID   string  `json:"activityID"`
	ScanLocation *string `json:"scanLocation,omitempty"`
}

type QRScanResult struct {
	Success       bool                  `json:"success"`
	Message       string                `json:"message"`
	Participation *models.Participation `json:"participation,omitempty"`
	User          *models.User          `json:"user,omitempty"`
	ScanLog       *models.QRScanLog     `json:"scanLog,omitempty"`
}

type Query struct {
}

type RegisterInput struct {
	StudentID    string  `json:"studentID"`
	Email        string  `json:"email"`
	FirstName    string  `json:"firstName"`
	LastName     string  `json:"lastName"`
	Password     string  `json:"password"`
	FacultyID    *string `json:"facultyID,omitempty"`
	DepartmentID *string `json:"departmentID,omitempty"`
}

type SubscriptionFilter struct {
	FacultyID  *string  `json:"facultyID,omitempty"`
	ActivityID *string  `json:"activityID,omitempty"`
	UserID     *string  `json:"userID,omitempty"`
	Types      []string `json:"types,omitempty"`
}

type SubscriptionMetadata struct {
	Source       *string `json:"source,omitempty"`
	UserID       *string `json:"userID,omitempty"`
	FacultyID    *string `json:"facultyID,omitempty"`
	ActivityID   *string `json:"activityID,omitempty"`
	ConnectionID *string `json:"connectionID,omitempty"`
}

type SubscriptionPayload struct {
	Type      string                `json:"type"`
	Timestamp time.Time             `json:"timestamp"`
	Data      SubscriptionData      `json:"data,omitempty"`
	Metadata  *SubscriptionMetadata `json:"metadata,omitempty"`
}

type UpdateActivityAssignmentInput struct {
	CanScanQR  *bool   `json:"canScanQR,omitempty"`
	CanApprove *bool   `json:"canApprove,omitempty"`
	Notes      *string `json:"notes,omitempty"`
}

type UpdateActivityInput struct {
	Title           *string                `json:"title,omitempty"`
	Description     *string                `json:"description,omitempty"`
	Type            *models.ActivityType   `json:"type,omitempty"`
	Status          *models.ActivityStatus `json:"status,omitempty"`
	StartDate       *time.Time             `json:"startDate,omitempty"`
	EndDate         *time.Time             `json:"endDate,omitempty"`
	Location        *string                `json:"location,omitempty"`
	MaxParticipants *int                   `json:"maxParticipants,omitempty"`
	RequireApproval *bool                  `json:"requireApproval,omitempty"`
	Points          *int                   `json:"points,omitempty"`
	FacultyID       *string                `json:"facultyID,omitempty"`
	DepartmentID    *string                `json:"departmentID,omitempty"`
	QRCodeRequired  *bool                  `json:"qrCodeRequired,omitempty"`
	AutoApprove     *bool                  `json:"autoApprove,omitempty"`
}

type UpdateActivityTemplateInput struct {
	Name            *string              `json:"name,omitempty"`
	Description     *string              `json:"description,omitempty"`
	Type            *models.ActivityType `json:"type,omitempty"`
	DefaultDuration *int                 `json:"defaultDuration,omitempty"`
	Location        *string              `json:"location,omitempty"`
	MaxParticipants *int                 `json:"maxParticipants,omitempty"`
	RequireApproval *bool                `json:"requireApproval,omitempty"`
	Points          *int                 `json:"points,omitempty"`
	QRCodeRequired  *bool                `json:"qrCodeRequired,omitempty"`
	AutoApprove     *bool                `json:"autoApprove,omitempty"`
	IsActive        *bool                `json:"isActive,omitempty"`
}

type UpdateDepartmentInput struct {
	Name *string `json:"name,omitempty"`
	Code *string `json:"code,omitempty"`
}

type UpdateSubscriptionInput struct {
	Type      *models.SubscriptionType   `json:"type,omitempty"`
	StartDate *time.Time                 `json:"startDate,omitempty"`
	EndDate   *time.Time                 `json:"endDate,omitempty"`
	Status    *models.SubscriptionStatus `json:"status,omitempty"`
}
