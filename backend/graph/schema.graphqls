# GraphQL schema definition file

directive @auth on FIELD_DEFINITION
directive @hasRole(roles: [UserRole!]!) on FIELD_DEFINITION
directive @hasPermission(permission: String!) on FIELD_DEFINITION

scalar Time

type User {
  id: ID!
  studentID: String!
  email: String!
  firstName: String!
  lastName: String!
  role: UserRole!
  qrSecret: String!
  faculty: Faculty
  department: Department
  isActive: Boolean!
  lastLoginAt: Time
  createdAt: Time!
  updatedAt: Time!
  participations: [Participation!]!
  subscriptions: [FacultySubscription!]!
}

enum UserRole {
  STUDENT
  SUPER_ADMIN
  FACULTY_ADMIN
  REGULAR_ADMIN
}

type Faculty {
  id: ID!
  name: String!
  code: String!
  description: String
  isActive: Boolean!
  createdAt: Time!
  updatedAt: Time!
  departments: [Department!]!
  users: [User!]!
  activities: [Activity!]!
}

type Department {
  id: ID!
  name: String!
  code: String!
  faculty: Faculty!
  isActive: Boolean!
  createdAt: Time!
  updatedAt: Time!
  users: [User!]!
  activities: [Activity!]!
}

type Activity {
  id: ID!
  title: String!
  description: String
  type: ActivityType!
  status: ActivityStatus!
  startDate: Time!
  endDate: Time!
  location: String
  maxParticipants: Int
  requireApproval: Boolean!
  points: Int!
  faculty: Faculty
  department: Department
  createdBy: User!
  template: ActivityTemplate
  isRecurring: Boolean!
  recurrenceRule: String
  parentActivity: Activity
  qrCodeRequired: Boolean!
  autoApprove: Boolean!
  createdAt: Time!
  updatedAt: Time!
  participations: [Participation!]!
  assignments: [ActivityAssignment!]!
  childActivities: [Activity!]!
}

enum ActivityType {
  WORKSHOP
  SEMINAR
  COMPETITION
  VOLUNTEER
  OTHER
}

enum ActivityStatus {
  DRAFT
  ACTIVE
  COMPLETED
  CANCELLED
}

type Participation {
  id: ID!
  user: User!
  activity: Activity!
  status: ParticipationStatus!
  registeredAt: Time!
  approvedAt: Time
  attendedAt: Time
  qrScannedAt: Time
  scannedBy: User
  scanLocation: String
  notes: String
  createdAt: Time!
  updatedAt: Time!
}

enum ParticipationStatus {
  PENDING
  APPROVED
  REJECTED
  ATTENDED
  ABSENT
}

type FacultySubscription {
  id: ID!
  faculty: Faculty!
  type: SubscriptionType!
  status: SubscriptionStatus!
  startDate: Time!
  endDate: Time!
  daysUntilExpiry: Int!
  needsNotification: Boolean!
  createdAt: Time!
  updatedAt: Time!
}

enum SubscriptionType {
  BASIC
  PREMIUM
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
}

type AuthPayload {
  token: String!
  user: User!
}

input LoginInput {
  email: String!
  password: String!
}

input RegisterInput {
  studentID: String!
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  facultyID: ID
  departmentID: ID
}

input CreateActivityInput {
  title: String!
  description: String
  type: ActivityType!
  startDate: Time!
  endDate: Time!
  location: String
  maxParticipants: Int
  requireApproval: Boolean!
  points: Int!
  facultyID: ID
  departmentID: ID
  templateID: ID
  isRecurring: Boolean
  recurrenceRule: String
  qrCodeRequired: Boolean
  autoApprove: Boolean
}

input UpdateActivityInput {
  title: String
  description: String
  type: ActivityType
  status: ActivityStatus
  startDate: Time
  endDate: Time
  location: String
  maxParticipants: Int
  requireApproval: Boolean
  points: Int
  facultyID: ID
  departmentID: ID
  qrCodeRequired: Boolean
  autoApprove: Boolean
}

type ActivityTemplate {
  id: ID!
  name: String!
  description: String
  type: ActivityType!
  defaultDuration: Int!
  location: String
  maxParticipants: Int
  requireApproval: Boolean!
  points: Int!
  qrCodeRequired: Boolean!
  autoApprove: Boolean!
  faculty: Faculty
  createdBy: User!
  isActive: Boolean!
  createdAt: Time!
  updatedAt: Time!
  activities: [Activity!]!
}

input CreateActivityTemplateInput {
  name: String!
  description: String
  type: ActivityType!
  defaultDuration: Int!
  location: String
  maxParticipants: Int
  requireApproval: Boolean!
  points: Int!
  qrCodeRequired: Boolean
  autoApprove: Boolean
  facultyID: ID
}

input UpdateActivityTemplateInput {
  name: String
  description: String
  type: ActivityType
  defaultDuration: Int
  location: String
  maxParticipants: Int
  requireApproval: Boolean
  points: Int
  qrCodeRequired: Boolean
  autoApprove: Boolean
  isActive: Boolean
}

type ActivityAssignment {
  id: ID!
  activity: Activity!
  admin: User!
  assignedBy: User!
  canScanQR: Boolean!
  canApprove: Boolean!
  notes: String
  createdAt: Time!
  updatedAt: Time!
}

input CreateActivityAssignmentInput {
  activityID: ID!
  adminID: ID!
  canScanQR: Boolean
  canApprove: Boolean
  notes: String
}

input UpdateActivityAssignmentInput {
  canScanQR: Boolean
  canApprove: Boolean
  notes: String
}

type QRScanLog {
  id: ID!
  studentID: String!
  user: User
  activity: Activity!
  scannedBy: User!
  scanTimestamp: Time!
  qrTimestamp: Time!
  valid: Boolean!
  errorMessage: String
  scanLocation: String
  ipAddress: String
  createdAt: Time!
}

type QRData {
  studentID: String!
  timestamp: String!
  signature: String!
  version: Int!
  qrString: String!
}

type QRScanResult {
  success: Boolean!
  message: String!
  participation: Participation
  user: User
  scanLog: QRScanLog
}

input QRScanInput {
  qrData: String!
  activityID: ID!
  scanLocation: String
}

input CreateFacultyInput {
  name: String!
  code: String!
  description: String
}

input CreateDepartmentInput {
  name: String!
  code: String!
  facultyID: ID!
}

input UpdateDepartmentInput {
  name: String
  code: String
}

input CreateSubscriptionInput {
  facultyID: ID!
  type: SubscriptionType!
  startDate: Time!
  endDate: Time!
}

input UpdateSubscriptionInput {
  type: SubscriptionType
  startDate: Time
  endDate: Time
  status: SubscriptionStatus
}

type FacultyMetrics {
  id: ID!
  faculty: Faculty!
  totalStudents: Int!
  activeStudents: Int!
  totalActivities: Int!
  completedActivities: Int!
  totalParticipants: Int!
  averageAttendance: Float!
  date: Time!
  createdAt: Time!
  updatedAt: Time!
}

type SystemMetrics {
  id: ID!
  totalFaculties: Int!
  totalDepartments: Int!
  totalStudents: Int!
  totalActivities: Int!
  totalParticipations: Int!
  activeSubscriptions: Int!
  expiredSubscriptions: Int!
  date: Time!
  createdAt: Time!
  updatedAt: Time!
}

type NotificationLog {
  id: ID!
  subscription: FacultySubscription!
  type: String!
  status: String!
  email: String!
  subject: String!
  message: String!
  sentAt: Time
  errorMessage: String
  createdAt: Time!
  updatedAt: Time!
}

type Query {
  # User queries
  me: User @auth
  users(limit: Int, offset: Int): [User!]! @hasRole(roles: [SUPER_ADMIN, FACULTY_ADMIN, REGULAR_ADMIN])
  user(id: ID!): User @auth
  
  # Faculty queries
  faculties: [Faculty!]! @auth
  faculty(id: ID!): Faculty @auth
  
  # Department queries
  departments(facultyID: ID): [Department!]! @auth
  department(id: ID!): Department @auth
  
  # Activity queries
  activities(limit: Int, offset: Int, facultyID: ID, status: ActivityStatus): [Activity!]! @auth
  activity(id: ID!): Activity @auth
  myActivities: [Activity!]! @auth
  
  # Participation queries
  participations(activityID: ID, userID: ID): [Participation!]! @hasRole(roles: [SUPER_ADMIN, FACULTY_ADMIN, REGULAR_ADMIN])
  myParticipations: [Participation!]! @auth
  
  # Subscription queries
  subscriptions: [FacultySubscription!]! @hasRole(roles: [SUPER_ADMIN])
  subscription(id: ID!): FacultySubscription @hasRole(roles: [SUPER_ADMIN, FACULTY_ADMIN])
  facultySubscription(facultyID: ID!): FacultySubscription @hasRole(roles: [SUPER_ADMIN, FACULTY_ADMIN])
  
  # Analytics queries
  systemMetrics(fromDate: Time, toDate: Time): [SystemMetrics!]! @hasRole(roles: [SUPER_ADMIN])
  facultyMetrics(facultyID: ID, fromDate: Time, toDate: Time): [FacultyMetrics!]! @hasRole(roles: [SUPER_ADMIN, FACULTY_ADMIN])
  
  # Notification queries
  notificationLogs(subscriptionID: ID, limit: Int, offset: Int): [NotificationLog!]! @hasRole(roles: [SUPER_ADMIN, FACULTY_ADMIN])
  
  # Activity Template queries
  activityTemplates(facultyID: ID): [ActivityTemplate!]! @hasRole(roles: [SUPER_ADMIN, FACULTY_ADMIN])
  activityTemplate(id: ID!): ActivityTemplate @hasRole(roles: [SUPER_ADMIN, FACULTY_ADMIN])
  
  # Activity Assignment queries
  activityAssignments(activityID: ID, adminID: ID): [ActivityAssignment!]! @hasRole(roles: [SUPER_ADMIN, FACULTY_ADMIN])
  myActivityAssignments: [ActivityAssignment!]! @hasRole(roles: [REGULAR_ADMIN])
  
  # QR Code queries
  myQRData: QRData! @auth
  qrScanLogs(activityID: ID, userID: ID, limit: Int): [QRScanLog!]! @hasRole(roles: [SUPER_ADMIN, FACULTY_ADMIN, REGULAR_ADMIN])
}

type Mutation {
  # Authentication
  login(input: LoginInput!): AuthPayload!
  register(input: RegisterInput!): AuthPayload!
  refreshToken: AuthPayload! @auth
  
  # Activity management
  createActivity(input: CreateActivityInput!): Activity! @hasRole(roles: [SUPER_ADMIN, FACULTY_ADMIN])
  updateActivity(id: ID!, input: UpdateActivityInput!): Activity! @auth
  deleteActivity(id: ID!): Boolean! @auth
  
  # Participation management
  joinActivity(activityID: ID!): Participation! @auth
  leaveActivity(activityID: ID!): Boolean! @auth
  approveParticipation(participationID: ID!): Participation! @hasRole(roles: [SUPER_ADMIN, FACULTY_ADMIN, REGULAR_ADMIN])
  rejectParticipation(participationID: ID!): Participation! @hasRole(roles: [SUPER_ADMIN, FACULTY_ADMIN, REGULAR_ADMIN])
  markAttendance(participationID: ID!, attended: Boolean!): Participation! @hasRole(roles: [SUPER_ADMIN, FACULTY_ADMIN, REGULAR_ADMIN])
  
  # Faculty management (Super Admin only)
  createFaculty(input: CreateFacultyInput!): Faculty! @hasRole(roles: [SUPER_ADMIN])
  updateFaculty(id: ID!, input: CreateFacultyInput!): Faculty! @hasRole(roles: [SUPER_ADMIN])
  deleteFaculty(id: ID!): Boolean! @hasRole(roles: [SUPER_ADMIN])
  
  # Department management (Super Admin and Faculty Admin)
  createDepartment(input: CreateDepartmentInput!): Department! @hasRole(roles: [SUPER_ADMIN, FACULTY_ADMIN])
  updateDepartment(id: ID!, input: UpdateDepartmentInput!): Department! @hasRole(roles: [SUPER_ADMIN, FACULTY_ADMIN])
  deleteDepartment(id: ID!): Boolean! @hasRole(roles: [SUPER_ADMIN, FACULTY_ADMIN])
  
  # Subscription management (Super Admin only)
  createSubscription(input: CreateSubscriptionInput!): FacultySubscription! @hasRole(roles: [SUPER_ADMIN])
  updateSubscription(id: ID!, input: UpdateSubscriptionInput!): FacultySubscription! @hasRole(roles: [SUPER_ADMIN])
  deleteSubscription(id: ID!): Boolean! @hasRole(roles: [SUPER_ADMIN])
  
  # User role management
  assignFacultyAdmin(userID: ID!, facultyID: ID!): User! @hasRole(roles: [SUPER_ADMIN])
  assignRegularAdmin(userID: ID!, facultyID: ID!, departmentID: ID): User! @hasRole(roles: [SUPER_ADMIN, FACULTY_ADMIN])
  removeAdminRole(userID: ID!): User! @hasRole(roles: [SUPER_ADMIN, FACULTY_ADMIN])
  
  # Activity Template management
  createActivityTemplate(input: CreateActivityTemplateInput!): ActivityTemplate! @hasRole(roles: [SUPER_ADMIN, FACULTY_ADMIN])
  updateActivityTemplate(id: ID!, input: UpdateActivityTemplateInput!): ActivityTemplate! @hasRole(roles: [SUPER_ADMIN, FACULTY_ADMIN])
  deleteActivityTemplate(id: ID!): Boolean! @hasRole(roles: [SUPER_ADMIN, FACULTY_ADMIN])
  
  # Activity Assignment management
  assignActivity(input: CreateActivityAssignmentInput!): ActivityAssignment! @hasRole(roles: [SUPER_ADMIN, FACULTY_ADMIN])
  updateActivityAssignment(id: ID!, input: UpdateActivityAssignmentInput!): ActivityAssignment! @hasRole(roles: [SUPER_ADMIN, FACULTY_ADMIN])
  removeActivityAssignment(id: ID!): Boolean! @hasRole(roles: [SUPER_ADMIN, FACULTY_ADMIN])
  
  # QR Code management
  scanQRCode(input: QRScanInput!): QRScanResult! @hasRole(roles: [SUPER_ADMIN, FACULTY_ADMIN, REGULAR_ADMIN])
  refreshMyQRSecret: QRData! @auth
  refreshUserQRSecret(userID: ID!): QRData! @hasRole(roles: [SUPER_ADMIN, FACULTY_ADMIN])
}

