steps:
  # Validate Dockerfile and context
  - name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Validating Docker context..."
        ls -la backend/
        echo "Checking Dockerfile..."
        cat backend/Dockerfile | head -10
        echo "Checking go.mod..."
        cat backend/go.mod | head -10
    id: 'validate-context'

  # Build backend Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '--no-cache'
      - '-t'
      - 'gcr.io/$PROJECT_ID/tru-activity-backend:$BUILD_ID'
      - '-t'
      - 'gcr.io/$PROJECT_ID/tru-activity-backend:latest'
      - './backend'
    id: 'build-backend'
    waitFor: ['validate-context']

  # Push backend images
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - 'gcr.io/$PROJECT_ID/tru-activity-backend:$BUILD_ID'
    id: 'push-backend-sha'
    waitFor: ['build-backend']

  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - 'gcr.io/$PROJECT_ID/tru-activity-backend:latest'
    id: 'push-backend-latest'
    waitFor: ['build-backend']

  # Run database migrations
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        echo "Starting database migration..."
        
        # Create a temporary Cloud Run job for migrations
        echo "Creating migration job..."
        gcloud run jobs create migration-job-${BUILD_ID} \
          --image=gcr.io/$PROJECT_ID/tru-activity-backend:$BUILD_ID \
          --region=$_REGION \
          --service-account=tru-activity-migration@$PROJECT_ID.iam.gserviceaccount.com \
          --set-env-vars="DB_HOST=/cloudsql/$PROJECT_ID:$_REGION:tru-activity-db,DB_PORT=5432,DB_NAME=tru_activity_prod,DB_USER=postgres,MIGRATION_MODE=true" \
          --set-secrets="DB_PASSWORD=db-password:latest" \
          --vpc-connector=projects/$PROJECT_ID/locations/$_REGION/connectors/tru-activity-connector \
          --vpc-egress=private-ranges-only \
          --memory=1Gi \
          --cpu=1 \
          --max-retries=2 \
          --parallelism=1 \
          --task-count=1 || echo "Migration job might already exist"
        
        # Execute the migration job
        echo "Executing migration job..."
        gcloud run jobs execute migration-job-${BUILD_ID} \
          --region=$_REGION \
          --wait
        
        echo "Migration completed successfully"
        
        # Clean up the migration job
        echo "Cleaning up migration job..."
        gcloud run jobs delete migration-job-${BUILD_ID} \
          --region=$_REGION \
          --quiet || echo "Migration job cleanup completed"
    id: 'run-migrations'
    waitFor: ['push-backend-sha']

  # Deploy to Cloud Run
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
      - 'run'
      - 'services'
      - 'replace'
      - 'backend/service.yaml'
      - '--region=$_REGION'
    env:
      - 'PROJECT_ID=$PROJECT_ID'
      - 'REGION=$_REGION'
    id: 'deploy-backend'
    waitFor: ['run-migrations']

  # Update service YAML with new image
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud run services update tru-activity-backend \
          --image=gcr.io/$PROJECT_ID/tru-activity-backend:$BUILD_ID \
          --region=$_REGION
    id: 'update-service-image'
    waitFor: ['deploy-backend']

  # Build and deploy frontend to Cloud Run
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Build and deploy frontend using Cloud Build
        gcloud builds submit \
          --config=frontend/cloudbuild.yaml \
          --substitutions=_REGION=$_REGION \
          --project=$PROJECT_ID \
          ./frontend
    id: 'deploy-frontend'

  # Run health checks
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        echo "Running health checks..."
        
        # Get the service URL and check health
        echo "Getting service URL and checking health..."
        SERVICE_ENDPOINT=$(gcloud run services describe tru-activity-backend \
          --region=$_REGION \
          --format="value(status.url)")
        
        echo "Service URL: $${SERVICE_ENDPOINT}"
        
        # Wait for service to be ready
        echo "Waiting for service to be ready..."
        sleep 30
        
        # Check health endpoint
        echo "Checking health endpoint..."
        curl -f "$${SERVICE_ENDPOINT}/health" || {
          echo "Health check failed, checking service logs..."
          gcloud logging read "resource.type=cloud_run_revision AND resource.labels.service_name=tru-activity-backend" --limit=50 --format="value(textPayload)"
          exit 1
        }
        
        echo "Health check passed!"
    id: 'health-check'
    waitFor: ['update-service-image']

# Build configuration
options:
  machineType: 'E2_HIGHCPU_8'
  substitutionOption: 'ALLOW_LOOSE'
  logging: CLOUD_LOGGING_ONLY

# Substitutions
substitutions:
  _REGION: 'asia-southeast1'
  _HASH: '${COMMIT_SHA:0:7}'

# Tags for organization
tags:
  - 'tru-activity'
  - 'backend'
  - 'frontend'

# Timeout
timeout: '1200s'