steps:
  # Setup infrastructure first
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        echo "🏗️ Setting up infrastructure..."
        
        # Enable required APIs
        echo "Enabling required APIs..."
        gcloud services enable run.googleapis.com sqladmin.googleapis.com redis.googleapis.com \
          cloudbuild.googleapis.com secretmanager.googleapis.com monitoring.googleapis.com \
          logging.googleapis.com cloudtrace.googleapis.com vpcaccess.googleapis.com \
          servicenetworking.googleapis.com compute.googleapis.com \
          cloudresourcemanager.googleapis.com
        
        # Create Cloud SQL instance if not exists
        if ! gcloud sql instances describe tru-activity-db &>/dev/null; then
          echo "Creating Cloud SQL instance..."
          gcloud sql instances create tru-activity-db \
            --database-version=POSTGRES_17 \
            --tier=db-f1-micro \
            --edition=ENTERPRISE \
            --region=$_REGION \
            --root-password="$_DB_PASSWORD" \
            --storage-size=20GB \
            --storage-auto-increase \
            --backup-start-time=03:00 \
            --maintenance-window-day=SUN \
            --maintenance-window-hour=04 \
            --deletion-protection \
            --authorized-networks=0.0.0.0/0 \
            --assign-ip
        else
          echo "Cloud SQL instance already exists, updating postgres password..."
          gcloud sql users set-password postgres \
            --instance=tru-activity-db \
            --password="$_DB_PASSWORD" || echo "Failed to update postgres password"
        fi
        
        # Create Redis instance if not exists
        if ! gcloud redis instances describe tru-activity-redis --region=$_REGION &>/dev/null; then
          echo "Creating Redis instance..."
          gcloud redis instances create tru-activity-redis \
            --size=1 \
            --region=$_REGION \
            --redis-version=redis_7_0
        else
          echo "Redis instance already exists"
        fi
        
        # Create VPC connector subnet if not exists
        if ! gcloud compute networks subnets describe tru-activity-connector-subnet --region=$_REGION &>/dev/null; then
          echo "Creating VPC connector subnet..."
          gcloud compute networks subnets create tru-activity-connector-subnet \
            --network=default \
            --range=10.8.0.0/28 \
            --region=$_REGION
        else
          echo "VPC connector subnet already exists"
        fi
        
        # Create VPC connector if not exists
        if ! gcloud compute networks vpc-access connectors describe tru-activity-connector --region=$_REGION &>/dev/null; then
          echo "Creating VPC connector..."
          gcloud compute networks vpc-access connectors create tru-activity-connector \
            --region=$_REGION \
            --subnet-project=$PROJECT_ID \
            --subnet=tru-activity-connector-subnet \
            --min-instances=2 \
            --max-instances=10
        else
          echo "VPC connector already exists"
        fi
        
        # Create service accounts if not exist
        if ! gcloud iam service-accounts describe tru-activity-backend@$PROJECT_ID.iam.gserviceaccount.com &>/dev/null; then
          echo "Creating backend service account..."
          gcloud iam service-accounts create tru-activity-backend \
            --display-name="TRU Activity Backend Service Account" \
            --description="Service account for TRU Activity backend"
          
          # Grant IAM roles
          gcloud projects add-iam-policy-binding $PROJECT_ID \
            --member="serviceAccount:tru-activity-backend@$PROJECT_ID.iam.gserviceaccount.com" \
            --role="roles/cloudsql.client" --quiet || true
          gcloud projects add-iam-policy-binding $PROJECT_ID \
            --member="serviceAccount:tru-activity-backend@$PROJECT_ID.iam.gserviceaccount.com" \
            --role="roles/redis.editor" --quiet || true
          gcloud projects add-iam-policy-binding $PROJECT_ID \
            --member="serviceAccount:tru-activity-backend@$PROJECT_ID.iam.gserviceaccount.com" \
            --role="roles/secretmanager.secretAccessor" --quiet || true
          gcloud projects add-iam-policy-binding $PROJECT_ID \
            --member="serviceAccount:tru-activity-backend@$PROJECT_ID.iam.gserviceaccount.com" \
            --role="roles/cloudsql.instanceUser" --quiet || true
        else
          echo "Backend service account already exists"
        fi
        
        # Grant Cloud Build service account necessary permissions
        echo "Setting up Cloud Build service account permissions..."
        
        # Use the default Cloud Build service account (which has editor role)
        PROJECT_NUMBER=$$(gcloud projects describe $PROJECT_ID --format="value(projectNumber)")
        CLOUDBUILD_SA="$$PROJECT_NUMBER-compute@developer.gserviceaccount.com"
        CLOUDBUILD_SERVICE_SA="service-$$PROJECT_NUMBER@gcp-sa-cloudbuild.iam.gserviceaccount.com"
        
        echo "Default Cloud Build SA: $$CLOUDBUILD_SA"
        echo "Service Cloud Build SA: $$CLOUDBUILD_SERVICE_SA"
        
        # Grant permissions to the default compute service account (which has editor role)
        # The editor role should allow these operations, but let's be explicit
        
        echo "Granting iam.serviceAccountUser to $$CLOUDBUILD_SA (may already exist)"
        gcloud projects add-iam-policy-binding $PROJECT_ID \
          --member="serviceAccount:$$CLOUDBUILD_SA" \
          --role="roles/iam.serviceAccountUser" --quiet || echo "Note: iam.serviceAccountUser grant failed (may already exist)"
        
        echo "Granting run.admin to $$CLOUDBUILD_SA (may already exist)"
        gcloud projects add-iam-policy-binding $PROJECT_ID \
          --member="serviceAccount:$$CLOUDBUILD_SA" \
          --role="roles/run.admin" --quiet || echo "Note: run.admin grant failed (may already exist)"
        
        # Grant permission to act as backend service account
        echo "Granting actAs permission for backend service account..."
        gcloud iam service-accounts add-iam-policy-binding \
          tru-activity-backend@$PROJECT_ID.iam.gserviceaccount.com \
          --member="serviceAccount:$$CLOUDBUILD_SA" \
          --role="roles/iam.serviceAccountUser" --quiet || echo "Note: backend SA actAs permission grant failed (may already exist)"
        
        echo "Cloud Build permissions setup completed (errors above are normal if permissions already exist)"
        
        # Create secrets with values from substitution variables
        echo "Setting up secrets with provided values..."
        if ! gcloud secrets describe db-password &>/dev/null; then
          echo "Creating db-password secret..."
          echo -n "$_DB_PASSWORD" | gcloud secrets create db-password --data-file=-
        else
          echo "Updating db-password secret..."
          echo -n "$_DB_PASSWORD" | gcloud secrets versions add db-password --data-file=-
        fi
        
        if ! gcloud secrets describe jwt-secret &>/dev/null; then
          echo "Creating jwt-secret..."
          echo -n "$_JWT_SECRET" | gcloud secrets create jwt-secret --data-file=-
        else
          echo "Updating jwt-secret..."
          echo -n "$_JWT_SECRET" | gcloud secrets versions add jwt-secret --data-file=-
        fi
        
        if ! gcloud secrets describe qr-secret &>/dev/null; then
          echo "Creating qr-secret..."
          echo -n "$_QR_SECRET" | gcloud secrets create qr-secret --data-file=-
        else
          echo "Updating qr-secret..."
          echo -n "$_QR_SECRET" | gcloud secrets versions add qr-secret --data-file=-
        fi
        
        if ! gcloud secrets describe sendgrid-api-key &>/dev/null; then
          echo "Creating sendgrid-api-key secret..."
          echo -n "$_SENDGRID_API_KEY" | gcloud secrets create sendgrid-api-key --data-file=-
        else
          echo "Updating sendgrid-api-key secret..."
          echo -n "$_SENDGRID_API_KEY" | gcloud secrets versions add sendgrid-api-key --data-file=-
        fi
        
        # Secret Manager permissions are handled separately
        echo "Secret Manager permissions should be configured separately"
        
        echo "✅ Infrastructure setup completed"
    id: 'setup-infrastructure'

  # Validate Dockerfile and context
  - name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Validating Docker context..."
        ls -la backend/
        echo "Checking Dockerfile..."
        cat backend/Dockerfile | head -10
        echo "Checking go.mod..."
        cat backend/go.mod | head -10
    id: 'validate-context'
    waitFor: ['setup-infrastructure']

  # Update backend service.yaml with infrastructure values
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        echo "Updating backend service.yaml with infrastructure values..."
        
        # Get Redis IP
        REDIS_IP=$$(gcloud redis instances describe tru-activity-redis --region=$_REGION --format="value(host)" 2>/dev/null || echo "10.0.0.1")
        
        # Get Cloud SQL public IP
        SQL_IP=$$(gcloud sql instances describe tru-activity-db --format="value(ipAddresses[0].ipAddress)" 2>/dev/null || echo "127.0.0.1")
        
        echo "Redis IP: $$REDIS_IP"
        echo "SQL IP: $$SQL_IP"
        
        # Create a copy and update backend service.yaml with actual values
        cp backend/service.yaml /tmp/backend-service.yaml
        
        # Replace any project ID patterns
        sed -i "s/tru-activity-[0-9]*/$PROJECT_ID/g" /tmp/backend-service.yaml
        
        # Replace region patterns  
        sed -i "s/asia-southeast[0-9]*/$_REGION/g" /tmp/backend-service.yaml
        
        # Replace Redis IP (look for any private IP in 10.x.x.x range)
        sed -i "s/10\.[0-9]*\.[0-9]*\.[0-9]*/$$REDIS_IP/g" /tmp/backend-service.yaml
        
        # Replace SQL IP (look for any public IP pattern)
        sed -i "/DB_HOST/s/[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*/$$SQL_IP/" /tmp/backend-service.yaml
        
        # Show what we're deploying
        echo "=== Backend service.yaml that will be deployed ==="
        cat /tmp/backend-service.yaml
        echo "=================================================="
        
        echo "✅ Backend service.yaml updated"
    id: 'update-backend-service-yaml'
    waitFor: ['validate-context']

  # Build backend Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '--no-cache'
      - '-t'
      - 'gcr.io/$PROJECT_ID/tru-activity-backend:$BUILD_ID'
      - '-t'
      - 'gcr.io/$PROJECT_ID/tru-activity-backend:latest'
      - './backend'
    id: 'build-backend'
    waitFor: ['validate-context']

  # Push backend images
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - 'gcr.io/$PROJECT_ID/tru-activity-backend:$BUILD_ID'
    id: 'push-backend-sha'
    waitFor: ['build-backend']

  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - 'gcr.io/$PROJECT_ID/tru-activity-backend:latest'
    id: 'push-backend-latest'
    waitFor: ['build-backend']

  # Run database migrations using gcloud sql directly
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        echo "Running database migrations directly with gcloud sql..."
        
        # Check if database exists
        gcloud sql databases describe tru_activity_prod --instance=tru-activity-db || \
        gcloud sql databases create tru_activity_prod --instance=tru-activity-db
        
        echo "Database migrations will be handled by the application on first startup"
        echo "Migration step completed"
    id: 'run-migrations'
    waitFor: ['push-backend-sha']

  # Deploy to Cloud Run
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        echo "Preparing backend service.yaml for deployment..."
        
        # Get Redis IP
        REDIS_IP=$$(gcloud redis instances describe tru-activity-redis --region=$_REGION --format="value(host)" 2>/dev/null || echo "10.0.0.1")
        
        # Get Cloud SQL public IP
        SQL_IP=$$(gcloud sql instances describe tru-activity-db --format="value(ipAddresses[0].ipAddress)" 2>/dev/null || echo "127.0.0.1")
        
        echo "Redis IP: $$REDIS_IP"
        echo "SQL IP: $$SQL_IP"
        
        # Create a copy and update backend service.yaml with actual values
        cp backend/service.yaml /tmp/backend-service.yaml
        
        # Replace project ID everywhere (specific hardcoded values)
        sed -i "s/tru-activity-467606/$PROJECT_ID/g" /tmp/backend-service.yaml
        
        # Replace region 
        sed -i "s/asia-southeast1/$_REGION/g" /tmp/backend-service.yaml
        
        # Replace Redis IP (specific IP)
        sed -i "s/10\.187\.238\.107/$$REDIS_IP/g" /tmp/backend-service.yaml
        
        # Replace SQL IP (specific IP)
        sed -i "s/35\.185\.188\.104/$$SQL_IP/g" /tmp/backend-service.yaml
        
        # Show what we're deploying
        echo "=== Backend service.yaml that will be deployed ==="
        cat /tmp/backend-service.yaml
        echo "=================================================="
        
        # Deploy the service
        echo "Deploying backend service..."
        gcloud run services replace /tmp/backend-service.yaml --region=$_REGION
        
        echo "✅ Backend deployment completed"
    env:
      - 'PROJECT_ID=$PROJECT_ID'
      - 'REGION=$_REGION'
    id: 'deploy-backend'
    waitFor: ['run-migrations']

  # Update service YAML with new image
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud run services update tru-activity-backend \
          --image=gcr.io/$PROJECT_ID/tru-activity-backend:$BUILD_ID \
          --region=$_REGION
    id: 'update-service-image'
    waitFor: ['deploy-backend']

  # Build frontend Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '--no-cache'
      - '-t'
      - 'gcr.io/$PROJECT_ID/tru-activity-frontend:$BUILD_ID'
      - '-t'
      - 'gcr.io/$PROJECT_ID/tru-activity-frontend:latest'
      - './frontend'
    id: 'build-frontend'
    waitFor: ['update-service-image']

  # Push frontend images
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - 'gcr.io/$PROJECT_ID/tru-activity-frontend:$BUILD_ID'
    id: 'push-frontend-sha'
    waitFor: ['build-frontend']

  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - 'gcr.io/$PROJECT_ID/tru-activity-frontend:latest'
    id: 'push-frontend-latest'
    waitFor: ['build-frontend']

  # Get backend URL and prepare frontend service.yaml
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        echo "Getting backend service URL..."
        
        # Wait a moment for backend service to be ready
        echo "Waiting for backend service to be ready..."
        sleep 10
        
        # Get the actual backend service URL with retry
        BACKEND_URL=""
        for i in {1..5}; do
          BACKEND_URL=$$(gcloud run services describe tru-activity-backend \
            --region=$_REGION \
            --format="value(status.url)" 2>/dev/null) || true
          
          if [ -n "$$BACKEND_URL" ]; then
            break
          fi
          
          echo "Attempt $$i: Backend service not ready, waiting 10 seconds..."
          sleep 10
        done
        
        if [ -z "$$BACKEND_URL" ]; then
          echo "Error: Could not get backend URL after 5 attempts"
          exit 1
        fi
        
        echo "Backend URL: $$BACKEND_URL"
        echo "Preparing frontend service.yaml with actual backend URL..."
        
        # Create frontend service.yaml with actual backend URL
        cp frontend/service.yaml /tmp/frontend-service.yaml
        sed -i "s/\$$PROJECT_ID/$PROJECT_ID/g" /tmp/frontend-service.yaml
        sed -i "s|BACKEND_URL_PLACEHOLDER|$$BACKEND_URL|g" /tmp/frontend-service.yaml
        
        # Show the resulting configuration for verification
        echo "Backend URL: $$BACKEND_URL"
        echo "GraphQL URL will be: $$BACKEND_URL/query"
        echo "=== Generated frontend service.yaml environment section ==="
        grep -A 10 "env:" /tmp/frontend-service.yaml || true
        echo "==========================================="
        
        # Deploy frontend with actual backend URL
        gcloud run services replace /tmp/frontend-service.yaml --region=$_REGION
    env:
      - 'PROJECT_ID=$PROJECT_ID'
      - 'REGION=$_REGION'
    id: 'deploy-frontend'
    waitFor: ['push-frontend-sha', 'update-service-image']

  # Update frontend service with new image
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud run services update tru-activity-frontend \
          --image=gcr.io/$PROJECT_ID/tru-activity-frontend:$BUILD_ID \
          --region=$_REGION
    id: 'update-frontend-image'
    waitFor: ['deploy-frontend']


  # Run health checks
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        echo "Running health checks..."
        
        # Get the service URL and check health
        echo "Getting service URL and checking health..."
        SERVICE_ENDPOINT=$(gcloud run services describe tru-activity-backend \
          --region=$_REGION \
          --format="value(status.url)")
        
        echo "Service URL: $${SERVICE_ENDPOINT}"
        
        # Wait for service to be ready
        echo "Waiting for service to be ready..."
        sleep 30
        
        # Check health endpoint
        echo "Checking health endpoint..."
        curl -f "$${SERVICE_ENDPOINT}/health" || {
          echo "Health check failed, checking service logs..."
          gcloud logging read "resource.type=cloud_run_revision AND resource.labels.service_name=tru-activity-backend" --limit=50 --format="value(textPayload)"
          exit 1
        }
        
        echo "Health check passed!"
    id: 'health-check'
    waitFor: ['update-service-image', 'update-frontend-image']

# Build configuration
options:
  machineType: 'E2_HIGHCPU_8'
  logging: CLOUD_LOGGING_ONLY

# Substitutions (override these in Cloud Build Trigger)
substitutions:
  _REGION: 'asia-southeast1'
  _DB_PASSWORD: 'CHANGE_ME'
  _JWT_SECRET: 'CHANGE_ME'
  _QR_SECRET: 'CHANGE_ME'
  _SENDGRID_API_KEY: 'CHANGE_ME'

# Tags for organization
tags:
  - 'tru-activity'
  - 'backend'
  - 'frontend'

# Timeout  
timeout: '2400s'