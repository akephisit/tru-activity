steps:
  # Validate Dockerfile and context
  - name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Validating Docker context..."
        ls -la backend/
        echo "Checking Dockerfile..."
        cat backend/Dockerfile | head -10
        echo "Checking go.mod..."
        cat backend/go.mod | head -10
    id: 'validate-context'

  # Build backend Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '--no-cache'
      - '-t'
      - 'gcr.io/$PROJECT_ID/tru-activity-backend:$BUILD_ID'
      - '-t'
      - 'gcr.io/$PROJECT_ID/tru-activity-backend:latest'
      - './backend'
    id: 'build-backend'
    waitFor: ['validate-context']

  # Push backend images
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - 'gcr.io/$PROJECT_ID/tru-activity-backend:$BUILD_ID'
    id: 'push-backend-sha'
    waitFor: ['build-backend']

  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - 'gcr.io/$PROJECT_ID/tru-activity-backend:latest'
    id: 'push-backend-latest'
    waitFor: ['build-backend']

  # Run database migrations using gcloud sql directly
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        echo "Running database migrations directly with gcloud sql..."
        
        # Check if database exists
        gcloud sql databases describe tru_activity_prod --instance=tru-activity-db || \
        gcloud sql databases create tru_activity_prod --instance=tru-activity-db
        
        echo "Database migrations will be handled by the application on first startup"
        echo "Migration step completed"
    id: 'run-migrations'
    waitFor: ['push-backend-sha']

  # Deploy to Cloud Run
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
      - 'run'
      - 'services'
      - 'replace'
      - 'backend/service.yaml'
      - '--region=$_REGION'
    env:
      - 'PROJECT_ID=$PROJECT_ID'
      - 'REGION=$_REGION'
    id: 'deploy-backend'
    waitFor: ['run-migrations']

  # Update service YAML with new image
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud run services update tru-activity-backend \
          --image=gcr.io/$PROJECT_ID/tru-activity-backend:$BUILD_ID \
          --region=$_REGION
    id: 'update-service-image'
    waitFor: ['deploy-backend']

  # Build frontend Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '--no-cache'
      - '-t'
      - 'gcr.io/$PROJECT_ID/tru-activity-frontend:$BUILD_ID'
      - '-t'
      - 'gcr.io/$PROJECT_ID/tru-activity-frontend:latest'
      - './frontend'
    id: 'build-frontend'
    waitFor: ['update-service-image']

  # Push frontend images
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - 'gcr.io/$PROJECT_ID/tru-activity-frontend:$BUILD_ID'
    id: 'push-frontend-sha'
    waitFor: ['build-frontend']

  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - 'gcr.io/$PROJECT_ID/tru-activity-frontend:latest'
    id: 'push-frontend-latest'
    waitFor: ['build-frontend']

  # Get backend URL and prepare frontend service.yaml
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        echo "Getting backend service URL..."
        
        # Wait a moment for backend service to be ready
        echo "Waiting for backend service to be ready..."
        sleep 10
        
        # Get the actual backend service URL with retry
        BACKEND_URL=""
        for i in {1..5}; do
          BACKEND_URL=$$(gcloud run services describe tru-activity-backend \
            --region=$_REGION \
            --format="value(status.url)" 2>/dev/null) || true
          
          if [ -n "$$BACKEND_URL" ]; then
            break
          fi
          
          echo "Attempt $$i: Backend service not ready, waiting 10 seconds..."
          sleep 10
        done
        
        if [ -z "$$BACKEND_URL" ]; then
          echo "Error: Could not get backend URL after 5 attempts"
          exit 1
        fi
        
        echo "Backend URL: $$BACKEND_URL"
        echo "Preparing frontend service.yaml with actual backend URL..."
        
        # Create frontend service.yaml with actual backend URL
        cp frontend/service.yaml /tmp/frontend-service.yaml
        sed -i "s/\$$PROJECT_ID/$PROJECT_ID/g" /tmp/frontend-service.yaml
        sed -i "s|BACKEND_URL_PLACEHOLDER|$$BACKEND_URL|g" /tmp/frontend-service.yaml
        
        # Show the resulting configuration for verification
        echo "Backend URL: $$BACKEND_URL"
        echo "GraphQL URL will be: $$BACKEND_URL/query"
        echo "=== Generated frontend service.yaml environment section ==="
        grep -A 10 "env:" /tmp/frontend-service.yaml || true
        echo "==========================================="
        
        # Deploy frontend with actual backend URL
        gcloud run services replace /tmp/frontend-service.yaml --region=$_REGION
    env:
      - 'PROJECT_ID=$PROJECT_ID'
      - 'REGION=$_REGION'
    id: 'deploy-frontend'
    waitFor: ['push-frontend-sha', 'update-service-image']

  # Update frontend service with new image
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud run services update tru-activity-frontend \
          --image=gcr.io/$PROJECT_ID/tru-activity-frontend:$BUILD_ID \
          --region=$_REGION
    id: 'update-frontend-image'
    waitFor: ['deploy-frontend']


  # Run health checks
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        echo "Running health checks..."
        
        # Get the service URL and check health
        echo "Getting service URL and checking health..."
        SERVICE_ENDPOINT=$(gcloud run services describe tru-activity-backend \
          --region=$_REGION \
          --format="value(status.url)")
        
        echo "Service URL: $${SERVICE_ENDPOINT}"
        
        # Wait for service to be ready
        echo "Waiting for service to be ready..."
        sleep 30
        
        # Check health endpoint
        echo "Checking health endpoint..."
        curl -f "$${SERVICE_ENDPOINT}/health" || {
          echo "Health check failed, checking service logs..."
          gcloud logging read "resource.type=cloud_run_revision AND resource.labels.service_name=tru-activity-backend" --limit=50 --format="value(textPayload)"
          exit 1
        }
        
        echo "Health check passed!"
    id: 'health-check'
    waitFor: ['update-service-image', 'update-frontend-image']

# Build configuration
options:
  machineType: 'E2_HIGHCPU_8'
  logging: CLOUD_LOGGING_ONLY

# Substitutions
substitutions:
  _REGION: 'asia-southeast1'

# Tags for organization
tags:
  - 'tru-activity'
  - 'backend'
  - 'frontend'

# Timeout
timeout: '1200s'